{"version":3,"file":"platform-browser.d.ts","sources":["/Users/sreenath/Desktop/polls-app1/angular8-demo/node_modules/@angular/platform-browser/platform-browser.d.ts"],"sourcesContent":["/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ComponentRef } from '@angular/core';\r\nimport { DebugElement } from '@angular/core';\r\nimport { DebugNode } from '@angular/core';\r\nimport { ErrorHandler } from '@angular/core';\r\nimport { GetTestability } from '@angular/core';\r\nimport { InjectionToken } from '@angular/core';\r\nimport { Injector } from '@angular/core';\r\nimport { LocationChangeListener } from '@angular/common';\r\nimport { ModuleWithProviders } from '@angular/core';\r\nimport { NgProbeToken } from '@angular/core';\r\nimport { NgZone } from '@angular/core';\r\nimport { OnDestroy } from '@angular/core';\r\nimport { PlatformLocation } from '@angular/common';\r\nimport { PlatformRef } from '@angular/core';\r\nimport { Predicate } from '@angular/core';\r\nimport { Provider } from '@angular/core';\r\nimport { Renderer2 } from '@angular/core';\r\nimport { RendererFactory2 } from '@angular/core';\r\nimport { RendererType2 } from '@angular/core';\r\nimport { Sanitizer } from '@angular/core';\r\nimport { SecurityContext } from '@angular/core';\r\nimport { StaticProvider } from '@angular/core';\r\nimport { Testability } from '@angular/core';\r\nimport { TestabilityRegistry } from '@angular/core';\r\nimport { Type } from '@angular/core';\r\nimport { Version } from '@angular/core';\r\nimport { ɵConsole } from '@angular/core';\r\n\r\n/**\r\n * Exports required infrastructure for all Angular apps.\r\n * Included by default in all Angular apps created with the CLI\r\n * `new` command.\r\n * Re-exports `CommonModule` and `ApplicationModule`, making their\r\n * exports and providers available to all apps.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class BrowserModule {\r\n    constructor(parentModule: BrowserModule | null);\r\n    /**\r\n     * Configures a browser-based app to transition from a server-rendered app, if\r\n     * one is present on the page.\r\n     *\r\n     * @param params An object containing an identifier for the app to transition.\r\n     * The ID must match between the client and server versions of the app.\r\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\r\n     */\r\n    static withServerTransition(params: {\r\n        appId: string;\r\n    }): ModuleWithProviders<BrowserModule>;\r\n}\r\n\r\n/**\r\n * NgModule to install on the client side while using the `TransferState` to transfer state from\r\n * server to client.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class BrowserTransferStateModule {\r\n}\r\n\r\n/**\r\n * Predicates for use with {@link DebugElement}'s query functions.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class By {\r\n    /**\r\n     * Match all nodes.\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\r\n     */\r\n    static all(): Predicate<DebugNode>;\r\n    /**\r\n     * Match elements by the given CSS selector.\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\r\n     */\r\n    static css(selector: string): Predicate<DebugElement>;\r\n    /**\r\n     * Match nodes that have the given directive present.\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\r\n     */\r\n    static directive(type: Type<any>): Predicate<DebugNode>;\r\n}\r\n\r\n/**\r\n * Disables Angular tools.\r\n *\r\n * @publicApi\r\n */\r\nexport declare function disableDebugTools(): void;\r\n\r\n/**\r\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\r\n * values to be safe to use in the different DOM contexts.\r\n *\r\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\r\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\r\n * the website.\r\n *\r\n * In specific situations, it might be necessary to disable sanitization, for example if the\r\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\r\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\r\n * methods, and then binding to that value from the template.\r\n *\r\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\r\n * Cross Site Scripting (XSS) security bug!\r\n *\r\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\r\n * close as possible to the source of the value, to make it easy to verify no security bug is\r\n * created by its use.\r\n *\r\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\r\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\r\n * code. The sanitizer leaves safe values intact.\r\n *\r\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\r\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\r\n * into this call. Make sure any user data is appropriately escaped for this security context.\r\n * For more detail, see the [Security Guide](http://g.co/ng/security).\r\n *\r\n * @publicApi\r\n */\r\nexport declare abstract class DomSanitizer implements Sanitizer {\r\n    /**\r\n     * Sanitizes a value for use in the given SecurityContext.\r\n     *\r\n     * If value is trusted for the context, this method will unwrap the contained safe value and use\r\n     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\r\n     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\r\n     * is responsible to make sure that the value can definitely be safely used in the given context.\r\n     */\r\n    abstract sanitize(context: SecurityContext, value: SafeValue | string | null): string | null;\r\n    /**\r\n     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\r\n     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\r\n     * leave safe HTML intact, so in most situations this method should not be used.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     */\r\n    abstract bypassSecurityTrustHtml(value: string): SafeHtml;\r\n    /**\r\n     * Bypass security and trust the given value to be safe style value (CSS).\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     */\r\n    abstract bypassSecurityTrustStyle(value: string): SafeStyle;\r\n    /**\r\n     * Bypass security and trust the given value to be safe JavaScript.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     */\r\n    abstract bypassSecurityTrustScript(value: string): SafeScript;\r\n    /**\r\n     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\r\n     * in hyperlinks or `<img src>`.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     */\r\n    abstract bypassSecurityTrustUrl(value: string): SafeUrl;\r\n    /**\r\n     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\r\n     * be used to load executable code from, like `<script src>`, or `<iframe src>`.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     */\r\n    abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\r\n}\r\n\r\n/**\r\n * Enabled Angular debug tools that are accessible via your browser's\r\n * developer console.\r\n *\r\n * Usage:\r\n *\r\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\r\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\r\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\r\n *    then hit Enter.\r\n *\r\n * @publicApi\r\n */\r\nexport declare function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T>;\r\n\r\n/**\r\n * The injection token for the event-manager plug-in service.\r\n *\r\n * @publicApi\r\n */\r\nexport declare const EVENT_MANAGER_PLUGINS: InjectionToken<ɵangular_packages_platform_browser_platform_browser_g[]>;\r\n\r\n/**\r\n * An injectable service that provides event management for Angular\r\n * through a browser plug-in.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class EventManager {\r\n    private _zone;\r\n    private _plugins;\r\n    private _eventNameToPlugin;\r\n    /**\r\n     * Initializes an instance of the event-manager service.\r\n     */\r\n    constructor(plugins: ɵangular_packages_platform_browser_platform_browser_g[], _zone: NgZone);\r\n    /**\r\n     * Registers a handler for a specific element and event.\r\n     *\r\n     * @param element The HTML element to receive event notifications.\r\n     * @param eventName The name of the event to listen for.\r\n     * @param handler A function to call when the notification occurs. Receives the\r\n     * event object as an argument.\r\n     * @returns  A callback function that can be used to remove the handler.\r\n     */\r\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    /**\r\n     * Registers a global handler for an event in a target view.\r\n     *\r\n     * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\r\n     * @param eventName The name of the event to listen for.\r\n     * @param handler A function to call when the notification occurs. Receives the\r\n     * event object as an argument.\r\n     * @returns A callback function that can be used to remove the handler.\r\n     */\r\n    addGlobalEventListener(target: string, eventName: string, handler: Function): Function;\r\n    /**\r\n     * Retrieves the compilation zone in which event listeners are registered.\r\n     */\r\n    getZone(): NgZone;\r\n}\r\n\r\n/**\r\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\r\n * @see `HammerGestureConfig`\r\n *\r\n * @publicApi\r\n */\r\nexport declare const HAMMER_GESTURE_CONFIG: InjectionToken<HammerGestureConfig>;\r\n\r\n/**\r\n * Injection token used to provide a {@link HammerLoader} to Angular.\r\n *\r\n * @publicApi\r\n */\r\nexport declare const HAMMER_LOADER: InjectionToken<HammerLoader>;\r\n\r\n/**\r\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\r\n * for gesture recognition. Configures specific event recognition.\r\n * @publicApi\r\n */\r\nexport declare class HammerGestureConfig {\r\n    /**\r\n     * A set of supported event names for gestures to be used in Angular.\r\n     * Angular supports all built-in recognizers, as listed in\r\n     * [HammerJS documentation](http://hammerjs.github.io/).\r\n     */\r\n    events: string[];\r\n    /**\r\n    * Maps gesture event names to a set of configuration options\r\n    * that specify overrides to the default values for specific properties.\r\n    *\r\n    * The key is a supported event name to be configured,\r\n    * and the options object contains a set of properties, with override values\r\n    * to be applied to the named recognizer event.\r\n    * For example, to disable recognition of the rotate event, specify\r\n    *  `{\"rotate\": {\"enable\": false}}`.\r\n    *\r\n    * Properties that are not present take the HammerJS default values.\r\n    * For information about which properties are supported for which events,\r\n    * and their allowed and default values, see\r\n    * [HammerJS documentation](http://hammerjs.github.io/).\r\n    *\r\n    */\r\n    overrides: {\r\n        [key: string]: Object;\r\n    };\r\n    /**\r\n     * Properties whose default values can be overridden for a given event.\r\n     * Different sets of properties apply to different events.\r\n     * For information about which properties are supported for which events,\r\n     * and their allowed and default values, see\r\n     * [HammerJS documentation](http://hammerjs.github.io/).\r\n     */\r\n    options?: {\r\n        cssProps?: any;\r\n        domEvents?: boolean;\r\n        enable?: boolean | ((manager: any) => boolean);\r\n        preset?: any[];\r\n        touchAction?: string;\r\n        recognizers?: any[];\r\n        inputClass?: any;\r\n        inputTarget?: EventTarget;\r\n    };\r\n    /**\r\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\r\n     * and attaches it to a given HTML element.\r\n     * @param element The element that will recognize gestures.\r\n     * @returns A HammerJS event-manager object.\r\n     */\r\n    buildHammer(element: HTMLElement): HammerInstance;\r\n}\r\n\r\ndeclare interface HammerInstance {\r\n    on(eventName: string, callback?: Function): void;\r\n    off(eventName: string, callback?: Function): void;\r\n    destroy?(): void;\r\n}\r\n\r\n/**\r\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\r\n *\r\n * @publicApi\r\n */\r\nexport declare type HammerLoader = () => Promise<void>;\r\n\r\n/**\r\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * const COUNTER_KEY = makeStateKey<number>('counter');\r\n * let value = 10;\r\n *\r\n * transferState.set(COUNTER_KEY, value);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nexport declare function makeStateKey<T = void>(key: string): StateKey<T>;\r\n\r\n/**\r\n * A service that can be used to get and add meta tags.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class Meta {\r\n    private _doc;\r\n    private _dom;\r\n    constructor(_doc: any);\r\n    addTag(tag: MetaDefinition, forceCreation?: boolean): HTMLMetaElement | null;\r\n    addTags(tags: MetaDefinition[], forceCreation?: boolean): HTMLMetaElement[];\r\n    getTag(attrSelector: string): HTMLMetaElement | null;\r\n    getTags(attrSelector: string): HTMLMetaElement[];\r\n    updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null;\r\n    removeTag(attrSelector: string): void;\r\n    removeTagElement(meta: HTMLMetaElement): void;\r\n    private _getOrCreateElement;\r\n    private _setMetaElementAttributes;\r\n    private _parseSelector;\r\n    private _containsAttributes;\r\n}\r\n\r\n\r\n/**\r\n * Represents a meta element.\r\n *\r\n * @publicApi\r\n */\r\nexport declare type MetaDefinition = {\r\n    charset?: string;\r\n    content?: string;\r\n    httpEquiv?: string;\r\n    id?: string;\r\n    itemprop?: string;\r\n    name?: string;\r\n    property?: string;\r\n    scheme?: string;\r\n    url?: string;\r\n} & {\r\n    [prop: string]: string;\r\n};\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport declare const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef;\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as HTML.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeHtml extends SafeValue {\r\n}\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as a URL to load executable code from.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeResourceUrl extends SafeValue {\r\n}\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as JavaScript.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeScript extends SafeValue {\r\n}\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as style (CSS).\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeStyle extends SafeValue {\r\n}\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as a URL linking to a document.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeUrl extends SafeValue {\r\n}\r\n\r\n/**\r\n * Marker interface for a value that's safe to use in a particular context.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeValue {\r\n}\r\n\r\n/**\r\n * A type-safe key to use with `TransferState`.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * const COUNTER_KEY = makeStateKey<number>('counter');\r\n * let value = 10;\r\n *\r\n * transferState.set(COUNTER_KEY, value);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nexport declare type StateKey<T> = string & {\r\n    __not_a_string: never;\r\n};\r\n\r\n/**\r\n * A service that can be used to get and set the title of a current HTML document.\r\n *\r\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\r\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\r\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\r\n * title value.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class Title {\r\n    private _doc;\r\n    constructor(_doc: any);\r\n    /**\r\n     * Get the title of the current HTML document.\r\n     */\r\n    getTitle(): string;\r\n    /**\r\n     * Set the title of the current HTML document.\r\n     * @param newTitle\r\n     */\r\n    setTitle(newTitle: string): void;\r\n}\r\n\r\n/**\r\n * A key value store that is transferred from the application on the server side to the application\r\n * on the client side.\r\n *\r\n * `TransferState` will be available as an injectable token. To use it import\r\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\r\n *\r\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\r\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\r\n * non-lossy manner.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class TransferState {\r\n    private store;\r\n    private onSerializeCallbacks;\r\n    /**\r\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\r\n     */\r\n    get<T>(key: StateKey<T>, defaultValue: T): T;\r\n    /**\r\n     * Set the value corresponding to a key.\r\n     */\r\n    set<T>(key: StateKey<T>, value: T): void;\r\n    /**\r\n     * Remove a key from the store.\r\n     */\r\n    remove<T>(key: StateKey<T>): void;\r\n    /**\r\n     * Test whether a key exists in the store.\r\n     */\r\n    hasKey<T>(key: StateKey<T>): boolean;\r\n    /**\r\n     * Register a callback to provide the value for a key when `toJson` is called.\r\n     */\r\n    onSerialize<T>(key: StateKey<T>, callback: () => T): void;\r\n    /**\r\n     * Serialize the current state of the store to JSON.\r\n     */\r\n    toJson(): string;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport declare const VERSION: Version;\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_a(): ErrorHandler;\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_b(): any;\r\n\r\nexport declare const ɵangular_packages_platform_browser_platform_browser_c: StaticProvider[];\r\n\r\n/**\r\n * Factory to create Meta service.\r\n */\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_d(): Meta;\r\n\r\n\r\n/**\r\n * Factory to create Title service.\r\n */\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_e(): Title;\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_f(doc: Document, appId: string): TransferState;\r\n\r\nexport declare abstract class ɵangular_packages_platform_browser_platform_browser_g {\r\n    private _doc;\r\n    constructor(_doc: any);\r\n    manager: EventManager;\r\n    abstract supports(eventName: string): boolean;\r\n    abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    addGlobalEventListener(element: string, eventName: string, handler: Function): Function;\r\n}\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_h(transitionId: string, document: any, injector: Injector): () => void;\r\n\r\nexport declare const ɵangular_packages_platform_browser_platform_browser_i: StaticProvider[];\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_j(coreTokens: NgProbeToken[]): any;\r\n\r\n/**\r\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\r\n */\r\nexport declare const ɵangular_packages_platform_browser_platform_browser_k: Provider[];\r\n\r\n/**\r\n * Provides DOM operations in any browser environment.\r\n *\r\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n */\r\nexport declare abstract class ɵangular_packages_platform_browser_platform_browser_l extends ɵDomAdapter {\r\n    private _animationPrefix;\r\n    private _transitionEnd;\r\n    constructor();\r\n    getDistributedNodes(el: HTMLElement): Node[];\r\n    resolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string): void;\r\n    supportsDOMEvents(): boolean;\r\n    supportsNativeShadowDOM(): boolean;\r\n    getAnimationPrefix(): string;\r\n    getTransitionEnd(): string;\r\n    supportsAnimation(): boolean;\r\n}\r\n\r\n/**\r\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\r\n * Attacker-controlled data introduced by an unsanitized provider could expose your\r\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\r\n * @publicApi\r\n */\r\nexport declare const ɵBROWSER_SANITIZATION_PROVIDERS: StaticProvider[];\r\n\r\n/**\r\n * A `DomAdapter` powered by full browser DOM APIs.\r\n *\r\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n */\r\nexport declare class ɵBrowserDomAdapter extends ɵangular_packages_platform_browser_platform_browser_l {\r\n    parse(templateHtml: string): void;\r\n    static makeCurrent(): void;\r\n    hasProperty(element: Node, name: string): boolean;\r\n    setProperty(el: Node, name: string, value: any): void;\r\n    getProperty(el: Node, name: string): any;\r\n    invoke(el: Node, methodName: string, args: any[]): any;\r\n    logError(error: string): void;\r\n    log(error: string): void;\r\n    logGroup(error: string): void;\r\n    logGroupEnd(): void;\r\n    readonly attrToPropMap: any;\r\n    contains(nodeA: any, nodeB: any): boolean;\r\n    querySelector(el: HTMLElement, selector: string): any;\r\n    querySelectorAll(el: any, selector: string): any[];\r\n    on(el: Node, evt: any, listener: any): void;\r\n    onAndCancel(el: Node, evt: any, listener: any): Function;\r\n    dispatchEvent(el: Node, evt: any): void;\r\n    createMouseEvent(eventType: string): MouseEvent;\r\n    createEvent(eventType: any): Event;\r\n    preventDefault(evt: Event): void;\r\n    isPrevented(evt: Event): boolean;\r\n    getInnerHTML(el: HTMLElement): string;\r\n    getTemplateContent(el: Node): Node | null;\r\n    getOuterHTML(el: HTMLElement): string;\r\n    nodeName(node: Node): string;\r\n    nodeValue(node: Node): string | null;\r\n    type(node: HTMLInputElement): string;\r\n    content(node: Node): Node;\r\n    firstChild(el: Node): Node | null;\r\n    nextSibling(el: Node): Node | null;\r\n    parentElement(el: Node): Node | null;\r\n    childNodes(el: any): Node[];\r\n    childNodesAsList(el: Node): any[];\r\n    clearNodes(el: Node): void;\r\n    appendChild(el: Node, node: Node): void;\r\n    removeChild(el: Node, node: Node): void;\r\n    replaceChild(el: Node, newChild: Node, oldChild: Node): void;\r\n    remove(node: Node): Node;\r\n    insertBefore(parent: Node, ref: Node, node: Node): void;\r\n    insertAllBefore(parent: Node, ref: Node, nodes: Node[]): void;\r\n    insertAfter(parent: Node, ref: Node, node: any): void;\r\n    setInnerHTML(el: Element, value: string): void;\r\n    getText(el: Node): string | null;\r\n    setText(el: Node, value: string): void;\r\n    getValue(el: any): string;\r\n    setValue(el: any, value: string): void;\r\n    getChecked(el: any): boolean;\r\n    setChecked(el: any, value: boolean): void;\r\n    createComment(text: string): Comment;\r\n    createTemplate(html: any): HTMLElement;\r\n    createElement(tagName: string, doc?: Document): HTMLElement;\r\n    createElementNS(ns: string, tagName: string, doc?: Document): Element;\r\n    createTextNode(text: string, doc?: Document): Text;\r\n    createScriptTag(attrName: string, attrValue: string, doc?: Document): HTMLScriptElement;\r\n    createStyleElement(css: string, doc?: Document): HTMLStyleElement;\r\n    createShadowRoot(el: HTMLElement): DocumentFragment;\r\n    getShadowRoot(el: HTMLElement): DocumentFragment;\r\n    getHost(el: HTMLElement): HTMLElement;\r\n    clone(node: Node): Node;\r\n    getElementsByClassName(element: any, name: string): HTMLElement[];\r\n    getElementsByTagName(element: any, name: string): HTMLElement[];\r\n    classList(element: any): any[];\r\n    addClass(element: any, className: string): void;\r\n    removeClass(element: any, className: string): void;\r\n    hasClass(element: any, className: string): boolean;\r\n    setStyle(element: any, styleName: string, styleValue: string): void;\r\n    removeStyle(element: any, stylename: string): void;\r\n    getStyle(element: any, stylename: string): string;\r\n    hasStyle(element: any, styleName: string, styleValue?: string | null): boolean;\r\n    tagName(element: any): string;\r\n    attributeMap(element: any): Map<string, string>;\r\n    hasAttribute(element: Element, attribute: string): boolean;\r\n    hasAttributeNS(element: Element, ns: string, attribute: string): boolean;\r\n    getAttribute(element: Element, attribute: string): string | null;\r\n    getAttributeNS(element: Element, ns: string, name: string): string | null;\r\n    setAttribute(element: Element, name: string, value: string): void;\r\n    setAttributeNS(element: Element, ns: string, name: string, value: string): void;\r\n    removeAttribute(element: Element, attribute: string): void;\r\n    removeAttributeNS(element: Element, ns: string, name: string): void;\r\n    templateAwareRoot(el: Node): any;\r\n    createHtmlDocument(): HTMLDocument;\r\n    getDefaultDocument(): Document;\r\n    getBoundingClientRect(el: Element): any;\r\n    getTitle(doc: Document): string;\r\n    setTitle(doc: Document, newTitle: string): void;\r\n    elementMatches(n: any, selector: string): boolean;\r\n    isTemplateElement(el: Node): boolean;\r\n    isTextNode(node: Node): boolean;\r\n    isCommentNode(node: Node): boolean;\r\n    isElementNode(node: Node): boolean;\r\n    hasShadowRoot(node: any): boolean;\r\n    isShadowRoot(node: any): boolean;\r\n    importIntoDoc(node: Node): any;\r\n    adoptNode(node: Node): any;\r\n    getHref(el: Element): string;\r\n    getEventKey(event: any): string;\r\n    getGlobalEventTarget(doc: Document, target: string): EventTarget | null;\r\n    getHistory(): History;\r\n    getLocation(): Location;\r\n    getBaseHref(doc: Document): string | null;\r\n    resetBaseElement(): void;\r\n    getUserAgent(): string;\r\n    setData(element: Element, name: string, value: string): void;\r\n    getData(element: Element, name: string): string | null;\r\n    getComputedStyle(element: any): any;\r\n    supportsWebAnimation(): boolean;\r\n    performanceNow(): number;\r\n    supportsCookies(): boolean;\r\n    getCookie(name: string): string | null;\r\n    setCookie(name: string, value: string): void;\r\n}\r\n\r\nexport declare class ɵBrowserGetTestability implements GetTestability {\r\n    static init(): void;\r\n    addToWindow(registry: TestabilityRegistry): void;\r\n    findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\r\n}\r\n\r\n/**\r\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\r\n * This class should not be used directly by an application developer. Instead, use\r\n * {@link Location}.\r\n */\r\nexport declare class ɵBrowserPlatformLocation extends PlatformLocation {\r\n    private _doc;\r\n    readonly location: Location;\r\n    private _history;\r\n    constructor(_doc: any);\r\n    getBaseHrefFromDOM(): string;\r\n    onPopState(fn: LocationChangeListener): void;\r\n    onHashChange(fn: LocationChangeListener): void;\r\n    readonly href: string;\r\n    readonly protocol: string;\r\n    readonly hostname: string;\r\n    readonly port: string;\r\n    pathname: string;\r\n    readonly search: string;\r\n    readonly hash: string;\r\n    pushState(state: any, title: string, url: string): void;\r\n    replaceState(state: any, title: string, url: string): void;\r\n    forward(): void;\r\n    back(): void;\r\n    getState(): unknown;\r\n}\r\n\r\n/**\r\n * Provides DOM operations in an environment-agnostic way.\r\n *\r\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n */\r\nexport declare abstract class ɵDomAdapter {\r\n    resourceLoaderType: Type<any>;\r\n    abstract hasProperty(element: any, name: string): boolean;\r\n    abstract setProperty(el: Element, name: string, value: any): any;\r\n    abstract getProperty(el: Element, name: string): any;\r\n    abstract invoke(el: Element, methodName: string, args: any[]): any;\r\n    abstract logError(error: any): any;\r\n    abstract log(error: any): any;\r\n    abstract logGroup(error: any): any;\r\n    abstract logGroupEnd(): any;\r\n    /**\r\n     * Maps attribute names to their corresponding property names for cases\r\n     * where attribute name doesn't match property name.\r\n     */\r\n    attrToPropMap: {\r\n        [key: string]: string;\r\n    };\r\n    abstract contains(nodeA: any, nodeB: any): boolean;\r\n    abstract parse(templateHtml: string): any;\r\n    abstract querySelector(el: any, selector: string): any;\r\n    abstract querySelectorAll(el: any, selector: string): any[];\r\n    abstract on(el: any, evt: any, listener: any): any;\r\n    abstract onAndCancel(el: any, evt: any, listener: any): Function;\r\n    abstract dispatchEvent(el: any, evt: any): any;\r\n    abstract createMouseEvent(eventType: any): any;\r\n    abstract createEvent(eventType: string): any;\r\n    abstract preventDefault(evt: any): any;\r\n    abstract isPrevented(evt: any): boolean;\r\n    abstract getInnerHTML(el: any): string;\r\n    /** Returns content if el is a <template> element, null otherwise. */\r\n    abstract getTemplateContent(el: any): any;\r\n    abstract getOuterHTML(el: any): string;\r\n    abstract nodeName(node: any): string;\r\n    abstract nodeValue(node: any): string | null;\r\n    abstract type(node: any): string;\r\n    abstract content(node: any): any;\r\n    abstract firstChild(el: any): Node | null;\r\n    abstract nextSibling(el: any): Node | null;\r\n    abstract parentElement(el: any): Node | null;\r\n    abstract childNodes(el: any): Node[];\r\n    abstract childNodesAsList(el: any): Node[];\r\n    abstract clearNodes(el: any): any;\r\n    abstract appendChild(el: any, node: any): any;\r\n    abstract removeChild(el: any, node: any): any;\r\n    abstract replaceChild(el: any, newNode: any, oldNode: any): any;\r\n    abstract remove(el: any): Node;\r\n    abstract insertBefore(parent: any, ref: any, node: any): any;\r\n    abstract insertAllBefore(parent: any, ref: any, nodes: any): any;\r\n    abstract insertAfter(parent: any, el: any, node: any): any;\r\n    abstract setInnerHTML(el: any, value: any): any;\r\n    abstract getText(el: any): string | null;\r\n    abstract setText(el: any, value: string): any;\r\n    abstract getValue(el: any): string;\r\n    abstract setValue(el: any, value: string): any;\r\n    abstract getChecked(el: any): boolean;\r\n    abstract setChecked(el: any, value: boolean): any;\r\n    abstract createComment(text: string): any;\r\n    abstract createTemplate(html: any): HTMLElement;\r\n    abstract createElement(tagName: any, doc?: any): HTMLElement;\r\n    abstract createElementNS(ns: string, tagName: string, doc?: any): Element;\r\n    abstract createTextNode(text: string, doc?: any): Text;\r\n    abstract createScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement;\r\n    abstract createStyleElement(css: string, doc?: any): HTMLStyleElement;\r\n    abstract createShadowRoot(el: any): any;\r\n    abstract getShadowRoot(el: any): any;\r\n    abstract getHost(el: any): any;\r\n    abstract getDistributedNodes(el: any): Node[];\r\n    abstract clone(node: Node): Node;\r\n    abstract getElementsByClassName(element: any, name: string): HTMLElement[];\r\n    abstract getElementsByTagName(element: any, name: string): HTMLElement[];\r\n    abstract classList(element: any): any[];\r\n    abstract addClass(element: any, className: string): any;\r\n    abstract removeClass(element: any, className: string): any;\r\n    abstract hasClass(element: any, className: string): boolean;\r\n    abstract setStyle(element: any, styleName: string, styleValue: string): any;\r\n    abstract removeStyle(element: any, styleName: string): any;\r\n    abstract getStyle(element: any, styleName: string): string;\r\n    abstract hasStyle(element: any, styleName: string, styleValue?: string): boolean;\r\n    abstract tagName(element: any): string;\r\n    abstract attributeMap(element: any): Map<string, string>;\r\n    abstract hasAttribute(element: any, attribute: string): boolean;\r\n    abstract hasAttributeNS(element: any, ns: string, attribute: string): boolean;\r\n    abstract getAttribute(element: any, attribute: string): string | null;\r\n    abstract getAttributeNS(element: any, ns: string, attribute: string): string | null;\r\n    abstract setAttribute(element: any, name: string, value: string): any;\r\n    abstract setAttributeNS(element: any, ns: string, name: string, value: string): any;\r\n    abstract removeAttribute(element: any, attribute: string): any;\r\n    abstract removeAttributeNS(element: any, ns: string, attribute: string): any;\r\n    abstract templateAwareRoot(el: any): any;\r\n    abstract createHtmlDocument(): HTMLDocument;\r\n    abstract getDefaultDocument(): Document;\r\n    abstract getBoundingClientRect(el: any): any;\r\n    abstract getTitle(doc: Document): string;\r\n    abstract setTitle(doc: Document, newTitle: string): any;\r\n    abstract elementMatches(n: any, selector: string): boolean;\r\n    abstract isTemplateElement(el: any): boolean;\r\n    abstract isTextNode(node: any): boolean;\r\n    abstract isCommentNode(node: any): boolean;\r\n    abstract isElementNode(node: any): boolean;\r\n    abstract hasShadowRoot(node: any): boolean;\r\n    abstract isShadowRoot(node: any): boolean;\r\n    abstract importIntoDoc(node: Node): Node;\r\n    abstract adoptNode(node: Node): Node;\r\n    abstract getHref(element: any): string;\r\n    abstract getEventKey(event: any): string;\r\n    abstract resolveAndSetHref(element: any, baseUrl: string, href: string): any;\r\n    abstract supportsDOMEvents(): boolean;\r\n    abstract supportsNativeShadowDOM(): boolean;\r\n    abstract getGlobalEventTarget(doc: Document, target: string): any;\r\n    abstract getHistory(): History;\r\n    abstract getLocation(): Location;\r\n    abstract getBaseHref(doc: Document): string | null;\r\n    abstract resetBaseElement(): void;\r\n    abstract getUserAgent(): string;\r\n    abstract setData(element: any, name: string, value: string): any;\r\n    abstract getComputedStyle(element: any): any;\r\n    abstract getData(element: any, name: string): string | null;\r\n    abstract supportsWebAnimation(): boolean;\r\n    abstract performanceNow(): number;\r\n    abstract getAnimationPrefix(): string;\r\n    abstract getTransitionEnd(): string;\r\n    abstract supportsAnimation(): boolean;\r\n    abstract supportsCookies(): boolean;\r\n    abstract getCookie(name: string): string | null;\r\n    abstract setCookie(name: string, value: string): any;\r\n}\r\n\r\nexport declare class ɵDomEventsPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\r\n    private ngZone;\r\n    constructor(doc: any, ngZone: NgZone, platformId: {} | null);\r\n    private patchEvent;\r\n    supports(eventName: string): boolean;\r\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    removeEventListener(target: any, eventName: string, callback: Function): void;\r\n}\r\n\r\nexport declare class ɵDomRendererFactory2 implements RendererFactory2 {\r\n    private eventManager;\r\n    private sharedStylesHost;\r\n    private appId;\r\n    private rendererByCompId;\r\n    private defaultRenderer;\r\n    constructor(eventManager: EventManager, sharedStylesHost: ɵDomSharedStylesHost, appId: string);\r\n    createRenderer(element: any, type: RendererType2 | null): Renderer2;\r\n    begin(): void;\r\n    end(): void;\r\n}\r\n\r\nexport declare class ɵDomSanitizerImpl extends DomSanitizer {\r\n    private _doc;\r\n    constructor(_doc: any);\r\n    sanitize(ctx: SecurityContext, value: SafeValue | string | null): string | null;\r\n    private checkNotSafeValue;\r\n    bypassSecurityTrustHtml(value: string): SafeHtml;\r\n    bypassSecurityTrustStyle(value: string): SafeStyle;\r\n    bypassSecurityTrustScript(value: string): SafeScript;\r\n    bypassSecurityTrustUrl(value: string): SafeUrl;\r\n    bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\r\n}\r\n\r\nexport declare class ɵDomSharedStylesHost extends ɵSharedStylesHost implements OnDestroy {\r\n    private _doc;\r\n    private _hostNodes;\r\n    private _styleNodes;\r\n    constructor(_doc: any);\r\n    private _addStylesToHost;\r\n    addHost(hostNode: Node): void;\r\n    removeHost(hostNode: Node): void;\r\n    onStylesAdded(additions: Set<string>): void;\r\n    ngOnDestroy(): void;\r\n}\r\n\r\nexport declare const ɵELEMENT_PROBE_PROVIDERS: Provider[];\r\n\r\n/**\r\n * In Ivy, we don't support NgProbe because we have our own set of testing utilities\r\n * with more robust functionality.\r\n *\r\n * We shouldn't bring in NgProbe because it prevents DebugNode and friends from\r\n * tree-shaking properly.\r\n */\r\nexport declare const ɵELEMENT_PROBE_PROVIDERS__POST_R3__: never[];\r\n\r\n\r\nexport declare function ɵescapeHtml(text: string): string;\r\n\r\nexport declare function ɵflattenStyles(compId: string, styles: Array<any | any[]>, target: string[]): string[];\r\n\r\nexport declare function ɵgetDOM(): ɵDomAdapter;\r\n\r\nexport declare class ɵHammerGesturesPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\r\n    private _config;\r\n    private console;\r\n    private loader?;\r\n    constructor(doc: any, _config: HammerGestureConfig, console: ɵConsole, loader?: HammerLoader | null | undefined);\r\n    supports(eventName: string): boolean;\r\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    isCustomEvent(eventName: string): boolean;\r\n}\r\n\r\nexport declare function ɵinitDomAdapter(): void;\r\n\r\nexport declare const ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[];\r\n\r\n/**\r\n * @publicApi\r\n * A browser plug-in that provides support for handling of key events in Angular.\r\n */\r\nexport declare class ɵKeyEventsPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\r\n    /**\r\n     * Initializes an instance of the browser plug-in.\r\n     * @param doc The document in which key events will be detected.\r\n     */\r\n    constructor(doc: any);\r\n    /**\r\n      * Reports whether a named key event is supported.\r\n      * @param eventName The event name to query.\r\n      * @return True if the named key event is supported.\r\n     */\r\n    supports(eventName: string): boolean;\r\n    /**\r\n     * Registers a handler for a specific element and key event.\r\n     * @param element The HTML element to receive event notifications.\r\n     * @param eventName The name of the key event to listen for.\r\n     * @param handler A function to call when the notification occurs. Receives the\r\n     * event object as an argument.\r\n     * @returns The key event that was registered.\r\n    */\r\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    static parseEventName(eventName: string): {\r\n        [key: string]: string;\r\n    } | null;\r\n    static getEventFullKey(event: KeyboardEvent): string;\r\n    /**\r\n     * Configures a handler callback for a key event.\r\n     * @param fullKey The event name that combines all simultaneous keystrokes.\r\n     * @param handler The function that responds to the key event.\r\n     * @param zone The zone in which the event occurred.\r\n     * @returns A callback function.\r\n     */\r\n    static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function;\r\n}\r\n\r\nexport declare const ɵNAMESPACE_URIS: {\r\n    [ns: string]: string;\r\n};\r\n\r\nexport declare function ɵsetRootDomAdapter(adapter: ɵDomAdapter): void;\r\n\r\nexport declare class ɵSharedStylesHost {\r\n    addStyles(styles: string[]): void;\r\n    onStylesAdded(additions: Set<string>): void;\r\n    getAllStyles(): string[];\r\n}\r\n\r\nexport declare function ɵshimContentAttribute(componentShortId: string): string;\r\n\r\nexport declare function ɵshimHostAttribute(componentShortId: string): string;\r\n\r\n/**\r\n * An id that identifies a particular application being bootstrapped, that should\r\n * match across the client/server boundary.\r\n */\r\nexport declare const ɵTRANSITION_ID: InjectionToken<unknown>;\r\n\r\nexport { }\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;;;;;;;;;;;AAaA;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAm}