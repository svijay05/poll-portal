{"version":3,"sources":["ng://primeng/defer/defer.ts"],"names":["DeferredLoader","el","renderer","viewContainer","this","onLoad","EventEmitter","prototype","ngAfterViewInit","_this","shouldLoad","load","isLoaded","documentScrollListener","listen","rect","nativeElement","getBoundingClientRect","document","documentElement","clientHeight","top","view","createEmbeddedView","template","emit","ngOnDestroy","ElementRef","Renderer2","ViewContainerRef","__decorate","Output","ContentChild","TemplateRef","static","Directive","selector","DeferModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"ssBAAAA,EAAA,WAiBI,SAAAA,EAAmBC,EAAuBC,EAA4BC,GAAnDC,KAAAH,GAAAA,EAAuBG,KAAAF,SAAAA,EAA4BE,KAAAD,cAAAA,EAR5DC,KAAAC,OAA4B,IAAIC,EAAAA,aAuD9C,OA7CIN,EAAAO,UAAAC,gBAAA,WAAA,IAAAC,EAAAL,KACQA,KAAKM,cACLN,KAAKO,OAGJP,KAAKQ,aACNR,KAAKS,uBAAyBT,KAAKF,SAASY,OAAO,SAAU,UAAU,WAC/DL,EAAKC,eACLD,EAAKE,OACLF,EAAKI,yBACLJ,EAAKI,uBAAyB,WAM9Cb,EAAAO,UAAAG,WAAA,WACI,GAAIN,KAAKQ,WACL,OAAO,EAGP,IAAIG,EAAOX,KAAKH,GAAGe,cAAcC,wBAIjC,OAHiBC,SAASC,gBACCC,cAENL,EAAKM,KAIlCrB,EAAAO,UAAAI,KAAA,WACIP,KAAKkB,KAAOlB,KAAKD,cAAcoB,mBAAmBnB,KAAKoB,UACvDpB,KAAKC,OAAOoB,QAGhBzB,EAAAO,UAAAK,SAAA,WACI,OAAoB,MAAbR,KAAKkB,MAGhBtB,EAAAO,UAAAmB,YAAA,WACItB,KAAKkB,KAAO,KAERlB,KAAKS,wBACLT,KAAKS,mEA5CUc,EAAAA,kBAA6BC,EAAAA,iBAAiCC,EAAAA,oBAR3EC,EAAA,CAATC,EAAAA,uCAE4CD,EAAA,CAA5CE,EAAAA,aAAaC,EAAAA,YAAa,CAAEC,QAAQ,oCAJ5BlC,EAAc8B,EAAA,CAH1BK,EAAAA,UAAU,CACPC,SAAU,cAEDpC,GAPb,gBAuEA,SAAAqC,KAA2B,OAAdA,EAAWP,EAAA,CALvBQ,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACzC,GACV0C,aAAc,CAAC1C,MAENqC","sourcesContent":["import {NgModule,Directive,ElementRef,AfterViewInit,OnDestroy,TemplateRef,EmbeddedViewRef,\n        ViewContainerRef,Renderer2,EventEmitter,Output,ContentChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n@Directive({\n    selector: '[pDefer]'\n})\nexport class DeferredLoader implements AfterViewInit,OnDestroy {\n        \n    @Output() onLoad: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChild(TemplateRef, { static: true }) template: TemplateRef<any>;\n        \n    documentScrollListener: Function;\n    \n    view: EmbeddedViewRef<any>;\n            \n    constructor(public el: ElementRef, public renderer: Renderer2, public viewContainer: ViewContainerRef) {}\n    \n    ngAfterViewInit() {\n        if (this.shouldLoad()) {\n            this.load();\n        }\n        \n        if (!this.isLoaded()) {\n            this.documentScrollListener = this.renderer.listen('window', 'scroll', () => {\n                if (this.shouldLoad()) {\n                    this.load();\n                    this.documentScrollListener();\n                    this.documentScrollListener = null;\n                }\n            });\n        }\n    }\n    \n    shouldLoad(): boolean {\n        if (this.isLoaded()) {\n            return false;\n        }\n        else {\n            let rect = this.el.nativeElement.getBoundingClientRect();\n            let docElement = document.documentElement;\n            let winHeight = docElement.clientHeight;\n            \n            return (winHeight >= rect.top);\n        }\n    }\n    \n    load(): void { \n        this.view = this.viewContainer.createEmbeddedView(this.template);\n        this.onLoad.emit();\n    }\n    \n    isLoaded() {\n        return this.view != null;\n    }\n            \n    ngOnDestroy() {\n        this.view = null;\n        \n        if (this.documentScrollListener) {\n            this.documentScrollListener();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [DeferredLoader],\n    declarations: [DeferredLoader]\n})\nexport class DeferModule { }"]}