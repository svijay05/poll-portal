{"version":3,"sources":["ng://primeng/dropdown/dropdown.ts"],"names":["DROPDOWN_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Dropdown","multi","DropdownItem","this","onClick","EventEmitter","prototype","onOptionClick","event","emit","originalEvent","option","__decorate","Input","Output","Component","selector","template","el","renderer","cd","zone","scrollHeight","filterBy","resetFilterOnHide","dropdownIcon","autoDisplayFirst","emptyFilterMessage","autoZIndex","baseZIndex","showTransitionOptions","hideTransitionOptions","filterMatchMode","tooltip","tooltipPosition","tooltipPositionStyle","onChange","onFocus","onBlur","onShow","onHide","onModelChange","onModelTouched","viewPortOffsetTop","Object","defineProperty","_disabled","focused","destroyed","detectChanges","ngAfterContentInit","_this","templates","forEach","item","getType","itemTemplate","selectedItemTemplate","groupTemplate","ngOnInit","optionsToDisplay","options","updateSelectedOption","_options","val","opts","optionLabel","ObjectUtils","generateSelectItems","value","optionsChanged","filterValue","length","activateFilter","ngAfterViewInit","editable","updateEditableLabel","selectedOption","label","editableInputViewChild","nativeElement","onItemClick","itemClick","disabled","selectItem","focusViewChild","focus","setTimeout","hide","filled","virtualScroll","viewPort","measureScrollOffset","ngAfterViewChecked","overlayVisible","updateVirtualScrollSelectedIndex","runOutsideAngular","alignOverlay","selectedOptionUpdated","itemsWrapper","range","getRenderedRange","start","virtualScrollSelectedIndex","end","scrollToIndex","DomHandler","findSingle","overlay","scrollInView","writeValue","filter","resetFilter","updateFilledState","markForCheck","filterViewChild","findOption","placeholder","registerOnChange","fn","registerOnTouched","setDisabledState","onMouseclick","readonly","selfClick","clearClick","hasClass","target","show","onEditableInputClick","bindDocumentClickListener","onEditableInputFocus","onEditableInputChange","onOverlayAnimationStart","toState","element","itemsWrapperSelector","appendOverlay","style","zIndex","String","zindex","bindDocumentResizeListener","selectedListItem","onOverlayHide","scrollToSelectedVirtualScrollElement","virtualAutoScrolled","scrollToOffset","resetOffset","findOptionIndex","appendTo","document","body","appendChild","minWidth","getWidth","containerViewChild","restoreOverlayAppend","absolutePosition","relativePosition","onInputFocus","onInputBlur","findPrevEnabledOption","index","prevEnabledOption","i","findNextEnabledOption","nextEnabledOption","onKeydown","search","which","altKey","group","selectedItemIndex","findOptionGroupIndex","nextItemIndex","itemIndex","groupIndex","items","preventDefault","prevItemIndex","prevGroup","searchTimeout","clearTimeout","newOption","char","key","previousSearchChar","currentSearchChar","searchValue","searchIndex","searchOptionWithinGroup","searchOption","searchOptionInRange","opt","toLowerCase","startsWith","j","equals","dataKey","inGroup","opts_1","__values","opts_1_1","next","done","optgroup","onFilter","inputValue","searchFields","split","filteredGroups","_b","_c","filteredSubOptions","FilterUtils","push","applyFocus","documentClickListener","listen","unbindDocumentClickListener","clearClickState","documentResizeListener","onWindowResize","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","isAndroid","clear","ngOnDestroy","ElementRef","Renderer2","ChangeDetectorRef","NgZone","ViewChild","static","CdkVirtualScrollViewport","ContentChildren","PrimeTemplate","animations","trigger","state","transform","opacity","transition","animate","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","providers","DropdownModule","NgModule","imports","CommonModule","SharedModule","ScrollingModule","TooltipModule","exports","declarations"],"mappings":"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","sourcesContent":["import {ScrollingModule, CdkVirtualScrollViewport} from '@angular/cdk/scrolling';\nimport {NgModule,Component,ElementRef,OnInit,AfterViewInit,AfterContentInit,AfterViewChecked,OnDestroy,Input,Output,Renderer2,EventEmitter,ContentChildren,\n        QueryList,ViewChild,TemplateRef,forwardRef,ChangeDetectorRef,NgZone,ViewRef} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SelectItem} from 'primeng/api';\nimport {SharedModule,PrimeTemplate} from 'primeng/api';\nimport {DomHandler} from 'primeng/dom';\nimport {ObjectUtils} from 'primeng/utils';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport { FilterUtils } from 'primeng/utils';\nimport {TooltipModule} from 'primeng/tooltip';\n\nexport const DROPDOWN_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Dropdown),\n  multi: true\n};\n\n@Component({\n    selector: 'p-dropdownItem',\n    template: `\n        <li (click)=\"onOptionClick($event)\" role=\"option\"\n            [attr.aria-label]=\"option.label\" [attr.aria-selected]=\"selected\"\n            [ngStyle]=\"{'height': itemSize + 'px'}\"\n            [ngClass]=\"{'ui-dropdown-item ui-corner-all':true,\n                                                'ui-state-highlight': selected,\n                                                'ui-state-disabled':(option.disabled),\n                                                'ui-dropdown-item-empty': !option.label||option.label.length === 0}\">\n            <span *ngIf=\"!template\">{{option.label||'empty'}}</span>\n            <ng-container *ngTemplateOutlet=\"template; context: {$implicit: option}\"></ng-container>\n        </li>\n    `\n})\nexport class DropdownItem {\n\n    @Input() option: SelectItem;\n\n    @Input() selected: boolean;\n\n    @Input() disabled: boolean;\n\n    @Input() visible: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() template: TemplateRef<any>;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    onOptionClick(event: Event) {\n        this.onClick.emit({\n            originalEvent: event,\n            option: this.option\n        });\n    }\n}\n\n@Component({\n    selector: 'p-dropdown',\n    template: `\n         <div #container [ngClass]=\"{'ui-dropdown ui-widget ui-state-default ui-corner-all ui-helper-clearfix':true,\n            'ui-state-disabled':disabled, 'ui-dropdown-open':overlayVisible, 'ui-state-focus':focused, 'ui-dropdown-clearable': showClear && !disabled}\"\n            (click)=\"onMouseclick($event)\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #in [attr.id]=\"inputId\" type=\"text\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" readonly (focus)=\"onInputFocus($event)\" aria-haspopup=\"listbox\"\n                    aria-haspopup=\"listbox\" [attr.aria-expanded]=\"overlayVisible\" [attr.aria-labelledby]=\"ariaLabelledBy\" (blur)=\"onInputBlur($event)\" (keydown)=\"onKeydown($event, true)\" \n                    [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" [attr.autofocus]=\"autofocus\">\n            </div>\n            <div class=\"ui-helper-hidden-accessible ui-dropdown-hidden-select\">\n                <select [attr.required]=\"required\" [attr.name]=\"name\" tabindex=\"-1\" aria-hidden=\"true\">\n                    <option *ngIf=\"placeholder\" value=\"\">{{placeholder}}</option>\n                    <option *ngIf=\"selectedOption\" [value]=\"selectedOption.value\" [selected]=\"true\">{{selectedOption.label}}</option>\n                </select>\n            </div>\n            <div class=\"ui-dropdown-label-container\" [pTooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\" [positionStyle]=\"tooltipPositionStyle\" [tooltipStyleClass]=\"tooltipStyleClass\">\n                <label [ngClass]=\"{'ui-dropdown-label ui-inputtext ui-corner-all':true,'ui-dropdown-label-empty':(label == null || label.length === 0)}\" *ngIf=\"!editable && (label != null)\">\n                    <ng-container *ngIf=\"!selectedItemTemplate\">{{label||'empty'}}</ng-container>\n                    <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: {$implicit: selectedOption}\"></ng-container>\n                </label>\n                <label [ngClass]=\"{'ui-dropdown-label ui-inputtext ui-corner-all ui-placeholder':true,'ui-dropdown-label-empty': (placeholder == null || placeholder.length === 0)}\" *ngIf=\"!editable && (label == null)\">{{placeholder||'empty'}}</label>\n                <input #editableInput type=\"text\" [attr.maxlength]=\"maxlength\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" class=\"ui-dropdown-label ui-inputtext ui-corner-all\" *ngIf=\"editable\" [disabled]=\"disabled\" [attr.placeholder]=\"placeholder\"\n                    aria-haspopup=\"listbox\" [attr.aria-expanded]=\"overlayVisible\" (click)=\"onEditableInputClick($event)\" (input)=\"onEditableInputChange($event)\" (focus)=\"onEditableInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n                <i class=\"ui-dropdown-clear-icon pi pi-times\" (click)=\"clear($event)\" *ngIf=\"value != null && showClear && !disabled\"></i>\n            </div>\n            <div class=\"ui-dropdown-trigger ui-state-default ui-corner-right\" role=\"button\" aria-haspopup=\"listbox\" [attr.aria-expanded]=\"overlayVisible\">\n                <span class=\"ui-dropdown-trigger-icon ui-clickable\" [ngClass]=\"dropdownIcon\"></span>\n            </div>\n            <div *ngIf=\"overlayVisible\" [ngClass]=\"'ui-dropdown-panel  ui-widget ui-widget-content ui-corner-all ui-shadow'\" [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\">\n                <div *ngIf=\"filter\" class=\"ui-dropdown-filter-container\" (click)=\"$event.stopPropagation()\">\n                    <input #filter type=\"text\" autocomplete=\"off\" [value]=\"filterValue||''\" class=\"ui-dropdown-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceholder\"\n                    (keydown.enter)=\"$event.preventDefault()\" (keydown)=\"onKeydown($event, false)\" (input)=\"onFilter($event)\" [attr.aria-label]=\"ariaFilterLabel\">\n                    <span class=\"ui-dropdown-filter-icon pi pi-search\"></span>\n                </div>\n                <div class=\"ui-dropdown-items-wrapper\" [style.max-height]=\"virtualScroll ? 'auto' : (scrollHeight||'auto')\">\n                    <ul class=\"ui-dropdown-items ui-dropdown-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\" role=\"listbox\">\n                        <ng-container *ngIf=\"group\">\n                            <ng-template ngFor let-optgroup [ngForOf]=\"optionsToDisplay\">\n                                <li class=\"ui-dropdown-item-group\">\n                                    <span *ngIf=\"!groupTemplate\">{{optgroup.label||'empty'}}</span>\n                                    <ng-container *ngTemplateOutlet=\"groupTemplate; context: {$implicit: optgroup}\"></ng-container>\n                                </li>\n                                <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: optgroup.items, selectedOption: selectedOption}\"></ng-container>\n                            </ng-template>\n                        </ng-container>\n                        <ng-container *ngIf=\"!group\">\n                            <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: optionsToDisplay, selectedOption: selectedOption}\"></ng-container>\n                        </ng-container>\n                        <ng-template #itemslist let-options let-selectedOption=\"selectedOption\">\n\n                            <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                                <ng-template ngFor let-option let-i=\"index\" [ngForOf]=\"options\">\n                                    <p-dropdownItem [option]=\"option\" [selected]=\"selectedOption == option\" \n                                                    (onClick)=\"onItemClick($event)\"\n                                                    [template]=\"itemTemplate\"></p-dropdownItem>\n                                </ng-template>\n                            </ng-container>\n                            <ng-template #virtualScrollList>\n                                <cdk-virtual-scroll-viewport (scrolledIndexChange)=\"scrollToSelectedVirtualScrollElement()\" #viewport [ngStyle]=\"{'height': scrollHeight}\" [itemSize]=\"itemSize\" *ngIf=\"virtualScroll && optionsToDisplay && optionsToDisplay.length\">\n                                    <ng-container *cdkVirtualFor=\"let option of options; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd\">         \n                                        <p-dropdownItem [option]=\"option\" [selected]=\"selectedOption == option\"\n                                                                   (onClick)=\"onItemClick($event)\"\n                                                                   [template]=\"itemTemplate\"></p-dropdownItem>\n                                    </ng-container>\n                                </cdk-virtual-scroll-viewport>\n                            </ng-template>\n                        </ng-template>\n                        <li *ngIf=\"filter && (!optionsToDisplay || (optionsToDisplay && optionsToDisplay.length === 0))\" class=\"ui-dropdown-empty-message\">{{emptyFilterMessage}}</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            state('void', style({\n                transform: 'translateY(5%)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => visible', animate('{{showTransitionParams}}')),\n            transition('visible => void', animate('{{hideTransitionParams}}'))\n        ])\n    ],\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focused'\n    },\n    providers: [DROPDOWN_VALUE_ACCESSOR]\n})\nexport class Dropdown implements OnInit,AfterViewInit,AfterContentInit,AfterViewChecked,OnDestroy,ControlValueAccessor {\n\n    @Input() scrollHeight: string = '200px';\n\n    @Input() filter: boolean;\n    \n    @Input() name: string;\n\n    @Input() style: any;\n    \n    @Input() panelStyle: any;\n\n    @Input() styleClass: string;\n    \n    @Input() panelStyleClass: string;\n    \n    @Input() readonly: boolean;\n\n    @Input() required: boolean;\n    \n    @Input() editable: boolean;\n    \n    @Input() appendTo: any;\n\n    @Input() tabindex: number;\n    \n    @Input() placeholder: string;\n    \n    @Input() filterPlaceholder: string;\n\n    @Input() inputId: string;\n\n    @Input() selectId: string;\n    \n    @Input() dataKey: string;\n    \n    @Input() filterBy: string = 'label';\n    \n    @Input() autofocus: boolean;\n    \n    @Input() resetFilterOnHide: boolean = false;\n    \n    @Input() dropdownIcon: string = 'pi pi-chevron-down';\n    \n    @Input() optionLabel: string;\n\n    @Input() autoDisplayFirst: boolean = true;\n\n    @Input() group: boolean;\n\n    @Input() showClear: boolean;\n\n    @Input() emptyFilterMessage: string = 'No results found';\n\n    @Input() virtualScroll: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() showTransitionOptions: string = '225ms ease-out';\n\n    @Input() hideTransitionOptions: string = '195ms ease-in';\n\n    @Input() ariaFilterLabel: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() filterMatchMode: string = \"contains\";\n\n    @Input() maxlength: number;\n\n    @Input() tooltip: string = '';\n\n    @Input() tooltipPosition: string = 'right';\n\n    @Input() tooltipPositionStyle: string = 'absolute';\n\n    @Input() tooltipStyleClass: string;\n    \n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n    \n    @ViewChild('container', { static: true }) containerViewChild: ElementRef;\n    \n    @ViewChild('filter', { static: false }) filterViewChild: ElementRef;\n    \n    @ViewChild('in', { static: true }) focusViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport, {static: false }) viewPort: CdkVirtualScrollViewport;\n\n    @ViewChild('editableInput', { static: false }) editableInputViewChild: ElementRef;\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    private _disabled: boolean;\n\n    @Input() get disabled(): boolean {\n        return this._disabled;\n    };\n\n    set disabled(_disabled: boolean) {\n        if(_disabled)\n            this.focused = false;\n        \n        this._disabled = _disabled;\n        if(!(this.cd as ViewRef).destroyed) {\n            this.cd.detectChanges();\n        }\n    }\n\n    overlay: HTMLDivElement;\n\n    itemsWrapper: HTMLDivElement;\n    \n    itemTemplate: TemplateRef<any>;\n\n    groupTemplate: TemplateRef<any>;\n\n    selectedItemTemplate: TemplateRef<any>;\n    \n    selectedOption: any;\n    \n    _options: any[];\n    \n    value: any;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n\n    optionsToDisplay: any[];\n    \n    hover: boolean;\n    \n    focused: boolean;\n\n    filled: boolean;\n    \n    overlayVisible: boolean;\n    \n    documentClickListener: any;\n    \n    optionsChanged: boolean;\n    \n    panel: HTMLDivElement;\n    \n    dimensionsUpdated: boolean;\n    \n    selfClick: boolean;\n    \n    itemClick: boolean;\n\n    clearClick: boolean;\n    \n    hoveredItem: any;\n    \n    selectedOptionUpdated: boolean;\n    \n    filterValue: string;\n\n    searchValue: string;\n\n    searchIndex: number;\n    \n    searchTimeout: any;\n\n    previousSearchChar: string;\n\n    currentSearchChar: string;\n\n    documentResizeListener: any;\n\n    virtualAutoScrolled: boolean;\n\n    virtualScrollSelectedIndex: number;\n\n    viewPortOffsetTop: number = 0;\n    \n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef, public zone: NgZone) {}\n    \n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                case 'selectedItem':\n                    this.selectedItemTemplate = item.template;\n                break;\n\n                case 'group':\n                    this.groupTemplate = item.template;\n                break;\n                \n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n    \n    ngOnInit() {\n        this.optionsToDisplay = this.options;\n        this.updateSelectedOption(null);\n    }\n    \n    @Input() get options(): any[] {\n        return this._options;\n    }\n\n    set options(val: any[]) {\n        let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n        this._options = opts;\n        this.optionsToDisplay = this._options;\n        this.updateSelectedOption(this.value);\n        this.optionsChanged = true;\n        \n        if (this.filterValue && this.filterValue.length) {\n            this.activateFilter();\n        }\n    }\n    \n    ngAfterViewInit()Â {\n        if (this.editable) {\n            this.updateEditableLabel();\n        }\n    }\n    \n    get label(): string {\n        return (this.selectedOption ? this.selectedOption.label : null);\n    }\n    \n    updateEditableLabel(): void {\n        if (this.editableInputViewChild && this.editableInputViewChild.nativeElement) {\n            this.editableInputViewChild.nativeElement.value = (this.selectedOption ? this.selectedOption.label : this.value||'');\n        }\n    }\n\n    onItemClick(event) {\n        const option = event.option;\n        this.itemClick = true;\n\n        if (!option.disabled) {\n            this.selectItem(event, option);\n            this.focusViewChild.nativeElement.focus();\n        }\n\n        setTimeout(() => {\n            this.hide(event);\n        }, 150);\n    }\n\n    selectItem(event, option) {\n        if (this.selectedOption != option) {\n            this.selectedOption = option;\n            this.value = option.value;\n            this.filled = true;\n\n            this.onModelChange(this.value);\n            this.updateEditableLabel();\n            this.onChange.emit({\n                originalEvent: event.originalEvent,\n                value: this.value\n            });\n\n            if (this.virtualScroll) {\n                setTimeout(() => {\n                    this.viewPortOffsetTop = this.viewPort.measureScrollOffset();\n                }, 1);\n            }\n        }\n    }\n    \n    ngAfterViewChecked() {        \n        if (this.optionsChanged && this.overlayVisible) {\n            this.optionsChanged = false;\n\n            if (this.virtualScroll) {\n                this.updateVirtualScrollSelectedIndex(true);\n            }\n            \n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignOverlay();\n                }, 1);\n            });\n        }\n        \n        if (this.selectedOptionUpdated && this.itemsWrapper) {\n            if (this.virtualScroll && this.viewPort) {\n                let range = this.viewPort.getRenderedRange();\n                this.updateVirtualScrollSelectedIndex(false);\n\n                if (range.start > this.virtualScrollSelectedIndex || range.end < this.virtualScrollSelectedIndex) {\n                    this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n                }\n            }\n            \n            let selectedItem = DomHandler.findSingle(this.overlay, 'li.ui-state-highlight');\n            if (selectedItem) {\n                DomHandler.scrollInView(this.itemsWrapper, DomHandler.findSingle(this.overlay, 'li.ui-state-highlight'));\n            }\n            this.selectedOptionUpdated = false;\n        }\n    }\n    \n    writeValue(value: any): void {\n        if (this.filter) {\n            this.resetFilter();\n        }\n        \n        this.value = value;\n        this.updateSelectedOption(value);\n        this.updateEditableLabel();\n        this.updateFilledState();\n        this.cd.markForCheck();\n    }\n    \n    resetFilter(): void {\n        this.filterValue = null;\n        \n        if (this.filterViewChild && this.filterViewChild.nativeElement) {\n            this.filterViewChild.nativeElement.value = '';\n        }\n        \n        this.optionsToDisplay = this.options;\n    }\n    \n    updateSelectedOption(val: any): void {\n        this.selectedOption = this.findOption(val, this.optionsToDisplay);\n        if (this.autoDisplayFirst && !this.placeholder && !this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length && !this.editable) {\n            this.selectedOption = this.optionsToDisplay[0];\n        }\n        this.selectedOptionUpdated = true;\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    onMouseclick(event) {\n        if (this.disabled||this.readonly) {\n            return;\n        }\n\n        this.onClick.emit(event);\n        \n        this.selfClick = true;\n        this.clearClick = DomHandler.hasClass(event.target, 'ui-dropdown-clear-icon');\n        \n        if (!this.itemClick && !this.clearClick) {\n            this.focusViewChild.nativeElement.focus();\n            \n            if (this.overlayVisible)\n                this.hide(event);\n            else\n                this.show();\n\n            this.cd.detectChanges();\n        }\n    }\n    \n    onEditableInputClick(event) {\n        this.itemClick = true;\n        this.bindDocumentClickListener();\n    }\n    \n    onEditableInputFocus(event) {\n        this.focused = true;\n        this.hide(event);\n        this.onFocus.emit(event);\n    }\n    \n    onEditableInputChange(event) {\n        this.value = event.target.value;\n        this.updateSelectedOption(this.value);\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n    }\n    \n    show() {\n        this.overlayVisible = true;\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                let itemsWrapperSelector = this.virtualScroll ? '.cdk-virtual-scroll-viewport' : '.ui-dropdown-items-wrapper';\n                this.itemsWrapper = DomHandler.findSingle(this.overlay, itemsWrapperSelector);\n                this.appendOverlay();\n                if (this.autoZIndex) {\n                    this.overlay.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                this.alignOverlay();\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n\n                if (this.options && this.options.length) {\n                    if(!this.virtualScroll) {\n                        let selectedListItem = DomHandler.findSingle(this.itemsWrapper, '.ui-dropdown-item.ui-state-highlight');\n                        if (selectedListItem) {\n                            DomHandler.scrollInView(this.itemsWrapper, selectedListItem);\n                        }\n                    }\n                }\n\n                if (this.filterViewChild && this.filterViewChild.nativeElement) {\n                    this.filterViewChild.nativeElement.focus();\n                }\n\n                this.onShow.emit(event);\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    scrollToSelectedVirtualScrollElement() {\n        if (!this.virtualAutoScrolled) {\n            if (this.viewPortOffsetTop) {\n                this.viewPort.scrollToOffset(this.viewPortOffsetTop);\n            }\n            else if (this.virtualScrollSelectedIndex > -1) {\n                this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n            }\n        }\n\n        this.virtualAutoScrolled = true;\n    }\n\n    updateVirtualScrollSelectedIndex(resetOffset) {\n        if (this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length) {\n            if (resetOffset) {\n                this.viewPortOffsetTop = 0;\n            }\n\n            this.virtualScrollSelectedIndex = this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay);\n        }\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                DomHandler.appendChild(this.overlay, this.appendTo);\n\n            this.overlay.style.minWidth = DomHandler.getWidth(this.containerViewChild.nativeElement) + 'px';\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.overlay && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlay);\n        }\n    }\n    \n    hide(event) {\n        this.overlayVisible = false;\n\n        if (this.filter && this.resetFilterOnHide) {\n            this.resetFilter();\n        }\n\n        if(this.virtualScroll) {\n            this.virtualAutoScrolled = false;\n        }\n\n        this.cd.markForCheck();\n        this.onHide.emit(event);\n    }\n    \n    alignOverlay() {\n        if (this.overlay) {\n            if (this.appendTo)\n                DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);\n            else\n                DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n        }        \n    }\n    \n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n    \n    onInputBlur(event) {\n        this.focused = false;\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n\n    findPrevEnabledOption(index) {\n        let prevEnabledOption;\n\n        if (this.optionsToDisplay && this.optionsToDisplay.length) {\n            for (let i = (index - 1); 0 <= i; i--) {\n                let option = this.optionsToDisplay[i];\n                if (option.disabled) {\n                    continue;\n                }\n                else {\n                    prevEnabledOption = option;\n                    break;\n                }\n            }\n\n            if (!prevEnabledOption) {\n                for (let i = this.optionsToDisplay.length - 1; i >= index ; i--) {\n                    let option = this.optionsToDisplay[i];\n                    if (option.disabled) {\n                        continue;\n                    }\n                    else {\n                        prevEnabledOption = option;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return prevEnabledOption;\n    }\n\n    findNextEnabledOption(index) {\n        let nextEnabledOption;\n\n        if (this.optionsToDisplay && this.optionsToDisplay.length) {\n            for (let i = (index + 1); index < (this.optionsToDisplay.length - 1); i++) {\n                let option = this.optionsToDisplay[i];\n                if (option.disabled) {\n                    continue;\n                }\n                else {\n                    nextEnabledOption = option;\n                    break;\n                }\n            }\n\n            if (!nextEnabledOption) {\n                for (let i = 0; i < index; i++) {\n                    let option = this.optionsToDisplay[i];\n                    if (option.disabled) {\n                        continue;\n                    }\n                    else {\n                        nextEnabledOption = option;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return nextEnabledOption;\n    }\n    \n    onKeydown(event: KeyboardEvent, search: boolean) {\n        if (this.readonly || !this.optionsToDisplay || this.optionsToDisplay.length === null) {\n            return;\n        }\n\n        switch(event.which) {\n            //down\n            case 40:\n                if (!this.overlayVisible && event.altKey) {\n                    this.show();\n                }\n                else {\n                    if (this.group) {\n                        let selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                        \n                        if (selectedItemIndex !== -1) {\n                            let nextItemIndex = selectedItemIndex.itemIndex + 1;\n                            if (nextItemIndex < (this.optionsToDisplay[selectedItemIndex.groupIndex].items.length)) {\n                                this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex].items[nextItemIndex]);\n                                this.selectedOptionUpdated = true;\n                            }\n                            else if (this.optionsToDisplay[selectedItemIndex.groupIndex + 1]) {\n                                this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex + 1].items[0]);\n                                this.selectedOptionUpdated = true;\n                            }\n                        }\n                        else {\n                            this.selectItem(event, this.optionsToDisplay[0].items[0]);\n                        }\n                    }\n                    else {\n                        let selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                        let nextEnabledOption = this.findNextEnabledOption(selectedItemIndex);\n                        if (nextEnabledOption) {\n                            this.selectItem(event, nextEnabledOption);\n                            this.selectedOptionUpdated = true;\n                        }\n                    }\n                }\n                \n                event.preventDefault();\n                \n            break;\n            \n            //up\n            case 38:\n                if (this.group) {\n                    let selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                    if (selectedItemIndex !== -1) {\n                        let prevItemIndex = selectedItemIndex.itemIndex - 1;\n                        if (prevItemIndex >= 0) {\n                            this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex].items[prevItemIndex]);\n                            this.selectedOptionUpdated = true;\n                        }\n                        else if (prevItemIndex < 0) {\n                            let prevGroup = this.optionsToDisplay[selectedItemIndex.groupIndex - 1];\n                            if (prevGroup) {\n                                this.selectItem(event, prevGroup.items[prevGroup.items.length - 1]);\n                                this.selectedOptionUpdated = true;\n                            }\n                        }\n                    }\n                }\n                else {\n                    let selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                    let prevEnabledOption = this.findPrevEnabledOption(selectedItemIndex);\n                    if (prevEnabledOption) {\n                        this.selectItem(event, prevEnabledOption);\n                        this.selectedOptionUpdated = true;\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //space\n            case 32:\n            case 32:\n                if (!this.overlayVisible){\n                    this.show();\n                    event.preventDefault();\n                }\n            break;\n            \n            //enter\n            case 13:\n                if (!this.filter || (this.optionsToDisplay && this.optionsToDisplay.length > 0)) {\n                    this.hide(event);\n                }\n                \n                event.preventDefault();\n            break;\n            \n            //escape and tab\n            case 27:\n            case 9:\n                this.hide(event);\n            break;\n\n            //search item based on keyboard input\n            default:\n                if (search) {\n                    this.search(event);\n                }\n            break;\n        }\n    }\n\n    search(event) {\n        if (this.searchTimeout) {\n            clearTimeout(this.searchTimeout);\n        }\n\n        const char = event.key;\n        this.previousSearchChar = this.currentSearchChar;\n        this.currentSearchChar = char;\n\n        if (this.previousSearchChar === this.currentSearchChar) \n            this.searchValue = this.currentSearchChar;\n        else\n            this.searchValue = this.searchValue ? this.searchValue + char : char;\n\n        let newOption;\n        if (this.group) {\n            let searchIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : {groupIndex: 0, itemIndex: 0};\n            newOption = this.searchOptionWithinGroup(searchIndex);\n        }\n        else {\n            let searchIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n            newOption = this.searchOption(++searchIndex);\n        }\n        \n        if (newOption) {\n            this.selectItem(event, newOption);\n            this.selectedOptionUpdated = true;\n        }\n\n        this.searchTimeout = setTimeout(() => {\n            this.searchValue = null;\n        }, 250);\n    }\n\n    searchOption(index) {\n        let option;\n\n        if (this.searchValue) {\n            option = this.searchOptionInRange(index, this.optionsToDisplay.length);\n\n            if (!option) {\n                option = this.searchOptionInRange(0, index);\n            }\n        }\n\n        return option;\n    }\n\n    searchOptionInRange(start, end) {\n        for (let i = start; i < end; i++) {\n            let opt = this.optionsToDisplay[i];\n            if (opt.label.toLowerCase().startsWith(this.searchValue.toLowerCase())) {\n                return opt;\n            }\n        }\n\n        return null;\n    }\n\n    searchOptionWithinGroup(index) {\n        let option;\n\n        if (this.searchValue) {\n            for (let i = index.groupIndex; i < this.optionsToDisplay.length; i++) {\n                for (let j = (index.groupIndex === i) ? (index.itemIndex + 1) : 0; j < this.optionsToDisplay[i].items.length; j++) {\n                    let opt = this.optionsToDisplay[i].items[j];\n                    if (opt.label.toLowerCase().startsWith(this.searchValue.toLowerCase())) {\n                        return opt;\n                    }\n                }\n            }\n\n            if (!option) {\n                for (let i = 0; i <= index.groupIndex; i++) {\n                    for (let j = 0; j < ((index.groupIndex === i) ? index.itemIndex : this.optionsToDisplay[i].items.length); j++) {\n                        let opt = this.optionsToDisplay[i].items[j];\n                        if (opt.label.toLowerCase().startsWith(this.searchValue.toLowerCase())) {\n                            return opt;\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n   \n    findOptionIndex(val: any, opts: any[]): number {\n        let index: number = -1;\n        if (opts) {\n            for (let i = 0; i < opts.length; i++) {\n                if ((val == null && opts[i].value == null) ||Â ObjectUtils.equals(val, opts[i].value, this.dataKey)) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        \n        return index;\n    }\n\n    findOptionGroupIndex(val: any, opts: any[]): any {\n        let groupIndex, itemIndex;\n\n        if (opts) {\n            for (let i = 0; i < opts.length; i++) {\n                groupIndex = i;\n                itemIndex = this.findOptionIndex(val, opts[i].items);\n\n                if (itemIndex !== -1) {\n                    break;\n                }\n            }\n        }\n\n        if (itemIndex !== -1) {\n            return {groupIndex: groupIndex, itemIndex: itemIndex};\n        }\n        else {\n            return -1;\n        }\n    }\n    \n    findOption(val: any, opts: any[], inGroup?: boolean): SelectItem {\n        if (this.group && !inGroup) {\n            let opt: SelectItem;\n            if (opts && opts.length) {\n                for (let optgroup of opts) {\n                    opt = this.findOption(val, optgroup.items, true);\n                    if (opt) {\n                        break;\n                    }\n                }\n            }\n            return opt;\n        }\n        else {\n            let index: number = this.findOptionIndex(val, opts);\n            return (index != -1) ? opts[index] : null;\n        }\n    }\n    \n    onFilter(event): void {\n        let inputValue = event.target.value;\n        if (inputValue && inputValue.length) {\n            this.filterValue = inputValue;\n            this.activateFilter();\n        }\n        else {\n            this.filterValue = null;\n            this.optionsToDisplay = this.options;\n        }\n        \n        this.optionsChanged = true;\n    }\n    \n    activateFilter() {\n        let searchFields: string[] = this.filterBy.split(',');\n        \n        if (this.options && this.options.length) {\n            if (this.group) {\n                let filteredGroups = [];\n                for (let optgroup of this.options) {\n                    let filteredSubOptions = FilterUtils.filter(optgroup.items, searchFields, this.filterValue, this.filterMatchMode);\n                    if (filteredSubOptions && filteredSubOptions.length) {\n                        filteredGroups.push({\n                            label: optgroup.label,\n                            value: optgroup.value,\n                            items: filteredSubOptions\n                        });\n                    }\n                }\n\n                this.optionsToDisplay = filteredGroups;\n            }\n            else {\n                this.optionsToDisplay = FilterUtils.filter(this.options, searchFields, this.filterValue, this.filterMatchMode);\n            }\n\n            this.optionsChanged = true;\n        }\n    }\n    \n    applyFocus(): void {\n        if (this.editable)\n            DomHandler.findSingle(this.el.nativeElement, '.ui-dropdown-label.ui-inputtext').focus();\n        else\n            DomHandler.findSingle(this.el.nativeElement, 'input[readonly]').focus();\n    }\n\n    focus(): void {\n        this.applyFocus();\n    }\n    \n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', (event) => {\n                if (!this.selfClick && !this.itemClick) {\n                    this.hide(event);\n                    this.unbindDocumentClickListener();\n                }\n                \n                this.clearClickState();\n                this.cd.markForCheck();\n            });\n        }\n    }\n\n    clearClickState() {\n        this.selfClick = false;\n        this.itemClick = false;\n    }\n    \n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onWindowResize() {\n        if (!DomHandler.isAndroid()) {\n            this.hide(event);\n        }\n    }\n\n    updateFilledState() {\n        this.filled = (this.selectedOption != null);\n    }\n\n    clear(event: Event) {\n        this.clearClick = true;\n        this.value = null;\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n        this.updateSelectedOption(this.value);\n        this.updateEditableLabel();\n        this.updateFilledState();\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.overlay = null;\n        this.itemsWrapper = null;\n    }\n    \n    ngOnDestroy() {\n        this.restoreOverlayAppend();\n        this.onOverlayHide();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,SharedModule,ScrollingModule,TooltipModule],\n    exports: [Dropdown,SharedModule,ScrollingModule],\n    declarations: [Dropdown,DropdownItem]\n})\nexport class DropdownModule { }\n"]}