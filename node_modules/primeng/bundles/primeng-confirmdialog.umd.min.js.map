{"version":3,"sources":["ng://primeng/confirmdialog/confirmdialog.ts"],"names":["ConfirmDialog","el","renderer","confirmationService","zone","_this","this","acceptIcon","acceptLabel","acceptVisible","rejectIcon","rejectLabel","rejectVisible","closeOnEscape","blockScroll","closable","autoZIndex","baseZIndex","transitionOptions","focusTrap","subscription","requireConfirmation$","subscribe","confirmation","key","message","icon","header","accept","acceptEvent","EventEmitter","reject","rejectEvent","visible","Object","defineProperty","prototype","_visible","value","maskVisible","onAnimationStart","event","toState","container","element","wrapper","parentElement","contentContainer","DomHandler","findSingle","focus","appendContainer","moveOnTop","bindGlobalListeners","enableModality","onAnimationEnd","onOverlayHide","appendTo","document","body","appendChild","restoreAppend","nativeElement","addClass","disableModality","removeClass","close","emit","hide","preventDefault","style","zIndex","String","zindex","documentEscapeListener","listen","which","parseInt","focusableElements","getFocusableElements","length","activeElement","focusedIndex","indexOf","shiftKey","unbindGlobalListeners","ngOnDestroy","unsubscribe","ElementRef","Renderer2","ConfirmationService","NgZone","__decorate","Input","ContentChild","Footer","static","ViewChild","Component","selector","template","animations","trigger","state","transform","opacity","transition","animate","ConfirmDialogModule","NgModule","imports","CommonModule","ButtonModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnDestroy,Input,EventEmitter,Renderer2,ContentChild,NgZone,ViewChild} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {Footer,SharedModule} from 'primeng/api';\nimport {ButtonModule} from 'primeng/button';\nimport {Confirmation} from 'primeng/api';\nimport {ConfirmationService} from 'primeng/api';\nimport {Subscription}   from 'rxjs';\n\n@Component({\n    selector: 'p-confirmDialog',\n    template: `\n        <div class=\"ui-dialog-wrapper\" [ngClass]=\"{'ui-widget-overlay ui-dialog-mask': true, 'ui-dialog-mask-scrollblocker':blockScroll}\" *ngIf=\"maskVisible\">\n            <div [ngClass]=\"{'ui-dialog ui-confirmdialog ui-widget ui-widget-content ui-corner-all ui-shadow':true,'ui-dialog-rtl':rtl}\" [ngStyle]=\"style\" [class]=\"styleClass\" (mousedown)=\"moveOnTop()\"\n                [@animation]=\"{value: 'visible', params: {transitionParams: transitionOptions}}\" (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\" *ngIf=\"visible\">\n                <div class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\">\n                    <span class=\"ui-dialog-title\" *ngIf=\"header\">{{header}}</span>\n                    <div class=\"ui-dialog-titlebar-icons\">\n                        <a *ngIf=\"closable\" [ngClass]=\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all':true}\" tabindex=\"0\" role=\"button\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\">\n                            <span class=\"pi pi-times\"></span>\n                        </a>\n                    </div>\n                </div>\n                <div #content class=\"ui-dialog-content ui-widget-content\">\n                    <i [ngClass]=\"'ui-confirmdialog-icon'\" [class]=\"icon\" *ngIf=\"icon\"></i>\n                    <span class=\"ui-confirmdialog-message\" [innerHTML]=\"message\"></span>\n                </div>\n                <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"footer\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                </div>\n                <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"!footer\">\n                    <button type=\"button\" pButton [icon]=\"acceptIcon\" [label]=\"acceptLabel\" (click)=\"accept()\" [class]=\"acceptButtonStyleClass\" *ngIf=\"acceptVisible\"></button>\n                    <button type=\"button\" pButton [icon]=\"rejectIcon\" [label]=\"rejectLabel\" (click)=\"reject()\" [class]=\"rejectButtonStyleClass\" *ngIf=\"rejectVisible\"></button>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('animation', [\n            state('void', style({\n                transform: 'scale(0.7)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'none',\n                opacity: 1\n            })),\n            transition('* => *', animate('{{transitionParams}}'))\n        ])\n    ]\n})\nexport class ConfirmDialog implements OnDestroy {\n\n    @Input() header: string;\n    \n    @Input() icon: string;\n    \n    @Input() message: string;\n\n    @Input() style: any;\n    \n    @Input() styleClass: string;\n    \n    @Input() acceptIcon: string = 'pi pi-check';\n    \n    @Input() acceptLabel: string = 'Yes';\n    \n    @Input() acceptVisible: boolean = true;\n\n    @Input() rejectIcon: string = 'pi pi-times';\n    \n    @Input() rejectLabel: string = 'No';\n    \n    @Input() rejectVisible: boolean = true;\n    \n    @Input() acceptButtonStyleClass: string;\n    \n    @Input() rejectButtonStyleClass: string;\n\n    @Input() closeOnEscape: boolean = true;\n\n    @Input() blockScroll: boolean = true;\n\n    @Input() rtl: boolean;\n\n    @Input() closable: boolean = true;\n    \n    @Input() appendTo: any;\n    \n    @Input() key: string;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n    \n    @Input() transitionOptions: string = '150ms cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() focusTrap: boolean = true;\n\n    @Input() get visible(): any {\n        return this._visible;\n    }\n    set visible(value:any) {\n        this._visible = value;\n        \n        if (this._visible && !this.maskVisible) {\n            this.maskVisible = true;\n        }\n    }\n\n    @ContentChild(Footer, { static: true }) footer;\n\n    @ViewChild('content', { static: true }) contentViewChild: ElementRef;\n    \n    confirmation: Confirmation;\n        \n    _visible: boolean;\n\n    maskVisible: boolean;\n    \n    documentEscapeListener: any;\n        \n    container: HTMLDivElement;\n\n    wrapper: HTMLElement;\n        \n    contentContainer: HTMLDivElement;\n      \n    subscription: Subscription;\n\n    preWidth: number;\n                \n    constructor(public el: ElementRef, public renderer: Renderer2, private confirmationService: ConfirmationService, public zone: NgZone) {\n        this.subscription = this.confirmationService.requireConfirmation$.subscribe(confirmation => {\n            if (confirmation.key === this.key) {\n                this.confirmation = confirmation;\n                this.message = this.confirmation.message||this.message;\n                this.icon = this.confirmation.icon||this.icon;\n                this.header = this.confirmation.header||this.header;\n                this.rejectVisible = this.confirmation.rejectVisible == null ? this.rejectVisible : this.confirmation.rejectVisible;\n                this.acceptVisible = this.confirmation.acceptVisible == null ? this.acceptVisible : this.confirmation.acceptVisible;\n                this.acceptLabel = this.confirmation.acceptLabel||this.acceptLabel;\n                this.rejectLabel = this.confirmation.rejectLabel||this.rejectLabel;\n\n                if (this.confirmation.accept) {\n                    this.confirmation.acceptEvent = new EventEmitter();\n                    this.confirmation.acceptEvent.subscribe(this.confirmation.accept);\n                }\n                \n                if (this.confirmation.reject) {\n                    this.confirmation.rejectEvent = new EventEmitter();\n                    this.confirmation.rejectEvent.subscribe(this.confirmation.reject);\n                }\n\n                if (this.confirmation.blockScroll === false || this.confirmation.blockScroll === true) {\n                    this.blockScroll = this.confirmation.blockScroll;\n                }\n\n                this.visible = true;\n            }\n        });         \n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                this.container = event.element;\n                this.wrapper = this.container.parentElement;\n                this.contentContainer = DomHandler.findSingle(this.container, '.ui-dialog-content');\n                \n                if (this.acceptVisible || this.rejectVisible) {\n                    DomHandler.findSingle(this.container, 'button').focus();\n                }\n\n                this.appendContainer();\n                this.moveOnTop();\n                this.bindGlobalListeners();\n                this.enableModality();\n            break;\n        }\n    }\n\n    onAnimationEnd(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n\n    restoreAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n        \n    enableModality() {\n        if (this.blockScroll) {\n            DomHandler.addClass(document.body, 'ui-overflow-hidden');\n        }\n    }\n    \n    disableModality() {\n        this.maskVisible = false;\n\n        if (this.blockScroll) {            \n            DomHandler.removeClass(document.body, 'ui-overflow-hidden');\n        }\n    }\n    \n    close(event: Event) {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n        \n        this.hide();\n        event.preventDefault();\n    }\n    \n    hide() {\n        this.visible = false;\n    }\n    \n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n            this.wrapper.style.zIndex = String(this.baseZIndex + (DomHandler.zindex - 1));\n        }\n    }\n    \n    bindGlobalListeners() {\n        if ((this.closeOnEscape && this.closable) || this.focusTrap && !this.documentEscapeListener) {\n            this.documentEscapeListener = this.renderer.listen('document', 'keydown', (event) => {\n                if (event.which == 27 && (this.closeOnEscape && this.closable)) {\n                    if (parseInt(this.container.style.zIndex) === (DomHandler.zindex + this.baseZIndex) && this.visible)Â {\n                        this.close(event);\n                    }\n                }\n\n                if (event.which === 9 && this.focusTrap) {\n                    event.preventDefault();\n                    \n                    let focusableElements = DomHandler.getFocusableElements(this.container);\n    \n                    if (focusableElements && focusableElements.length > 0) {\n                        if (!document.activeElement) {\n                            focusableElements[0].focus();\n                        }\n                        else {\n                            let focusedIndex = focusableElements.indexOf(document.activeElement);\n    \n                            if (event.shiftKey) {\n                                if (focusedIndex == -1 || focusedIndex === 0)\n                                    focusableElements[focusableElements.length - 1].focus();\n                                else\n                                    focusableElements[focusedIndex - 1].focus();\n                            }\n                            else {\n                                if (focusedIndex == -1 || focusedIndex === (focusableElements.length - 1))\n                                    focusableElements[0].focus();\n                                else\n                                    focusableElements[focusedIndex + 1].focus();\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n    \n    unbindGlobalListeners() {\n        if (this.documentEscapeListener) {\n            this.documentEscapeListener();\n            this.documentEscapeListener = null;\n        }\n    }\n\n    onOverlayHide() {\n        this.disableModality();\n        this.unbindGlobalListeners();\n        this.container = null;\n    }\n                \n    ngOnDestroy() {\n        this.restoreAppend();\n        this.onOverlayHide();\n        this.subscription.unsubscribe();\n    }\n    \n    accept() {\n        if (this.confirmation.acceptEvent) {\n            this.confirmation.acceptEvent.emit();\n        }\n        \n        this.hide();\n        this.confirmation = null;\n    }\n    \n    reject() {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n        \n        this.hide();\n        this.confirmation = null;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,ButtonModule],\n    exports: [ConfirmDialog,ButtonModule,SharedModule],\n    declarations: [ConfirmDialog]\n})\nexport class ConfirmDialogModule { }"]}