{"version":3,"sources":["ng://primeng/spinner/spinner.ts"],"names":["SPINNER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Spinner","multi","el","cd","this","onChange","EventEmitter","onFocus","onBlur","step","onModelChange","onModelTouched","keyPattern","negativeSeparator","prototype","ngAfterViewInit","value","toString","indexOf","precision","split","length","formatInput","localeDecimalSeparator","toLocaleString","substring","localeThousandSeparator","thousandRegExp","RegExp","thousandSeparator","decimalSeparator","console","warn","repeat","event","interval","dir","_this","i","clearTimer","timer","setTimeout","spin","currentValue","parseValue","parseFloat","toFixed","undefined","maxlength","min","max","formatValue","emit","power","Math","pow","String","round","onUpButtonMousedown","disabled","inputfieldViewChild","nativeElement","focus","updateFilledState","preventDefault","onUpButtonMouseup","onUpButtonMouseleave","onDownButtonMousedown","onDownButtonMouseup","onDownButtonMouseleave","onInputKeydown","which","onInputChange","onInput","target","onInputBlur","onInputFocus","val","trim","replace","parseInt","isNaN","maximumFractionDigits","join","formattedValue","clearInterval","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","filled","ElementRef","ChangeDetectorRef","__decorate","Output","Input","ViewChild","static","Component","selector","template","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","providers","SpinnerModule","NgModule","imports","CommonModule","InputTextModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,AfterViewInit,Input,Output,EventEmitter,forwardRef,ViewChild, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const SPINNER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => Spinner),\n    multi: true\n};\n\n@Component({\n    selector: 'p-spinner',\n    template: `\n        <span class=\"ui-spinner ui-widget ui-corner-all\">\n            <input #inputfield type=\"text\" [attr.id]=\"inputId\" [value]=\"formattedValue||null\" [attr.name]=\"name\" [attr.aria-valumin]=\"min\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"value\" [attr.aria-labelledby]=\"ariaLabelledBy\"\n            [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.placeholder]=\"placeholder\" [disabled]=\"disabled\" [readonly]=\"readonly\" [attr.required]=\"required\"\n            (keydown)=\"onInputKeydown($event)\" (blur)=\"onInputBlur($event)\" (input)=\"onInput($event)\" (change)=\"onInputChange($event)\" (focus)=\"onInputFocus($event)\"\n            [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [ngClass]=\"'ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all'\">\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled||readonly\" [attr.tabindex]=\"tabindex\" [attr.readonly]=\"readonly\"\n                (mouseleave)=\"onUpButtonMouseleave($event)\" (mousedown)=\"onUpButtonMousedown($event)\" (mouseup)=\"onUpButtonMouseup($event)\">\n                <span class=\"ui-spinner-button-icon pi pi-caret-up ui-clickable\"></span>\n            </button>\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled||readonly\" [attr.tabindex]=\"tabindex\" [attr.readonly]=\"readonly\"\n                (mouseleave)=\"onDownButtonMouseleave($event)\" (mousedown)=\"onDownButtonMousedown($event)\" (mouseup)=\"onDownButtonMouseup($event)\">\n                <span class=\"ui-spinner-button-icon pi pi-caret-down ui-clickable\"></span>\n            </button>\n        </span>\n    `,\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focus'\n    },\n    providers: [SPINNER_VALUE_ACCESSOR]\n})\nexport class Spinner implements AfterViewInit,ControlValueAccessor {\n    \n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Input() step: number = 1;\n\n    @Input() min: number;\n\n    @Input() max: number;\n    \n    @Input() maxlength: number;\n    \n    @Input() size: number;\n\n    @Input() placeholder: string;\n\n    @Input() inputId: string;\n\n    @Input() disabled: boolean;\n    \n    @Input() readonly: boolean;\n\n    @Input() tabindex: number;\n            \n    @Input() required: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() inputStyle: any;\n\n    @Input() inputStyleClass: string;\n\n    @Input() formatInput: boolean;\n\n    @Input() decimalSeparator: string;\n\n    @Input() thousandSeparator: string;\n    \n    value: any;\n\n    formattedValue: string;\n        \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    keyPattern: RegExp = /[0-9\\+\\-]/;\n    \n    public precision: number;\n    \n    public timer: any;\n    \n    public focus: boolean;\n    \n    public filled: boolean;\n    \n    public negativeSeparator = '-';\n\n    localeDecimalSeparator: string;\n\n    localeThousandSeparator: string;\n\n    thousandRegExp: RegExp;\n    \n    @ViewChild('inputfield', { static: true }) inputfieldViewChild: ElementRef;\n    \n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\n\n    ngAfterViewInit() {\n        if(this.value && this.value.toString().indexOf('.') > 0) {\n            this.precision = this.value.toString().split(/[.]/)[1].length;\n        }\n        else if(this.step % 1 !== 0) {\n            // If step is not an integer then extract the length of the decimal part\n            this.precision = this.step.toString().split(/[,]|[.]/)[1].length;\n        }\n\n        if (this.formatInput) {\n            this.localeDecimalSeparator = (1.1).toLocaleString().substring(1, 2);\n            this.localeThousandSeparator = (1000).toLocaleString().substring(1, 2);\n            this.thousandRegExp = new RegExp(`[${this.thousandSeparator || this.localeThousandSeparator}]`, 'gim');\n\n            if (this.decimalSeparator && this.thousandSeparator && this.decimalSeparator === this.thousandSeparator) {\n                console.warn(\"thousandSeparator and decimalSeparator cannot have the same value.\");\n            }\n        }\n    }\n\n    repeat(event: Event, interval: number, dir: number) {\n        let i = interval||500;\n\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n\n        this.spin(event, dir);\n    }\n    \n    spin(event: Event, dir: number) {\n        let step = this.step * dir;\n        let currentValue: number;\n\n        if (this.value)\n            currentValue = (typeof this.value === 'string') ? this.parseValue(this.value) : this.value;\n        else\n            currentValue = 0;\n        \n        if (this.precision)\n            this.value = parseFloat(this.toFixed(currentValue + step, this.precision));\n        else\n            this.value = currentValue + step;\n    \n        if (this.maxlength !== undefined && this.value.toString().length > this.maxlength) {\n            this.value = currentValue;\n        }\n    \n        if (this.min !== undefined && this.value < this.min) {\n            this.value = this.min;\n        }\n\n        if (this.max !== undefined && this.value > this.max) {\n            this.value = this.max;\n        }\n       \n        this.formatValue();\n        this.onModelChange(this.value);\n        this.onChange.emit(event);\n    }\n    \n    toFixed(value: number, precision: number) {\n        let power = Math.pow(10, precision||0);\n        return String(Math.round(value * power) / power);\n    }\n    \n    onUpButtonMousedown(event: Event) {\n        if (!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, 1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    }\n    \n    onUpButtonMouseup(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onUpButtonMouseleave(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onDownButtonMousedown(event: Event) {\n        if (!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, -1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    }\n    \n    onDownButtonMouseup(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onDownButtonMouseleave(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onInputKeydown(event: KeyboardEvent) {\n        if (event.which == 38) {\n            this.spin(event, 1);\n            event.preventDefault();\n        }\n        else if (event.which == 40) {\n            this.spin(event, -1);\n            event.preventDefault();\n        }\n    }\n\n    onInputChange(event: Event) {\n        this.onChange.emit(event);\n    }\n\n    onInput(event: KeyboardEvent) {\n        this.value = this.parseValue((<HTMLInputElement> event.target).value);\n        this.onModelChange(this.value);\n        this.updateFilledState();\n    }\n        \n    onInputBlur(event) {\n        this.focus = false;\n        this.formatValue();\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n    \n    onInputFocus(event) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    }\n    \n    parseValue(val: string): number {\n        let value: number;\n                \n        if (val.trim() === '') {\n            value = null;\n        }\n        else {\n            if (this.formatInput) {\n                val = val.replace(this.thousandRegExp, '');\n            }\n\n            if (this.precision) {\n                val = this.formatInput ? val.replace(this.decimalSeparator || this.localeDecimalSeparator, '.') : val.replace(',', '.');\n                value = parseFloat(val);\n            }\n            else {\n                value = parseInt(val, 10);\n            }\n            \n            if (!isNaN(value)) {\n                if (this.max !== null && value > this.max) {\n                    value = this.max;\n                }\n\n                if (this.min !== null && value < this.min) {\n                    value = this.min;\n                }\n            }\n            else {\n                value = null;\n            }\n        }\n        \n        return value;\n    }\n\n    formatValue() {\n        let value = this.value;\n\n        if (value != null) {\n            if (this.formatInput) {\n                value = value.toLocaleString(undefined, {maximumFractionDigits: 20});\n    \n                if (this.decimalSeparator && this.thousandSeparator) {\n                    value = value.split(this.localeDecimalSeparator);\n    \n                    if (this.precision && value[1]) {\n                        value[1] = (this.decimalSeparator || this.localeDecimalSeparator) + value[1];\n                    }\n    \n                    if (this.thousandSeparator && value[0].length > 3) {\n                        value[0] = value[0].replace(new RegExp(`[${this.localeThousandSeparator}]`, 'gim'), this.thousandSeparator);\n                    }\n    \n                    value = value.join('');\n                }\n            }\n    \n            this.formattedValue = value.toString();\n        }\n        else {\n            this.formattedValue = null;\n        }\n\n        if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {\n            this.inputfieldViewChild.nativeElement.value = this.formattedValue;\n        }\n    }\n            \n    clearTimer() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n    \n    writeValue(value: any) : void {\n        this.value = value;\n        this.formatValue();\n        this.updateFilledState();\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    updateFilledState() {\n        this.filled = (this.value !== undefined && this.value != null);\n    }\n}\n\n\n@NgModule({\n    imports: [CommonModule,InputTextModule],\n    exports: [Spinner],\n    declarations: [Spinner]\n})\nexport class SpinnerModule { }\n"]}