{"version":3,"sources":["ng://primeng/overlaypanel/overlaypanel.ts"],"names":["OverlayPanel","el","renderer","cd","zone","this","dismissable","autoZIndex","baseZIndex","showTransitionOptions","hideTransitionOptions","onShow","EventEmitter","onHide","visible","isContainerClicked","prototype","onContainerClick","bindDocumentClickListener","_this","documentClickListener","runOutsideAngular","documentEvent","DomHandler","isIOS","listen","event","container","contains","target","run","hide","markForCheck","unbindDocumentClickListener","toggle","hasTargetChanged","currentTarget","setTimeout","show","appendContainer","appendTo","document","body","appendChild","restoreAppend","nativeElement","onAnimationStart","toState","element","emit","style","zIndex","String","zindex","absolutePosition","getOffset","top","addClass","Math","floor","left","bindDocumentResizeListener","onContainerDestroy","onCloseClick","preventDefault","onWindowResize","documentResizeListener","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","ngOnDestroy","ElementRef","Renderer2","ChangeDetectorRef","NgZone","__decorate","Input","Output","Component","selector","template","animations","trigger","state","transform","opacity","transition","animate","OverlayPanelModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,OnDestroy,EventEmitter,Renderer2,ElementRef,ChangeDetectorRef,NgZone} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\n\n@Component({\n    selector: 'p-overlayPanel',\n    template: `\n        <div [ngClass]=\"'ui-overlaypanel ui-widget ui-widget-content ui-corner-all ui-shadow'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onContainerClick()\"\n            [@animation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@animation.start)=\"onAnimationStart($event)\" *ngIf=\"visible\">\n            <div class=\"ui-overlaypanel-content\">\n                <ng-content></ng-content>\n            </div>\n            <a tabindex=\"0\" *ngIf=\"showCloseIcon\" class=\"ui-overlaypanel-close ui-state-default\" (click)=\"onCloseClick($event)\" (keydown.enter)=\"hide()\" [attr.aria-label]=\"ariaCloseLabel\">\n                <span class=\"ui-overlaypanel-close-icon pi pi-times\"></span>\n            </a>\n        </div>\n    `,\n    animations: [\n        trigger('animation', [\n            state('void', style({\n                transform: 'translateY(5%)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => visible', animate('{{showTransitionParams}}')),\n            transition('visible => void', animate('{{hideTransitionParams}}'))\n        ])\n    ]\n})\nexport class OverlayPanel implements OnDestroy {\n\n    @Input() dismissable: boolean = true;\n\n    @Input() showCloseIcon: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() ariaCloseLabel: string;\n    \n    @Input() baseZIndex: number = 0;\n    \n    @Input() showTransitionOptions: string = '225ms ease-out';\n\n    @Input() hideTransitionOptions: string = '195ms ease-in';\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n    \n    container: HTMLDivElement;\n\n    visible: boolean = false;\n\n    isContainerClicked: boolean = true;\n\n    documentClickListener: any;\n            \n    target: any;\n    \n    willHide: boolean;\n        \n    documentResizeListener: any;\n    \n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef, private zone: NgZone) {}\n        \n    onContainerClick() {\n        this.isContainerClicked = true;\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener && this.dismissable) {\n            this.zone.runOutsideAngular(() => {\n                let documentEvent = DomHandler.isIOS() ? 'touchstart' : 'click';\n                this.documentClickListener = this.renderer.listen('document', documentEvent, (event) => {\n                    if (!this.container.contains(event.target) && this.target !== event.target &&Â !this.target.contains(event.target) && !this.isContainerClicked) {\n                        this.zone.run(() => {\n                            this.hide();\n                        });\n                    }\n\n                    this.isContainerClicked = false;\n                    this.cd.markForCheck();\n                });\n            });\n        }\n    }\n    \n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n    \n    toggle(event, target?) {\n        if (this.visible) {\n            this.visible = false;\n\n            if (this.hasTargetChanged(event, target)) {\n                this.target = target||event.currentTarget||event.target;\n\n                setTimeout(() => {\n                    this.visible = true;\n                }, 200);\n            }\n        }\n        else {\n            this.show(event, target);\n        }\n    }\n\n    show(event, target?) {\n        this.target = target||event.currentTarget||event.target;\n        this.visible = true;\n    }\n\n    hasTargetChanged(event, target) {\n        return this.target != null && this.target !== (target||event.currentTarget||event.target);\n    }\n\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n\n    restoreAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                this.container = event.element;\n                this.onShow.emit(null);\n                this.appendContainer();\n                if (this.autoZIndex) {\n                    this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                DomHandler.absolutePosition(this.container, this.target);\n                if (DomHandler.getOffset(this.container).top < DomHandler.getOffset(this.target).top) {\n                    DomHandler.addClass(this.container, 'ui-overlaypanel-flipped');\n                }\n                if (Math.floor(DomHandler.getOffset(this.container).left) < Math.floor(DomHandler.getOffset(this.target).left) &&\n                    DomHandler.getOffset(this.container).left > 0) {\n                    DomHandler.addClass(this.container, 'ui-overlaypanel-shifted');\n                }\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n            break;\n\n            case 'void':\n                this.onContainerDestroy();\n                this.onHide.emit({});\n            break;\n        }\n    }\n\n    hide() {\n        this.visible = false;\n    }\n\n    onCloseClick(event) {\n        this.hide();\n        event.preventDefault();\n    }\n\n    onWindowResize(event) {\n        this.hide();\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onContainerDestroy() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n    }\n\n    ngOnDestroy() {\n        this.target = null;\n        if (this.container) {\n            this.restoreAppend();\n            this.onContainerDestroy();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [OverlayPanel],\n    declarations: [OverlayPanel]\n})\nexport class OverlayPanelModule { }\n"]}