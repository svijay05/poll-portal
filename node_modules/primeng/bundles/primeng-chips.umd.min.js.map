{"version":3,"sources":["ng://primeng/chips/chips.ts"],"names":["CHIPS_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Chips","multi","el","this","allowDuplicate","onAdd","EventEmitter","onRemove","onFocus","onBlur","onChipClick","onModelChange","onModelTouched","prototype","ngAfterContentInit","_this","templates","forEach","item","getType","itemTemplate","template","onClick","event","inputViewChild","nativeElement","focus","onItemClick","emit","originalEvent","value","writeValue","updateMaxedOut","registerOnChange","fn","registerOnTouched","setDisabledState","val","disabled","resolveFieldData","data","field","indexOf","fields","split","i","len","length","onInputFocus","onInputBlur","addOnBlur","addItem","removeItem","index","removedItem","filter","trim","__spread","onKeydown","which","pop","preventDefault","addOnTab","max","ElementRef","__decorate","Input","Output","ViewChild","static","ContentChildren","PrimeTemplate","Component","selector","providers","ChipsModule","NgModule","imports","CommonModule","InputTextModule","SharedModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,Input,Output,EventEmitter,AfterContentInit,ContentChildren,QueryList,TemplateRef,forwardRef,ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule,PrimeTemplate} from 'primeng/api';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const CHIPS_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Chips),\n  multi: true\n};\n\n@Component({\n    selector: 'p-chips',\n    template: `\n        <div [ngClass]=\"'ui-chips ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onClick($event)\">\n            <ul [ngClass]=\"{'ui-inputtext ui-state-default ui-corner-all':true,'ui-state-focus':focus,'ui-state-disabled':disabled}\">\n                <li #token *ngFor=\"let item of value; let i = index;\" class=\"ui-chips-token ui-state-highlight ui-corner-all\" (click)=\"onItemClick($event, item)\">\n                    <span *ngIf=\"!disabled\" class=\"ui-chips-token-icon pi pi-fw pi-times\" (click)=\"removeItem($event,i)\"></span>\n                    <span *ngIf=\"!itemTemplate\" class=\"ui-chips-token-label\">{{field ? resolveFieldData(item,field) : item}}</span>\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item}\"></ng-container>\n                </li>\n                <li class=\"ui-chips-input-token\">\n                    <input #inputtext type=\"text\" [attr.id]=\"inputId\" [attr.placeholder]=\"(value && value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" (keydown)=\"onKeydown($event)\" \n                    [attr.aria-labelledby]=\"ariaLabelledBy\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" [disabled]=\"disabled\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\">\n                </li>\n            </ul>\n        </div>\n    `,\n    providers: [CHIPS_VALUE_ACCESSOR]\n})\nexport class Chips implements AfterContentInit,ControlValueAccessor {\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() disabled: boolean;\n    \n    @Input() field: string;\n    \n    @Input() placeholder: string;\n    \n    @Input() max: number;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n    \n    @Input() allowDuplicate: boolean = true;\n    \n    @Input() inputStyle: any;\n    \n    @Input() inputStyleClass: any;\n    \n    @Input() addOnTab: boolean;\n\n    @Input() addOnBlur: boolean;\n\n    @Output() onAdd: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onRemove: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Output() onChipClick: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('inputtext', { static: true }) inputViewChild: ElementRef;\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    public itemTemplate: TemplateRef<any>;\n        \n    value: any;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n        \n    valueChanged: boolean;\n    \n    focus: boolean;\n            \n    constructor(public el: ElementRef) {}\n    \n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n                \n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n    \n    onClick(event) {\n        this.inputViewChild.nativeElement.focus();\n    }\n\n    onItemClick(event: Event, item: any) {\n        this.onChipClick.emit({\n            originalEvent: event,\n            value: item\n        });\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.updateMaxedOut();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    resolveFieldData(data: any, field: string): any {\n        if(data && field) {\n            if(field.indexOf('.') == -1) {\n                return data[field];\n            }\n            else {\n                let fields: string[] = field.split('.');\n                let value = data;\n                for(var i = 0, len = fields.length; i < len; ++i) {\n                    value = value[fields[i]];\n                }\n                return value;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    \n    onInputFocus(event: FocusEvent) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event: FocusEvent) {\n        this.focus = false;\n        if(this.addOnBlur && this.inputViewChild.nativeElement.value) {\n            this.addItem(event, this.inputViewChild.nativeElement.value);\n            this.inputViewChild.nativeElement.value = '';\n        }\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n    \n    removeItem(event: Event, index: number): void {\n        if(this.disabled) {\n            return;\n        }\n        \n        let removedItem = this.value[index];\n        this.value = this.value.filter((val, i) => i!=index);\n        this.onModelChange(this.value);\n        this.onRemove.emit({\n            originalEvent: event,\n            value: removedItem\n        });\n        this.updateMaxedOut();\n    }\n    \n    addItem(event: Event, item: string): void {\n        this.value = this.value||[];\n        if(item && item.trim().length) {\n            if(this.allowDuplicate || this.value.indexOf(item) === -1) {\n                this.value = [...this.value, item];\n                this.onModelChange(this.value);\n                this.onAdd.emit({\n                    originalEvent: event,\n                    value: item\n                });\n            }\n        }\n        this.updateMaxedOut();\n    }\n    \n    onKeydown(event: KeyboardEvent): void {\n        switch(event.which) {\n            //backspace\n            case 8:\n                if(this.inputViewChild.nativeElement.value.length === 0 && this.value && this.value.length > 0) {\n                    this.value = [...this.value];\n                    let removedItem = this.value.pop();\n                    this.onModelChange(this.value);\n                    this.onRemove.emit({\n                        originalEvent: event,\n                        value: removedItem\n                    });\n                }\n            break;\n            \n            //enter\n            case 13:\n                this.addItem(event, this.inputViewChild.nativeElement.value);\n                this.inputViewChild.nativeElement.value = '';\n                \n                event.preventDefault();\n            break;\n            \n            case 9:\n                if(this.addOnTab && this.inputViewChild.nativeElement.value !== '') {\n                    this.addItem(event, this.inputViewChild.nativeElement.value);\n                    this.inputViewChild.nativeElement.value = '';\n\n                    event.preventDefault();\n                }\n            break;\n            \n            default:\n                if(this.max && this.value && this.max === this.value.length) {\n                    event.preventDefault();\n                }\n            break;\n        }\n    }\n    \n    updateMaxedOut() {\n        if(this.inputViewChild && this.inputViewChild.nativeElement) {\n            if(this.max && this.value && this.max === this.value.length)\n                this.inputViewChild.nativeElement.disabled = true;\n            else\n                this.inputViewChild.nativeElement.disabled = this.disabled || false;\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,InputTextModule,SharedModule],\n    exports: [Chips,InputTextModule,SharedModule],\n    declarations: [Chips]\n})\nexport class ChipsModule { }\n"]}