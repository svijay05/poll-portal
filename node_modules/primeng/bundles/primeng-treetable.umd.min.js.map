{"version":3,"sources":["ng://primeng/treetable/treetable.ts"],"names":["TreeTableService","this","sortSource","Subject","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","prototype","onSort","sortMeta","next","onSelectionChange","onContextMenu","node","onUIUpdate","value","onTotalRecordsChange","__decorate","Injectable","TreeTable","el","zone","tableService","lazy","first","pageLinks","alwaysShowPaginator","paginatorPosition","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","virtualRowHeight","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_value","_totalRecords","_sortOrder","selectionKeys","ngOnInit","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","virtualScroll","virtualScrollCallback","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","Object","defineProperty","val","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","nodes_1","__values","nodes_1_1","done","rowNode","expanded","push","children","data","i","rows","dataKey","Array","isArray","_b","_c","String","ObjectUtils","resolveFieldData","onPageChange","event","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","nodes_2","nodes_2_1","sortMultipleNodes","multisortmeta","multisortField","nodes_3","nodes_3_1","isSorted","sorted","globalFilter","handleVirtualScroll","page","callback","run","virtualScrollTimer","clearTimeout","setTimeout","isEmpty","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","DomHandler","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","top","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollable","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","tableViewChild","containerWidth","element","removeClass","parent_1","parentElement","hasClass","table","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","isMultipleSelectionMode","__spread","rowIndex","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","data_1","data_1_1","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","index_1","equals","matchMode","filterTimeout","isFilterBlank","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","__assign","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","FilterUtils","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNodes_1","childNodes_1_1","childNode","copyChildNode","_a","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","ElementRef","NgZone","Input","Output","ViewChild","static","ContentChildren","PrimeTemplate","Component","selector","providers","TTBody","tt","TTScrollableView","loadingArray","subscription","subscribe","runOutsideAngular","alignScrollBar","scrollLoadingTableViewChild","totalRecordsSubscription","setVirtualScrollerHeight","fill","_scrollHeight","setScrollHeight","ngAfterViewChecked","ngAfterViewInit","bindEvents","frozen","scrollBodyViewChild","paddingBottom","calculateScrollbarWidth","frozenColumns","frozenWidth","frozenView","previousElementSibling","frozenSiblingBody","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollHeaderBoxViewChild","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","unbindEvents","marginLeft","scrollFooterBoxViewChild","scrollTop","viewport","getOuterHeight","tableHeight","scrollTableViewChild","pageHeight_1","pageCount","virtualScrollerViewChild","scrollBodyTop","parseFloat","page_1","floor","scrollHeight","indexOf","relativeHeight","visibility","containerHeight","includes","percentHeight","diffValue","scrollBodyHeight","maxHeight","hasVerticalOverflow","scrollBarWidth","marginRight","unsubscribe","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","HostListener","Directive","host","[class.ui-sortable-column]","[class.ui-state-highlight]","[attr.tabindex]","TTSortIcon","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","ttContextMenuRowDisabled","[class.ui-contextmenu-selected]","TTCheckbox","disabled","onFocus","boxViewChild","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","data_2","data_2_1","TTEditableColumn","openCell","focusable","focus","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","which","prevRow","toggleRowIndex","restoreFocus","row","TreeTableToggler","TreeTableModule","NgModule","imports","CommonModule","PaginatorModule","exports","SharedModule","declarations"],"mappings":"45DAAAA,EAAA,WAcA,SAAAA,IAEYC,KAAAC,WAAa,IAAIC,EAAAA,QACjBF,KAAAG,gBAAkB,IAAID,EAAAA,QACtBF,KAAAI,kBAAoB,IAAIF,EAAAA,QACxBF,KAAAK,eAAiB,IAAIH,EAAAA,QACrBF,KAAAM,mBAAqB,IAAIJ,EAAAA,QAEjCF,KAAAO,YAAcP,KAAKC,WAAWO,eAC9BR,KAAAS,iBAAmBT,KAAKG,gBAAgBK,eACxCR,KAAAU,mBAAqBV,KAAKI,kBAAkBI,eAC5CR,KAAAW,gBAAkBX,KAAKK,eAAeG,eACtCR,KAAAY,oBAAsBZ,KAAKM,mBAAmBE,eAqBlD,OAnBIT,EAAAc,UAAAC,OAAA,SAAOC,GACHf,KAAKC,WAAWe,KAAKD,IAGzBhB,EAAAc,UAAAI,kBAAA,WACIjB,KAAKG,gBAAgBa,QAGzBjB,EAAAc,UAAAK,cAAA,SAAcC,GACVnB,KAAKI,kBAAkBY,KAAKG,IAGhCpB,EAAAc,UAAAO,WAAA,SAAWC,GACPrB,KAAKK,eAAeW,KAAKK,IAG7BtB,EAAAc,UAAAS,qBAAA,SAAqBD,GACjBrB,KAAKM,mBAAmBU,KAAKK,IA/BxBtB,EAAgBwB,EAAA,CAD5BC,EAAAA,cACYzB,GAdb,gBA4XI,SAAA0B,EAAmBC,EAAuBC,EAAqBC,GAA5C5B,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EAAqB3B,KAAA4B,aAAAA,EA/QtD5B,KAAA6B,MAAgB,EAMhB7B,KAAA8B,MAAgB,EAEhB9B,KAAA+B,UAAoB,EAIpB/B,KAAAgC,qBAA+B,EAE/BhC,KAAAiC,kBAA4B,SAI5BjC,KAAAkC,iBAA2B,EAE3BlC,KAAAmC,SAAmB,SAEnBnC,KAAAoC,iBAA2B,EAM1BpC,KAAAqC,gBAAqC,IAAIC,EAAAA,aAIzCtC,KAAAuC,2BAAgD,IAAID,EAAAA,aAErDtC,KAAAwC,yBAAmC,WAMnCxC,KAAAyC,mBAA6B,aAM7BzC,KAAA0C,YAAsB,gBAEtB1C,KAAA2C,YAAsB,EAQtB3C,KAAA4C,mBAA6B,IAE7B5C,KAAA6C,iBAA2B,GAQ3B7C,KAAA8C,iBAA2B,MAM3B9C,KAAA+C,WAAuB,SAACC,EAAeC,GAAc,OAAAA,GAErDjD,KAAAkD,QAA4C,GAI5ClD,KAAAmD,YAAsB,IAEtBnD,KAAAoD,WAAqB,UAEpBpD,KAAAqD,SAA8B,IAAIf,EAAAA,aAElCtC,KAAAsD,aAAkC,IAAIhB,EAAAA,aAEtCtC,KAAAuD,eAAoC,IAAIjB,EAAAA,aAExCtC,KAAAwD,OAA4B,IAAIlB,EAAAA,aAEhCtC,KAAAc,OAA4B,IAAIwB,EAAAA,aAEhCtC,KAAAyD,WAAgC,IAAInB,EAAAA,aAEpCtC,KAAA0D,aAAkC,IAAIpB,EAAAA,aAEtCtC,KAAA2D,YAAiC,IAAIrB,EAAAA,aAErCtC,KAAA4D,aAAkC,IAAItB,EAAAA,aAEtCtC,KAAA6D,aAAkC,IAAIvB,EAAAA,aAEtCtC,KAAA8D,eAAoC,IAAIxB,EAAAA,aAExCtC,KAAA+D,oBAAyC,IAAIzB,EAAAA,aAE7CtC,KAAAgE,uBAA4C,IAAI1B,EAAAA,aAEhDtC,KAAAiE,WAAgC,IAAI3B,EAAAA,aAEpCtC,KAAAkE,eAAoC,IAAI5B,EAAAA,aAExCtC,KAAAmE,aAAkC,IAAI7B,EAAAA,aAchDtC,KAAAoE,OAAqB,GAIrBpE,KAAAqE,cAAwB,EAMxBrE,KAAAsE,WAAqB,EAoDrBtE,KAAAuE,cAAqB,GAmvCzB,OAruCI9C,EAAAZ,UAAA2D,SAAA,WACQxE,KAAK6B,MACL7B,KAAKyD,WAAWgB,KAAKzE,KAAK0E,0BAE9B1E,KAAK2E,aAAc,GAGvBlD,EAAAZ,UAAA+D,mBAAA,WAAA,IAAAC,EAAA7E,KACIA,KAAK8E,UAAUC,SAAQ,SAAC9B,GACpB,OAAQA,EAAK+B,WACT,IAAK,UACDH,EAAKI,gBAAkBhC,EAAKiC,SAChC,MAEA,IAAK,SACDL,EAAKM,eAAiBlC,EAAKiC,SAC/B,MAEA,IAAK,OACDL,EAAKO,aAAenC,EAAKiC,SAC7B,MAEA,IAAK,cACDL,EAAKQ,oBAAsBpC,EAAKiC,SACpC,MAEA,IAAK,SACDL,EAAKS,eAAiBrC,EAAKiC,SAC/B,MAEA,IAAK,UACDL,EAAKU,gBAAkBtC,EAAKiC,SAChC,MAEA,IAAK,WACDL,EAAKW,iBAAmBvC,EAAKiC,SACjC,MAEA,IAAK,eACDL,EAAKY,qBAAuBxC,EAAKiC,SACrC,MAEA,IAAK,gBACDL,EAAKa,sBAAwBzC,EAAKiC,SACtC,MAEA,IAAK,iBACDL,EAAKc,uBAAyB1C,EAAKiC,SACvC,MAEA,IAAK,eACDL,EAAKe,qBAAuB3C,EAAKiC,SACrC,MAEA,IAAK,aACDL,EAAKgB,mBAAqB5C,EAAKiC,SACnC,MAEA,IAAK,eACDL,EAAKiB,qBAAuB7C,EAAKiC,SACrC,MAEA,IAAK,iBACDL,EAAKkB,uBAAyB9C,EAAKiC,cAQnDzD,EAAAZ,UAAAmF,YAAA,SAAYC,GACJA,EAAa5E,QACbrB,KAAKoE,OAAS6B,EAAa5E,MAAM6E,aAE5BlG,KAAK6B,OACN7B,KAAKmG,aAAgBnG,KAAKoE,OAASpE,KAAKoE,OAAOgC,OAAS,EAEnC,UAAjBpG,KAAKmC,UAAwBnC,KAAKqG,UAClCrG,KAAKsG,aACiB,YAAjBtG,KAAKmC,UAA0BnC,KAAKuG,cACzCvG,KAAKwG,eACDxG,KAAKyG,aACTzG,KAAK0G,WAGT1G,KAAK2G,eAAiB3G,KAAK4G,uBAC3B5G,KAAK4G,wBAGT5G,KAAK6G,wBACL7G,KAAK4B,aAAaR,WAAWpB,KAAKqB,QAGlC4E,EAAaI,YACbrG,KAAK8G,WAAab,EAAaI,UAAUH,aAGnClG,KAAK6B,OAAQ7B,KAAK2E,aACE,WAAlB3E,KAAKmC,UACLnC,KAAKsG,cAKbL,EAAac,YACb/G,KAAKsE,WAAa2B,EAAac,UAAUb,aAGnClG,KAAK6B,OAAQ7B,KAAK2E,aACE,WAAlB3E,KAAKmC,UACLnC,KAAKsG,cAKbL,EAAaM,gBACbvG,KAAKgH,eAAiBf,EAAaM,cAAcL,aAC3B,aAAlBlG,KAAKmC,UACLnC,KAAKwG,gBAITP,EAAagB,YACbjH,KAAKkH,WAAajB,EAAagB,UAAUf,aAErClG,KAAKmH,oCACLnH,KAAKoH,sBACLpH,KAAK4B,aAAaX,qBAEtBjB,KAAKmH,mCAAoC,IAIxCE,OAAAC,eAAI7F,EAAAZ,UAAA,QAAK,KAAT,WACL,OAAOb,KAAKoE,YAEhB,SAAUmD,GACNvH,KAAKoE,OAASmD,mCAGlB9F,EAAAZ,UAAAgG,sBAAA,WACI7G,KAAKwH,gBAAkB,GAEpBxH,KAAKyH,UACJzH,KAAK0H,qBAEL1H,KAAK2H,eAAe,KAAM3H,KAAK4H,eAAe5H,KAAKqB,MAAO,GAAG,IAGrEI,EAAAZ,UAAA8G,eAAA,SAAeE,EAAQC,EAAOC,EAAOC,WACjC,GAAGF,GAASA,EAAM1B,WACd,IAAgB,IAAA6B,EAAAC,EAAAJ,GAAKK,EAAAF,EAAAjH,QAAAmH,EAAAC,KAAAD,EAAAF,EAAAjH,OAAE,CAAnB,IAAIG,EAAIgH,EAAA9G,MACRF,EAAK0G,OAASA,EACd,IAAMQ,EAAU,CACZlH,KAAMA,EACN0G,OAAQA,EACRE,MAAOA,EACPC,QAASA,KAAYH,GAASA,EAAOS,WAEzCtI,KAAKwH,gBAAgBe,KAAKF,GAEtBA,EAAQL,SAAW7G,EAAKmH,UACxBtI,KAAK2H,eAAexG,EAAMA,EAAKqH,SAAUT,EAAQ,EAAGM,EAAQL,6GAM5EvG,EAAAZ,UAAA6G,mBAAA,WACI,IAAIe,EAAOzI,KAAK4H,eAAiB5H,KAAKqB,MAEtC,GADArB,KAAKwH,gBAAkB,GACpBiB,GAAQA,EAAKrC,OAGZ,IAFA,IAAMtE,EAAQ9B,KAAK6B,KAAO,EAAI7B,KAAK8B,MAE3B4G,EAAI5G,EAAO4G,EAAK5G,EAAQ9B,KAAK2I,KAAOD,IAAK,CAC7C,IAAIvH,EAAOsH,EAAKC,GACbvH,IACCnB,KAAKwH,gBAAgBe,KAAK,CACtBpH,KAAMA,EACN0G,OAAQ,KACRE,MAAO,EACPC,SAAS,IAGbhI,KAAK2H,eAAexG,EAAMA,EAAKqH,SAAU,GAAG,MAMnDnB,OAAAC,eAAI7F,EAAAZ,UAAA,eAAY,KAAhB,WACL,OAAOb,KAAKqE,mBAEhB,SAAiBkD,GACbvH,KAAKqE,cAAgBkD,EACrBvH,KAAK4B,aAAaN,qBAAqBtB,KAAKqE,gDAGvCgD,OAAAC,eAAI7F,EAAAZ,UAAA,YAAS,KAAb,WACL,OAAOb,KAAK8G,gBAGhB,SAAcS,GACVvH,KAAK8G,WAAaS,mCAGbF,OAAAC,eAAI7F,EAAAZ,UAAA,YAAS,KAAb,WACL,OAAOb,KAAKsE,gBAEhB,SAAciD,GACVvH,KAAKsE,WAAaiD,mCAGbF,OAAAC,eAAI7F,EAAAZ,UAAA,gBAAa,KAAjB,WACL,OAAOb,KAAKgH,oBAGhB,SAAkBO,GACdvH,KAAKgH,eAAiBO,mCAGjBF,OAAAC,eAAI7F,EAAAZ,UAAA,YAAS,KAAb,WACL,OAAOb,KAAKkH,gBAGhB,SAAcK,GACVvH,KAAKkH,WAAaK,mCAGtB9F,EAAAZ,UAAAuG,oBAAA,mBACI,GAAGpH,KAAK4I,SAAW5I,KAAKkH,WAEpB,GADAlH,KAAKuE,cAAgB,GAClBsE,MAAMC,QAAQ9I,KAAKkH,gBAClB,IAAgB,IAAA6B,EAAAb,EAAAlI,KAAKkH,YAAU8B,EAAAD,EAAA/H,QAAAgI,EAAAZ,KAAAY,EAAAD,EAAA/H,OAAE,CAA7B,IAAIG,EAAI6H,EAAA3H,MACRrB,KAAKuE,cAAc0E,OAAOC,EAAAA,YAAYC,iBAAiBhI,EAAKsH,KAAMzI,KAAK4I,WAAa,yGAIxF5I,KAAKuE,cAAc0E,OAAOC,EAAAA,YAAYC,iBAAiBnJ,KAAKkH,WAAWuB,KAAMzI,KAAK4I,WAAa,GAK3GnH,EAAAZ,UAAAuI,aAAA,SAAaC,GACTrJ,KAAK8B,MAAQuH,EAAMvH,MACnB9B,KAAK2I,KAAOU,EAAMV,KAEd3I,KAAK6B,KACL7B,KAAKyD,WAAWgB,KAAKzE,KAAK0E,0BAE1B1E,KAAK0H,qBAET1H,KAAKwD,OAAOiB,KAAK,CACb3C,MAAO9B,KAAK8B,MACZ6G,KAAM3I,KAAK2I,OAGf3I,KAAK4B,aAAaR,WAAWpB,KAAKqB,QAGtCI,EAAAZ,UAAAyI,KAAA,SAAKD,GACD,IAAIE,EAAgBF,EAAME,cAO1B,GALqB,WAAlBvJ,KAAKmC,WACJnC,KAAKsE,WAActE,KAAKqG,YAAcgD,EAAMG,OAA2B,EAAlBxJ,KAAK+G,UAAiB/G,KAAKkC,iBAChFlC,KAAK8G,WAAauC,EAAMG,MACxBxJ,KAAKsG,cAEa,aAAlBtG,KAAKmC,SAAyB,CAC9B,IAAIsH,EAAUF,EAAcE,SAAWF,EAAcG,QACjD3I,EAAWf,KAAK2J,YAAYN,EAAMG,OAElCzI,EACK0I,EAID1I,EAAS6I,OAA0B,EAAlB7I,EAAS6I,MAH1B5J,KAAKgH,eAAiB,CAAC,CAAEwC,MAAOH,EAAMG,MAAOI,OAAyB,EAAlB7I,EAAS6I,SAO5DH,GAAYzJ,KAAKuG,gBAClBvG,KAAKgH,eAAiB,IAE1BhH,KAAKuG,cAAcgC,KAAK,CAAEiB,MAAOH,EAAMG,MAAOI,MAAO5J,KAAKkC,oBAG9DlC,KAAKwG,iBAIb/E,EAAAZ,UAAAyF,WAAA,WACI,GAAGtG,KAAKqG,WAAarG,KAAK+G,UAAW,CAC9B/G,KAAKoC,kBACJpC,KAAK8B,MAAQ,GAGd9B,KAAK6B,KACJ7B,KAAKyD,WAAWgB,KAAKzE,KAAK0E,0BAErB1E,KAAKqB,QACVrB,KAAK6J,UAAU7J,KAAKqB,OAEjBrB,KAAKyG,aACJzG,KAAK0G,WAIb,IAAI3F,EAAqB,CACrByI,MAAOxJ,KAAKqG,UACZuD,MAAO5J,KAAK+G,WAGhB/G,KAAKc,OAAO2D,KAAK1D,GACjBf,KAAK4B,aAAad,OAAOC,GACzBf,KAAK6G,0BAIbpF,EAAAZ,UAAAgJ,UAAA,SAAU/B,WAAVjD,EAAA7E,KACI,GAAI8H,GAA0B,IAAjBA,EAAM1B,OAAnB,CAIGpG,KAAK8J,WACJ9J,KAAK0D,aAAae,KAAK,CACnBgE,KAAMX,EACNiC,KAAM/J,KAAKmC,SACXqH,MAAOxJ,KAAKqG,UACZuD,MAAO5J,KAAK+G,YAIhBe,EAAMwB,MAAK,SAACU,EAAOC,GACf,IAAIC,EAAShB,EAAAA,YAAYC,iBAAiBa,EAAMvB,KAAM5D,EAAKwB,WACvD8D,EAASjB,EAAAA,YAAYC,iBAAiBc,EAAMxB,KAAM5D,EAAKwB,WACvD+D,EAAS,KAab,OAVIA,EADU,MAAVF,GAA4B,MAAVC,GACR,EACK,MAAVD,GAA4B,MAAVC,EACd,EACM,MAAVD,GAA4B,MAAVC,EACd,EACc,iBAAXD,GAAyC,iBAAXC,EACjCD,EAAOG,cAAcF,OAAQG,EAAW,CAACC,SAAS,IAEjDL,EAASC,GAAW,EAAKD,EAASC,EAAU,EAAI,EAEtDtF,EAAKkC,UAAYqD,SAIjC,IAAgB,IAAAI,EAAAtC,EAAAJ,GAAK2C,EAAAD,EAAAxJ,QAAAyJ,EAAArC,KAAAqC,EAAAD,EAAAxJ,OAAE,CAAnB,IAAIG,EAAIsJ,EAAApJ,MACRrB,KAAK6J,UAAU1I,EAAKqH,+GAI5B/G,EAAAZ,UAAA2F,aAAA,WACOxG,KAAKuG,gBACAvG,KAAK6B,KACL7B,KAAKyD,WAAWgB,KAAKzE,KAAK0E,0BAErB1E,KAAKqB,QACXrB,KAAK0K,kBAAkB1K,KAAKqB,OAExBrB,KAAKyG,aACJzG,KAAK0G,WAIb1G,KAAKc,OAAO2D,KAAK,CACbkG,cAAe3K,KAAKuG,gBAExBvG,KAAK4B,aAAad,OAAOd,KAAKuG,eAC9BvG,KAAK6G,0BAIbpF,EAAAZ,UAAA6J,kBAAA,SAAkB5C,WAAlBjD,EAAA7E,KACI,GAAI8H,GAA0B,IAAjBA,EAAM1B,OAAnB,CAIGpG,KAAK8J,WACJ9J,KAAK0D,aAAae,KAAK,CACnBgE,KAAMzI,KAAKqB,MACX0I,KAAM/J,KAAKmC,SACXoE,cAAevG,KAAKuG,gBAIxBvG,KAAKqB,MAAMiI,MAAK,SAACU,EAAOC,GACpB,OAAOpF,EAAK+F,eAAeZ,EAAOC,EAAOpF,EAAK0B,cAAe,UAIrE,IAAgB,IAAAsE,EAAA3C,EAAAJ,GAAKgD,EAAAD,EAAA7J,QAAA8J,EAAA1C,KAAA0C,EAAAD,EAAA7J,OAAE,CAAnB,IAAIG,EAAI2J,EAAAzJ,MACRrB,KAAK0K,kBAAkBvJ,EAAKqH,+GAIpC/G,EAAAZ,UAAA+J,eAAA,SAAeZ,EAAOC,EAAO1D,EAAevD,GACxC,IAAIkH,EAAShB,EAAAA,YAAYC,iBAAiBa,EAAMvB,KAAMlC,EAAcvD,GAAOwG,OACvEW,EAASjB,EAAAA,YAAYC,iBAAiBc,EAAMxB,KAAMlC,EAAcvD,GAAOwG,OACvEY,EAAS,KAQb,GANc,MAAVF,GAA4B,MAAVC,EAClBC,GAAU,EACK,MAAVF,GAA4B,MAAVC,EACvBC,EAAS,EACM,MAAVF,GAA4B,MAAVC,IACvBC,EAAS,GACQ,iBAAVF,GAAsBA,aAAkBjB,QAC/C,GAAIiB,EAAOG,eAAkBH,GAAUC,EACnC,OAAQ5D,EAAcvD,GAAO4G,MAAQM,EAAOG,cAAcF,OAAQG,EAAW,CAACC,SAAS,SAI3FH,EAAUF,EAASC,GAAW,EAAI,EAGtC,OAAID,GAAUC,EACF5D,EAAcH,OAAS,EAAC,EAAepG,KAAK4K,eAAeZ,EAAOC,EAAO1D,EAAevD,EAAQ,GAAM,EAG1GuD,EAAcvD,GAAO4G,MAAQQ,GAGzC3I,EAAAZ,UAAA8I,YAAA,SAAYH,GACR,GAAIxJ,KAAKuG,eAAiBvG,KAAKuG,cAAcH,OACzC,IAAK,IAAIsC,EAAI,EAAGA,EAAI1I,KAAKuG,cAAcH,OAAQsC,IAC3C,GAAI1I,KAAKuG,cAAcmC,GAAGc,QAAUA,EAChC,OAAOxJ,KAAKuG,cAAcmC,GAKtC,OAAO,MAGXjH,EAAAZ,UAAAkK,SAAA,SAASvB,GACL,GAAqB,WAAlBxJ,KAAKmC,SACJ,OAAQnC,KAAKqG,WAAarG,KAAKqG,YAAcmD,EAE5C,GAAqB,aAAlBxJ,KAAKmC,SAAyB,CAClC,IAAI6I,GAAS,EACb,GAAGhL,KAAKuG,cACJ,IAAI,IAAImC,EAAI,EAAGA,EAAI1I,KAAKuG,cAAcH,OAAQsC,IAC1C,GAAG1I,KAAKuG,cAAcmC,GAAGc,OAASA,EAAO,CACrCwB,GAAS,EACT,MAIZ,OAAOA,IAIfvJ,EAAAZ,UAAA6D,uBAAA,WACI,MAAO,CACH5C,MAAO9B,KAAK8B,MACZ6G,KAAM3I,KAAK2G,cAA4B,EAAZ3G,KAAK2I,KAAW3I,KAAK2I,KAChDtC,UAAWrG,KAAKqG,UAChBU,UAAW/G,KAAK+G,UAChB7D,QAASlD,KAAKkD,QACd+H,aAAcjL,KAAKkD,SAAWlD,KAAKkD,QAAgB,OAAIlD,KAAKkD,QAAgB,OAAE7B,MAAQ,KACtFkF,cAAevG,KAAKuG,gBAI5B9E,EAAAZ,UAAAqK,oBAAA,SAAoB7B,GAApB,IAAAxE,EAAA7E,KACIA,KAAK8B,OAASuH,EAAM8B,KAAO,GAAKnL,KAAK2I,KACrC3I,KAAK4G,sBAAwByC,EAAM+B,SAEnCpL,KAAK2B,KAAK0J,KAAI,WACPxG,EAAKyG,oBACJC,aAAa1G,EAAKyG,oBAGtBzG,EAAKyG,mBAAqBE,YAAW,WACjC3G,EAAKpB,WAAWgB,KAAKI,EAAKH,4BAC3BG,EAAKjC,wBAIhBnB,EAAAZ,UAAA4K,QAAA,WACI,IAAIhD,EAAOzI,KAAK4H,eAAe5H,KAAKqB,MACpC,OAAe,MAARoH,GAA+B,GAAfA,EAAKrC,QAGhC3E,EAAAZ,UAAA6K,oBAAA,WACI,OAAO1L,KAAK0B,GAAGiK,cAAcnD,SAAS,IAG1C/G,EAAAZ,UAAA+K,oBAAA,SAAoBvC,GAChB,IAAIwC,EAAgBC,EAAAA,WAAWC,UAAU/L,KAAKgM,mBAAmBL,eAAeM,KAChFjM,KAAKkM,mBAAsB7C,EAAM8C,MAAQN,EAAgB7L,KAAKgM,mBAAmBL,cAAcS,WAC/F/C,EAAMgD,kBAGV5K,EAAAZ,UAAAyL,eAAA,SAAejD,GACX,IAAIwC,EAAgBC,EAAAA,WAAWC,UAAU/L,KAAKgM,mBAAmBL,eAAeM,KAChFH,EAAAA,WAAWS,SAASvM,KAAKgM,mBAAmBL,cAAe,wBAC3D3L,KAAKwM,sBAAsBb,cAAcc,MAAMC,OAAS1M,KAAKgM,mBAAmBL,cAAcgB,aAAe,KAC7G3M,KAAKwM,sBAAsBb,cAAcc,MAAMG,IAAM,MACrD5M,KAAKwM,sBAAsBb,cAAcc,MAAMR,KAAQ5C,EAAM8C,MAAQN,EAAgB7L,KAAKgM,mBAAmBL,cAAcS,WAAc,KAEzIpM,KAAKwM,sBAAsBb,cAAcc,MAAMI,QAAU,SAG7DpL,EAAAZ,UAAAiM,kBAAA,SAAkBzD,EAAO0D,GACrB,IAAIC,EAAQhN,KAAKwM,sBAAsBb,cAAcsB,WAAajN,KAAKkM,mBACnEgB,EAAcH,EAAOI,YACrBC,EAAiBF,EAAcF,EAC/BK,EAAWN,EAAON,MAAMY,UAAY,GAExC,GAAIH,EAAcF,EAAQM,SAASD,GAAW,CAC1C,GAA8B,QAA1BrN,KAAK8C,iBAA4B,CAEjC,IADA,IAAIyK,EAAaR,EAAOS,oBAChBD,EAAWE,cACfF,EAAaA,EAAWC,mBAG5B,GAAID,EAAY,CACZ,IAAIG,EAAkBH,EAAWJ,YAAcH,EAC3CW,EAAqBJ,EAAWd,MAAMY,UAAY,GAEtD,GAAID,EAAiB,IAAMM,EAAkBJ,SAASK,GAClD,GAAI3N,KAAK4N,WAAY,CACjB,IAAIC,EAAiB7N,KAAK8N,yBAAyBf,GAC/CgB,EAAsBjC,EAAAA,WAAWkC,WAAWH,EAAgB,4CAC5DI,EAAwBnC,EAAAA,WAAWkC,WAAWH,EAAgB,8CAC9DK,EAAwBpC,EAAAA,WAAWkC,WAAWH,EAAgB,8CAC9DM,EAAoBrC,EAAAA,WAAW9I,MAAM+J,GAEzC/M,KAAKoO,eAAeH,EAAuBE,EAAmBf,EAAgBM,GAC9E1N,KAAKoO,eAAeL,EAAqBI,EAAmBf,EAAgBM,GAC5E1N,KAAKoO,eAAeF,EAAuBC,EAAmBf,EAAgBM,QAG9EX,EAAON,MAAM4B,MAAQjB,EAAiB,KAClCG,IACAA,EAAWd,MAAM4B,MAAQX,EAAkB,YAM1D,GAA8B,WAA1B1N,KAAK8C,iBACV,GAAI9C,KAAK4N,WAAY,CACbC,EAAiB7N,KAAK8N,yBAAyBf,GAC/CgB,EAAsBjC,EAAAA,WAAWkC,WAAWH,EAAgB,4CAC5DI,EAAwBnC,EAAAA,WAAWkC,WAAWH,EAAgB,8CAC9DK,EAAwBpC,EAAAA,WAAWkC,WAAWH,EAAgB,8CAClEE,EAAoBtB,MAAM4B,MAAQN,EAAoBZ,YAAcH,EAAQ,KAC5EiB,EAAsBxB,MAAM4B,MAAQJ,EAAsBd,YAAcH,EAAQ,KAC7EkB,IACCA,EAAsBzB,MAAM4B,MAAQH,EAAsBf,YAAcH,EAAQ,MAEhFmB,EAAoBrC,EAAAA,WAAW9I,MAAM+J,GAEzC/M,KAAKoO,eAAeH,EAAuBE,EAAmBf,EAAgB,MAC9EpN,KAAKoO,eAAeL,EAAqBI,EAAmBf,EAAgB,MAC5EpN,KAAKoO,eAAeF,EAAuBC,EAAmBf,EAAgB,UAE7E,CACDpN,KAAKsO,eAAe3C,cAAcc,MAAM4B,MAAQrO,KAAKsO,eAAe3C,cAAcwB,YAAcH,EAAQ,KACxGD,EAAON,MAAM4B,MAAQjB,EAAiB,KACtC,IAAImB,EAAiBvO,KAAKsO,eAAe3C,cAAcc,MAAM4B,MAC7DrO,KAAKgM,mBAAmBL,cAAcc,MAAM4B,MAAQE,EAAiB,KAI7EvO,KAAK2D,YAAYc,KAAK,CAClB+J,QAASzB,EACTC,MAAOA,IAIfhN,KAAKwM,sBAAsBb,cAAcc,MAAMI,QAAU,OACzDf,EAAAA,WAAW2C,YAAYzO,KAAKgM,mBAAmBL,cAAe,yBAGlElK,EAAAZ,UAAAiN,yBAAA,SAAyBf,GACrB,GAAIA,EAAQ,CAER,IADA,IAAI2B,EAAS3B,EAAO4B,cACbD,IAAW5C,EAAAA,WAAW8C,SAASF,EAAQ,iCAC1CA,EAASA,EAAOC,cAGpB,OAAOD,EAGP,OAAO,MAIfjN,EAAAZ,UAAAuN,eAAA,SAAeS,EAAOV,EAAmBf,EAAgBM,GACrD,GAAGmB,EAAO,CACN,IAAIC,EAA0C,aAA/BD,EAAMrG,SAAS,GAAGuG,SAA0BF,EAAMrG,SAAS,GAAK,KAE/E,IAAGsG,EAUC,KAAM,oEATN,IAAIE,EAAMF,EAAStG,SAAS2F,GACxBc,EAAUD,EAAIxB,mBAClBwB,EAAIvC,MAAM4B,MAAQjB,EAAiB,KAE/B6B,GAAWvB,IACXuB,EAAQxC,MAAM4B,MAAQX,EAAkB,QASxDjM,EAAAZ,UAAAqO,kBAAA,SAAkB7F,EAAO8F,GACrBnP,KAAKoP,iBAAmBtD,EAAAA,WAAWuD,2BAA2BrP,KAAKsP,4BAA4B3D,eAC/F3L,KAAKuP,kBAAoBzD,EAAAA,WAAW0D,4BAA4BxP,KAAKyP,8BAA8B9D,eACnG3L,KAAK0P,cAAgBP,EACrB9F,EAAMsG,aAAaC,QAAQ,OAAQ,MAGvCnO,EAAAZ,UAAAgP,kBAAA,SAAkBxG,EAAOyG,GACrB,GAAI9P,KAAK+P,oBAAsB/P,KAAK0P,eAAiBI,EAAY,CAC7DzG,EAAMgD,iBACN,IAAI2D,EAAkBlE,EAAAA,WAAWC,UAAU/L,KAAKgM,mBAAmBL,eAC/DsE,EAAmBnE,EAAAA,WAAWC,UAAU+D,GAE5C,GAAI9P,KAAK0P,eAAiBI,EAAY,CAClC,IAAII,EAAaD,EAAiBhE,KAAO+D,EAAgB/D,KAErDkE,GADYH,EAAgBpD,IAAMqD,EAAiBrD,IACpCqD,EAAiBhE,KAAO6D,EAAW3C,YAAc,GAEpEnN,KAAKsP,4BAA4B3D,cAAcc,MAAMG,IAAMqD,EAAiBrD,IAAMoD,EAAgBpD,KAAO5M,KAAKuP,kBAAoB,GAAK,KACvIvP,KAAKyP,8BAA8B9D,cAAcc,MAAMG,IAAMqD,EAAiBrD,IAAMoD,EAAgBpD,IAAMkD,EAAWnD,aAAe,KAEhItD,EAAM8C,MAAQgE,GACdnQ,KAAKsP,4BAA4B3D,cAAcc,MAAMR,KAAQiE,EAAaJ,EAAW3C,YAAciD,KAAKC,KAAKrQ,KAAKoP,iBAAmB,GAAM,KAC3IpP,KAAKyP,8BAA8B9D,cAAcc,MAAMR,KAAQiE,EAAaJ,EAAW3C,YAAciD,KAAKC,KAAKrQ,KAAKoP,iBAAmB,GAAM,KAC7IpP,KAAKsQ,aAAe,IAGpBtQ,KAAKsP,4BAA4B3D,cAAcc,MAAMR,KAAQiE,EAAaE,KAAKC,KAAKrQ,KAAKoP,iBAAmB,GAAM,KAClHpP,KAAKyP,8BAA8B9D,cAAcc,MAAMR,KAAQiE,EAAaE,KAAKC,KAAKrQ,KAAKoP,iBAAmB,GAAM,KACpHpP,KAAKsQ,cAAgB,GAGzBtQ,KAAKsP,4BAA4B3D,cAAcc,MAAMI,QAAU,QAC/D7M,KAAKyP,8BAA8B9D,cAAcc,MAAMI,QAAU,aAGjExD,EAAMsG,aAAaY,WAAa,SAK5C9O,EAAAZ,UAAA2P,kBAAA,SAAkBnH,GACVrJ,KAAK+P,oBAAsB/P,KAAK0P,gBAChCrG,EAAMgD,iBACNrM,KAAKsP,4BAA4B3D,cAAcc,MAAMI,QAAU,OAC/D7M,KAAKyP,8BAA8B9D,cAAcc,MAAMI,QAAU,SAIzEpL,EAAAZ,UAAA4P,aAAA,SAAapH,EAAOqH,GAEhB,GADArH,EAAMgD,iBACFrM,KAAK0P,cAAe,CACpB,IAAIiB,EAAY7E,EAAAA,WAAW8E,iBAAiB5Q,KAAK0P,cAAe,uBAC5DmB,EAAY/E,EAAAA,WAAW8E,iBAAiBF,EAAY,uBACpDI,EAAaH,GAAaE,EAC1BC,IAAeD,EAAYF,GAAa,IAA4B,IAAvB3Q,KAAKsQ,cAAyBK,EAAYE,GAAa,GAA2B,IAAtB7Q,KAAKsQ,gBAC9GQ,GAAY,GAGZA,GAAeD,EAAYF,GAAmC,IAAtB3Q,KAAKsQ,eAC7CO,GAAwB,GAGxBC,GAAeD,EAAYF,IAAoC,IAAvB3Q,KAAKsQ,eAC7CO,GAAwB,GAGxBC,IACA5H,EAAAA,YAAY6H,aAAa/Q,KAAKgR,QAASL,EAAWE,GAElD7Q,KAAK4D,aAAaa,KAAK,CACnBkM,UAAWA,EACXE,UAAWA,EACXG,QAAShR,KAAKgR,WAItBhR,KAAKsP,4BAA4B3D,cAAcc,MAAMI,QAAU,OAC/D7M,KAAKyP,8BAA8B9D,cAAcc,MAAMI,QAAU,OACjE7M,KAAK0P,cAAcuB,WAAY,EAC/BjR,KAAK0P,cAAgB,KACrB1P,KAAKsQ,aAAe,OAI5B7O,EAAAZ,UAAAqQ,eAAA,SAAe7H,GACX,IAAI8H,EAA4B9H,EAAME,cAAc6H,OAAQrC,SAC5D,GAAkB,SAAdoC,GAAuC,UAAdA,GAAwC,KAAdA,IAAsBrF,EAAAA,WAAW8C,SAASvF,EAAME,cAAc6H,OAAQ,gBAA7H,CAIA,GAAGpR,KAAKqR,cAAe,CACnBrR,KAAKmH,mCAAoC,EACzC,IAAIkB,EAAUgB,EAAMhB,QAChBiJ,EAAWtR,KAAKuR,WAAWlJ,EAAQlH,MACnCqQ,GAAgBxR,KAAKyR,YAAqBzR,KAAK0R,iBAC/CC,EAAe3R,KAAK4I,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiBd,EAAQlH,KAAKsH,KAAMzI,KAAK4I,UAAY,KAE1G,GAAG4I,EAAe,CACd,IAAI/H,EAAUJ,EAAME,cAAcE,SAASJ,EAAME,cAAcG,QAE/D,GAAG4H,GAAY7H,EAAS,CACpB,GAAGzJ,KAAK4R,wBACJ5R,KAAKkH,WAAa,KAClBlH,KAAKuE,cAAgB,GACrBvE,KAAKqC,gBAAgBoC,KAAK,UAEzB,CACD,IAAIoN,EAAiB7R,KAAK8R,qBAAqBzJ,EAAQlH,MACvDnB,KAAKkH,WAAalH,KAAKiH,UAAU8K,QAAO,SAACxK,EAAImB,GAAM,OAAAA,GAAKmJ,KACxD7R,KAAKqC,gBAAgBoC,KAAKzE,KAAKiH,WAC5B0K,UACQ3R,KAAKuE,cAAcoN,GAIlC3R,KAAK8D,eAAeW,KAAK,CAAC8E,cAAeF,EAAME,cAAepI,KAAMkH,EAAQlH,KAAM6Q,KAAM,aAGrFhS,KAAK4R,yBACJ5R,KAAKkH,WAAamB,EAAQlH,KAC1BnB,KAAKqC,gBAAgBoC,KAAK4D,EAAQlH,MAC/BwQ,IACC3R,KAAKuE,cAAgB,GACrBvE,KAAKuE,cAAcoN,GAAgB,IAGnC3R,KAAKiS,4BACNxI,EACCzJ,KAAKkH,WAAalH,KAAKiH,WAAW,IAGlCjH,KAAKkH,WAAa,GAClBlH,KAAKuE,cAAgB,IAGzBvE,KAAKkH,WAAUgL,EAAOlS,KAAKiH,UAAS,CAAEoB,EAAQlH,OAC9CnB,KAAKqC,gBAAgBoC,KAAKzE,KAAKiH,WAC5B0K,IACC3R,KAAKuE,cAAcoN,GAAgB,IAI3C3R,KAAK6D,aAAaY,KAAK,CAAC8E,cAAeF,EAAME,cAAepI,KAAMkH,EAAQlH,KAAM6Q,KAAM,MAAOhP,MAAOqG,EAAM8I,gBAI9G,GAA2B,WAAvBnS,KAAKqR,cACDC,GACAtR,KAAKkH,WAAa,KAClBlH,KAAKuE,cAAgB,GACrBvE,KAAKqC,gBAAgBoC,KAAKzE,KAAKiH,WAC/BjH,KAAK8D,eAAeW,KAAK,CAAE8E,cAAeF,EAAME,cAAepI,KAAMkH,EAAQlH,KAAM6Q,KAAM,UAGzFhS,KAAKkH,WAAamB,EAAQlH,KAC1BnB,KAAKqC,gBAAgBoC,KAAKzE,KAAKiH,WAC/BjH,KAAK6D,aAAaY,KAAK,CAAE8E,cAAeF,EAAME,cAAepI,KAAMkH,EAAQlH,KAAM6Q,KAAM,MAAOhP,MAAOqG,EAAM8I,WACvGR,IACA3R,KAAKuE,cAAgB,GACrBvE,KAAKuE,cAAcoN,GAAgB,SAI1C,GAA2B,aAAvB3R,KAAKqR,cACV,GAAIC,EAAU,CACV,IAAIc,EAAiBpS,KAAK8R,qBAAqBzJ,EAAQlH,MACvDnB,KAAKkH,WAAalH,KAAKiH,UAAU8K,QAAO,SAACxK,EAAKmB,GAAM,OAAAA,GAAK0J,KACzDpS,KAAKqC,gBAAgBoC,KAAKzE,KAAKiH,WAC/BjH,KAAK8D,eAAeW,KAAK,CAAE8E,cAAeF,EAAME,cAAepI,KAAMkH,EAAQlH,KAAM6Q,KAAM,QACrFL,UACO3R,KAAKuE,cAAcoN,QAI9B3R,KAAKkH,WAAalH,KAAKiH,UAASiL,EAAOlS,KAAKiH,UAAS,CAAEoB,EAAQlH,OAAQ,CAACkH,EAAQlH,MAChFnB,KAAKqC,gBAAgBoC,KAAKzE,KAAKiH,WAC/BjH,KAAK6D,aAAaY,KAAK,CAAE8E,cAAeF,EAAME,cAAepI,KAAMkH,EAAQlH,KAAM6Q,KAAM,MAAOhP,MAAOqG,EAAM8I,WACvGR,IACA3R,KAAKuE,cAAcoN,GAAgB,GAMnD3R,KAAK4B,aAAaX,oBAGtBjB,KAAKyR,YAAa,IAGtBhQ,EAAAZ,UAAAwR,kBAAA,SAAkBhJ,GACdrJ,KAAKyR,YAAa,GAGtBhQ,EAAAZ,UAAAyR,oBAAA,SAAoBjJ,GAChB,GAAIrJ,KAAKuS,YAAa,CAClB,IAAMpR,EAAOkI,EAAMhB,QAAQlH,KAE3B,GAAsC,aAAlCnB,KAAKwC,yBACLxC,KAAKwS,qBAAuBrR,EAC5BnB,KAAKuC,2BAA2BkC,KAAKtD,GACrCnB,KAAK+D,oBAAoBU,KAAK,CAAC8E,cAAeF,EAAME,cAAepI,KAAMA,IACzEnB,KAAKuS,YAAYE,KAAKpJ,EAAME,eAC5BvJ,KAAK4B,aAAaV,cAAcC,QAE/B,GAAsC,UAAlCnB,KAAKwC,yBAAsC,CAChDxC,KAAKmH,mCAAoC,EACzC,IAAImK,EAAWtR,KAAKuR,WAAWpQ,GAC3BwQ,EAAe3R,KAAK4I,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiBhI,EAAKsH,KAAMzI,KAAK4I,UAAY,KAE7F0I,IACGtR,KAAK4R,yBACL5R,KAAKiH,UAAY9F,EACjBnB,KAAKqC,gBAAgBoC,KAAKtD,IAErBnB,KAAKiS,4BACVjS,KAAKiH,UAAY,CAAC9F,GAClBnB,KAAKqC,gBAAgBoC,KAAKzE,KAAKiH,YAG/B0K,IACA3R,KAAKuE,cAAcoN,GAAgB,IAI3C3R,KAAKuS,YAAYE,KAAKpJ,EAAME,eAC5BvJ,KAAK+D,oBAAoBU,KAAK,CAAC8E,cAAeF,EAAME,cAAepI,KAAMA,OAKrFM,EAAAZ,UAAA6R,uBAAA,SAAuBrJ,GACnBrJ,KAAKiH,UAAYjH,KAAKiH,WAAW,GACjCjH,KAAKmH,mCAAoC,EACzC,IAAIhG,EAAOkI,EAAMhB,QAAQlH,KACVnB,KAAKuR,WAAWpQ,IAG3BnB,KAAK2S,uBAAuBxR,GAAM,GAC/BkI,EAAMhB,QAAQR,QACb7H,KAAK4S,qBAAqBzR,EAAK0G,QAAQ,GAE3C7H,KAAKqC,gBAAgBoC,KAAKzE,KAAKiH,WAC/BjH,KAAK8D,eAAeW,KAAK,CAAC8E,cAAeF,EAAOlI,KAAMA,MAGtDnB,KAAK2S,uBAAuBxR,GAAM,GAC9BkI,EAAMhB,QAAQR,QACd7H,KAAK4S,qBAAqBzR,EAAK0G,QAAQ,GAE3C7H,KAAKqC,gBAAgBoC,KAAKzE,KAAKiH,WAC/BjH,KAAK6D,aAAaY,KAAK,CAAC8E,cAAeF,EAAOlI,KAAMA,KAGxDnB,KAAK4B,aAAaX,qBAGtBQ,EAAAZ,UAAAgS,wBAAA,SAAwBxJ,EAAcyJ,WAC9BrK,EAAOzI,KAAK4H,eAAiB5H,KAAKqB,MAEtC,GADArB,KAAKkH,WAAa4L,GAASrK,EAAOA,EAAKsK,QAAU,GAC7CD,GACA,GAAIrK,GAAQA,EAAKrC,WACb,IAAiB,IAAA4M,EAAA9K,EAAAO,GAAIwK,EAAAD,EAAAhS,QAAAiS,EAAA7K,KAAA6K,EAAAD,EAAAhS,OAAE,CAAlB,IAAIG,EAAI8R,EAAA5R,MACTrB,KAAK2S,uBAAuBxR,GAAM,2GAK1CnB,KAAKkH,WAAa,GAClBlH,KAAKuE,cAAgB,GAGzBvE,KAAKmH,mCAAoC,EACzCnH,KAAKqC,gBAAgBoC,KAAKzE,KAAKkH,YAC/BlH,KAAK4B,aAAaX,oBAClBjB,KAAKgE,uBAAuBS,KAAK,CAAC8E,cAAeF,EAAO6J,QAASJ,KAGrErR,EAAAZ,UAAA+R,qBAAA,SAAqBzR,EAAgBgS,WACjC,GAAIhS,EAAKqH,UAAYrH,EAAKqH,SAASpC,OAAQ,CACvC,IAAIgN,EAA6B,EAC7BC,GAAgC,EAChC1B,EAAe3R,KAAK4I,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiBhI,EAAKsH,KAAMzI,KAAK4I,UAAY,SAElG,IAAkB,IAAAG,EAAAb,EAAA/G,EAAKqH,UAAQQ,EAAAD,EAAA/H,QAAAgI,EAAAZ,KAAAY,EAAAD,EAAA/H,OAAE,CAA5B,IAAIsS,EAAKtK,EAAA3H,MACNrB,KAAKuR,WAAW+B,GACpBF,IACSE,EAAMC,kBACXF,GAAuB,qGAG/B,GAAIF,GAAUC,GAAsBjS,EAAKqH,SAASpC,OAC9CpG,KAAKkH,WAAUgL,EAAQlS,KAAKiH,WAAW,GAAE,CAAE9F,IAC3CA,EAAKoS,iBAAkB,EACnB5B,IACA3R,KAAKuE,cAAcoN,GAAgB,OAGtC,CACD,IAAKwB,EAAQ,CACT,IAAIK,EAAQxT,KAAK8R,qBAAqB3Q,GAClCqS,GAAS,IACTxT,KAAKkH,WAAclH,KAAKiH,UAAU8K,QAAO,SAACxK,EAAImB,GAAM,OAAAA,GAAG8K,KAEnD7B,UACO3R,KAAKuE,cAAcoN,IAKlC0B,GAAwBD,EAAqB,GAAKA,GAAsBjS,EAAKqH,SAASpC,OACtFjF,EAAKoS,iBAAkB,EAEvBpS,EAAKoS,iBAAkB,GAInC,IAAI1L,EAAS1G,EAAK0G,OACdA,GACA7H,KAAK4S,qBAAqB/K,EAAQsL,IAI1C1R,EAAAZ,UAAA8R,uBAAA,SAAuBxR,EAAgBgS,WAC/BnQ,EAAQhD,KAAK8R,qBAAqB3Q,GAClCwQ,EAAe3R,KAAK4I,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiBhI,EAAKsH,KAAMzI,KAAK4I,UAAY,KAiBlG,GAfIuK,IAAoB,GAAVnQ,GACVhD,KAAKkH,WAAUgL,EAAQlS,KAAKiH,WAAW,GAAE,CAAC9F,IACtCwQ,IACA3R,KAAKuE,cAAcoN,GAAgB,KAGjCwB,GAAUnQ,GAAS,IACzBhD,KAAKkH,WAAclH,KAAKiH,UAAU8K,QAAO,SAACxK,EAAImB,GAAM,OAAAA,GAAG1F,KACnD2O,UACO3R,KAAKuE,cAAcoN,IAIlCxQ,EAAKoS,iBAAkB,EAEnBpS,EAAKqH,UAAYrH,EAAKqH,SAASpC,WAC/B,IAAkB,IAAA2C,EAAAb,EAAA/G,EAAKqH,UAAQQ,EAAAD,EAAA/H,QAAAgI,EAAAZ,KAAAY,EAAAD,EAAA/H,OAAE,CAA5B,IAAIsS,EAAKtK,EAAA3H,MACVrB,KAAK2S,uBAAuBW,EAAOH,uGAK/C1R,EAAAZ,UAAA0Q,WAAA,SAAWpQ,GACP,SAAIA,IAAQnB,KAAKiH,aACTjH,KAAK4I,aACgF0B,IAA9EtK,KAAKuE,cAAc2E,EAAAA,YAAYC,iBAAiBhI,EAAKsH,KAAMzI,KAAK4I,UAGnE5I,KAAKiH,qBAAqB4B,MACnB7I,KAAK8R,qBAAqB3Q,IAAS,EAEnCnB,KAAKyT,OAAOtS,EAAMnB,KAAKiH,aAO9CxF,EAAAZ,UAAAiR,qBAAA,SAAqB3Q,GACjB,IAAI6B,GAAiB,EACrB,GAAIhD,KAAKiH,WAAajH,KAAKiH,UAAUb,OACjC,IAAK,IAAIsC,EAAI,EAAGA,EAAI1I,KAAKiH,UAAUb,OAAQsC,IACvC,GAAI1I,KAAKyT,OAAOtS,EAAMnB,KAAKiH,UAAUyB,IAAK,CACtC1F,EAAQ0F,EACR,MAKZ,OAAO1F,GAGXvB,EAAAZ,UAAA+Q,sBAAA,WACI,MAA8B,WAAvB5R,KAAKqR,eAGhB5P,EAAAZ,UAAAoR,wBAAA,WACI,MAA8B,aAAvBjS,KAAKqR,eAGhB5P,EAAAZ,UAAA4S,OAAA,SAAOzJ,EAAOC,GACV,MAAmC,WAA5BjK,KAAKyC,mBAAmCuH,IAAUC,EAASf,EAAAA,YAAYuK,OAAOzJ,EAAMvB,KAAMwB,EAAMxB,KAAMzI,KAAK4I,UAGtHnH,EAAAZ,UAAAkR,OAAA,SAAO1Q,EAAOmI,EAAOkK,GAArB,IAAA7O,EAAA7E,KACOA,KAAK2T,eACJpI,aAAavL,KAAK2T,eAGjB3T,KAAK4T,cAAcvS,GAEbrB,KAAKkD,QAAQsG,WACbxJ,KAAKkD,QAAQsG,GAFpBxJ,KAAKkD,QAAQsG,GAAS,CAAEnI,MAAOA,EAAOqS,UAAWA,GAKrD1T,KAAK2T,cAAgBnI,YAAW,WAC5B3G,EAAK6B,UACL7B,EAAK8O,cAAgB,OACtB3T,KAAKmD,cAGZ1B,EAAAZ,UAAAgT,aAAA,SAAaxS,EAAOqS,GAChB1T,KAAK+R,OAAO1Q,EAAO,SAAUqS,IAGjCjS,EAAAZ,UAAA+S,cAAA,SAAc7B,GACV,OAAIA,MAAAA,IACuB,iBAAXA,GAA+C,GAAxBA,EAAO+B,OAAO1N,QAAiB2L,aAAkBlJ,OAA0B,GAAjBkJ,EAAO3L,SAQ5G3E,EAAAZ,UAAA6F,QAAA,mBACI,GAAI1G,KAAK6B,KACL7B,KAAKyD,WAAWgB,KAAKzE,KAAK0E,8BAEzB,CACD,IAAK1E,KAAKqB,MACN,OAGJ,GAAIrB,KAAKyG,YAMJ,CACD,IAAIsN,OAAuB,EAC3B,GAAI/T,KAAKkD,QAAgB,OAAG,CACxB,IAAKlD,KAAKgR,UAAYhR,KAAKgU,mBACvB,MAAM,IAAIC,MAAM,kFAEhBF,EAA0B/T,KAAKgU,oBAAoBhU,KAAKgR,QAGhEhR,KAAK4H,cAAgB,GACrB,IAAMsM,EAAmC,WAApBlU,KAAKoD,WACtB+Q,GAAiB,MAErB,IAAiB,IAAApL,EAAAb,EAAAlI,KAAKqB,OAAK2H,EAAAD,EAAA/H,QAAAgI,EAAAZ,KAAAY,EAAAD,EAAA/H,OAAE,CAAxB,IAAIG,EAAI6H,EAAA3H,MACL+S,EAAQC,EAAA,GAAOlT,GACfmT,GAAa,EACbC,GAAc,EACdC,OAAiB,EAErB,IAAK,IAAIC,KAAQzU,KAAKkD,QAClB,GAAIlD,KAAKkD,QAAQwR,eAAeD,IAAkB,WAATA,EAAmB,CACxD,IAAIE,EAAa3U,KAAKkD,QAAQuR,GAC1BG,EAAcH,EACdI,EAAcF,EAAWtT,MACzByT,EAAkBH,EAAWjB,WAAa,aAQ9C,GANAc,EAAoB,CAACI,YAAWA,EAAEC,YAAWA,EAAEE,iBADxBC,EAAAA,YAAYF,GAC8BZ,aAAYA,KACxEA,GAAkBlU,KAAKiV,kBAAkBb,EAAUI,IAAsBxU,KAAKkV,gBAAgBd,EAAUI,MACvGN,GAAkBlU,KAAKkV,gBAAgBd,EAAUI,IAAsBxU,KAAKiV,kBAAkBb,EAAUI,MACtGF,GAAa,IAGhBA,EACD,MAKZ,GAAItU,KAAKkD,QAAgB,SAAMqR,GAAeR,EAC1C,IAAI,IAAIoB,EAAI,EAAGA,EAAIpB,EAAwB3N,OAAQ+O,IAAK,CACpD,IAAIC,EAAiBf,EAAA,GAAOD,GAI5BI,EAAoB,CAACI,YAHjBA,EAAcb,EAAwBoB,GAAG3L,OAAOuK,EAAwBoB,GAG1CN,YAF9BA,EAAc7U,KAAKkD,QAAgB,OAAE7B,MAEM0T,iBADxBC,EAAAA,YAAYhV,KAAKkD,QAAgB,OAAEwQ,WACOQ,aAAYA,IAExEA,IAAiBlU,KAAKiV,kBAAkBG,EAAmBZ,IAAsBxU,KAAKkV,gBAAgBE,EAAmBZ,MACxHN,IAAiBlU,KAAKkV,gBAAgBE,EAAmBZ,IAAsBxU,KAAKiV,kBAAkBG,EAAmBZ,OACvHD,GAAc,EACdH,EAAWgB,GAK3B,IAAIC,EAAUf,EACVtU,KAAKkD,QAAgB,SACrBmS,EAAUf,GAAcC,GAGxBc,GACArV,KAAK4H,cAAcW,KAAK6L,GAG5BD,EAAiBA,IAAmBG,GAAcC,GAAgBD,GAActU,KAAK4H,cAAcxB,OAAS,IAAQmO,GAA6C,IAA9BvU,KAAK4H,cAAcxB,yGAGrJ+N,IACDnU,KAAK4H,cAAgB,MAGrB5H,KAAKyH,YACLzH,KAAKmG,aAAenG,KAAK4H,cAAgB5H,KAAK4H,cAAcxB,OAASpG,KAAKqB,MAAQrB,KAAKqB,MAAM+E,OAAS,QA5E1GpG,KAAK4H,cAAgB,KACjB5H,KAAKyH,YACLzH,KAAKmG,aAAenG,KAAKqB,MAAQrB,KAAKqB,MAAM+E,OAAS,GA+EjEpG,KAAK8B,MAAQ,EAEb,IAAMwT,EAAgBtV,KAAK4H,eAAiB5H,KAAKqB,MAEjDrB,KAAKqD,SAASoB,KAAK,CACfvB,QAASlD,KAAKkD,QACdoS,cAAeA,IAGnBtV,KAAK4B,aAAaR,WAAWkU,GAC7BtV,KAAK6G,yBAGTpF,EAAAZ,UAAAoU,kBAAA,SAAkB9T,EAAMqT,WACpB,GAAIrT,EAAM,CACN,IAAIoU,GAAU,EACd,GAAIpU,EAAKqH,SAAU,CACf,IAAIgN,EAAUtD,EAAO/Q,EAAKqH,UAC1BrH,EAAKqH,SAAW,OAChB,IAAsB,IAAAiN,EAAAvN,EAAAsN,GAAUE,EAAAD,EAAAzU,QAAA0U,EAAAtN,KAAAsN,EAAAD,EAAAzU,OAAE,CAA7B,IAAI2U,EAASD,EAAArU,MACVuU,EAAavB,EAAA,GAAOsB,GACpB3V,KAAKkV,gBAAgBU,EAAepB,KACpCe,GAAU,EACVpU,EAAKqH,SAASD,KAAKqN,uGAK/B,GAAIL,EACA,OAAO,IAKnB9T,EAAAZ,UAAAqU,gBAAA,SAAgB/T,EAAM0U,OAACjB,EAAAiB,EAAAjB,YAAaC,EAAAgB,EAAAhB,YAAaE,EAAAc,EAAAd,iBAAkBb,EAAA2B,EAAA3B,aAC3DqB,GAAU,EAUd,OARIR,EADiB7L,EAAAA,YAAYC,iBAAiBhI,EAAKsH,KAAMmM,GACxBC,KACjCU,GAAU,KAGTA,GAAYrB,IAAiBlU,KAAK8V,WAAW3U,MAC9CoU,EAAUvV,KAAKiV,kBAAkB9T,EAAM,CAACyT,YAAWA,EAAEC,YAAWA,EAAEE,iBAAgBA,EAAEb,aAAYA,KAAMqB,GAGnGA,GAGX9T,EAAAZ,UAAAiV,WAAA,SAAW3U,GACP,OAAqB,IAAdA,EAAK4U,QAA2B5U,EAAKqH,UAAYrH,EAAKqH,SAASpC,SAG1E3E,EAAAZ,UAAA4F,UAAA,WACI,IAAIuP,GAAQ,EACZ,IAAK,IAAIvB,KAAQzU,KAAKkD,QAClB,GAAIlD,KAAKkD,QAAQwR,eAAeD,GAAO,CACnCuB,GAAQ,EACR,MAIR,OAAQA,GAGLvU,EAAAZ,UAAAoV,MAAP,WACIjW,KAAK8G,WAAa,KAClB9G,KAAKsE,WAAa,EAClBtE,KAAKgH,eAAiB,KACtBhH,KAAK4B,aAAad,OAAO,MAEzBd,KAAK4H,cAAgB,KACrB5H,KAAKkD,QAAU,GAEflD,KAAK8B,MAAQ,EAEV9B,KAAK6B,KACJ7B,KAAKyD,WAAWgB,KAAKzE,KAAK0E,0BAG1B1E,KAAKmG,aAAgBnG,KAAKoE,OAASpE,KAAKoE,OAAOgC,OAAS,GAIhE3E,EAAAZ,UAAAqV,kBAAA,SAAkBC,GACdnW,KAAKoW,YAAcD,EACnBnW,KAAKqW,4BAGT5U,EAAAZ,UAAAyV,mBAAA,WACI,OAAQtW,KAAKoW,aAAoF,IAArEtK,EAAAA,WAAWyK,KAAKvW,KAAKoW,YAAa,wBAAwBhQ,QAG1F3E,EAAAZ,UAAAwV,yBAAA,WAAA,IAAAxR,EAAA7E,KACSA,KAAKwW,uBACNxW,KAAKwW,qBAAuB,SAACnN,GACrBxE,EAAKuR,cAAgBvR,EAAK4R,kBAAoB5R,EAAKyR,uBACnDxK,EAAAA,WAAW2C,YAAY5J,EAAKuR,YAAa,mBACzCvR,EAAKuR,YAAc,KACnBvR,EAAK6R,8BAGT7R,EAAK4R,kBAAmB,GAG5BE,SAASC,iBAAiB,QAAS5W,KAAKwW,wBAIhD/U,EAAAZ,UAAA6V,2BAAA,WACQ1W,KAAKwW,uBACLG,SAASE,oBAAoB,QAAS7W,KAAKwW,sBAC3CxW,KAAKwW,qBAAuB,OAIpC/U,EAAAZ,UAAAiW,YAAA,WACI9W,KAAK0W,6BACL1W,KAAKoW,YAAc,KACnBpW,KAAK2E,YAAc,+CA7pCAoS,EAAAA,kBAAyBC,EAAAA,cAA6BjX,KAvRpEwB,EAAA,CAAR0V,EAAAA,uCAEQ1V,EAAA,CAAR0V,EAAAA,qCAEQ1V,EAAA,CAAR0V,EAAAA,0CAEQ1V,EAAA,CAAR0V,EAAAA,0CAEQ1V,EAAA,CAAR0V,EAAAA,oCAEQ1V,EAAA,CAAR0V,EAAAA,yCAEQ1V,EAAA,CAAR0V,EAAAA,oCAEQ1V,EAAA,CAAR0V,EAAAA,qCAEQ1V,EAAA,CAAR0V,EAAAA,yCAEQ1V,EAAA,CAAR0V,EAAAA,kDAEQ1V,EAAA,CAAR0V,EAAAA,mDAEQ1V,EAAA,CAAR0V,EAAAA,iDAEQ1V,EAAA,CAAR0V,EAAAA,yDAEQ1V,EAAA,CAAR0V,EAAAA,gDAEQ1V,EAAA,CAAR0V,EAAAA,wCAEQ1V,EAAA,CAAR0V,EAAAA,+CAEQ1V,EAAA,CAAR0V,EAAAA,0CAEQ1V,EAAA,CAAR0V,EAAAA,6CAES1V,EAAA,CAAT2V,EAAAA,gDAEQ3V,EAAA,CAAR0V,EAAAA,oDAES1V,EAAA,CAAT2V,EAAAA,2DAEQ3V,EAAA,CAAR0V,EAAAA,wDAEQ1V,EAAA,CAAR0V,EAAAA,uCAEQ1V,EAAA,CAAR0V,EAAAA,gDAEQ1V,EAAA,CAAR0V,EAAAA,kDAEQ1V,EAAA,CAAR0V,EAAAA,wCAEQ1V,EAAA,CAAR0V,EAAAA,uCAEQ1V,EAAA,CAAR0V,EAAAA,2CAEQ1V,EAAA,CAAR0V,EAAAA,0CAEQ1V,EAAA,CAAR0V,EAAAA,0CAEQ1V,EAAA,CAAR0V,EAAAA,4CAEQ1V,EAAA,CAAR0V,EAAAA,6CAEQ1V,EAAA,CAAR0V,EAAAA,kDAEQ1V,EAAA,CAAR0V,EAAAA,gDAEQ1V,EAAA,CAAR0V,EAAAA,2CAEQ1V,EAAA,CAAR0V,EAAAA,6CAEQ1V,EAAA,CAAR0V,EAAAA,gDAEQ1V,EAAA,CAAR0V,EAAAA,gDAEQ1V,EAAA,CAAR0V,EAAAA,kDAEQ1V,EAAA,CAAR0V,EAAAA,2CAEQ1V,EAAA,CAAR0V,EAAAA,0CAEQ1V,EAAA,CAAR0V,EAAAA,uCAEQ1V,EAAA,CAAR0V,EAAAA,kDAEQ1V,EAAA,CAAR0V,EAAAA,2CAEQ1V,EAAA,CAAR0V,EAAAA,0CAES1V,EAAA,CAAT2V,EAAAA,yCAES3V,EAAA,CAAT2V,EAAAA,6CAES3V,EAAA,CAAT2V,EAAAA,+CAES3V,EAAA,CAAT2V,EAAAA,uCAES3V,EAAA,CAAT2V,EAAAA,uCAES3V,EAAA,CAAT2V,EAAAA,2CAES3V,EAAA,CAAT2V,EAAAA,6CAES3V,EAAA,CAAT2V,EAAAA,4CAES3V,EAAA,CAAT2V,EAAAA,6CAES3V,EAAA,CAAT2V,EAAAA,6CAES3V,EAAA,CAAT2V,EAAAA,+CAES3V,EAAA,CAAT2V,EAAAA,oDAES3V,EAAA,CAAT2V,EAAAA,uDAES3V,EAAA,CAAT2V,EAAAA,2CAES3V,EAAA,CAAT2V,EAAAA,+CAES3V,EAAA,CAAT2V,EAAAA,6CAEyC3V,EAAA,CAAzC4V,EAAAA,UAAU,YAAa,CAAEC,QAAQ,8CAEY7V,EAAA,CAA7C4V,EAAAA,UAAU,eAAgB,CAAEC,QAAQ,iDAEe7V,EAAA,CAAnD4V,EAAAA,UAAU,qBAAsB,CAAEC,QAAQ,uDAEW7V,EAAA,CAArD4V,EAAAA,UAAU,uBAAwB,CAAEC,QAAQ,yDAEN7V,EAAA,CAAtC4V,EAAAA,UAAU,QAAS,CAAEC,QAAQ,0CAEE7V,EAAA,CAA/B8V,EAAAA,gBAAgBC,EAAAA,gDAoNR/V,EAAA,CAAR0V,EAAAA,mCAyDQ1V,EAAA,CAAR0V,EAAAA,0CAQQ1V,EAAA,CAAR0V,EAAAA,uCAQQ1V,EAAA,CAAR0V,EAAAA,uCAOQ1V,EAAA,CAAR0V,EAAAA,2CAQQ1V,EAAA,CAAR0V,EAAAA,uCAlbQxV,EAASF,EAAA,CAlDrBgW,EAAAA,UAAU,CACPC,SAAU,cACVtS,SAAU,60HA8CVuS,UAAW,CAAC1X,MAEH0B,mBA88CT,SAAAiW,EAAmBC,GAAA3X,KAAA2X,GAAAA,EACvB,gDAD2BlW,KAJEF,EAAA,CAAxB0V,EAAAA,MAAM,iDAE0B1V,EAAA,CAAhC0V,EAAAA,MAAM,0DAJES,EAAMnW,EAAA,CAblBgW,EAAAA,UAAU,CACPC,SAAU,mBACVtS,SAAU,6nBAWDwS,mBAwFT,SAAAE,EAAmBD,EAAsBjW,EAAuBC,GAAhE,IAAAkD,EAAA7E,KAAmBA,KAAA2X,GAAAA,EAAsB3X,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EAFhE3B,KAAA6X,aAAyB,GAGrB7X,KAAK8X,aAAe9X,KAAK2X,GAAG/V,aAAajB,gBAAgBoX,WAAU,WAC/DlT,EAAKlD,KAAKqW,mBAAkB,WACxBxM,YAAW,WACP3G,EAAKoT,iBACLpT,EAAKF,aAAc,EAEfE,EAAKqT,6BAA+BrT,EAAKqT,4BAA4BvM,gBACrE9G,EAAKqT,4BAA4BvM,cAAcc,MAAMI,QAAU,UAEpE,UAIP7M,KAAK2X,GAAGhR,gBACR3G,KAAKmY,yBAA2BnY,KAAK2X,GAAG/V,aAAahB,oBAAoBmX,WAAU,WAC/ElT,EAAKlD,KAAKqW,mBAAkB,WACxBxM,YAAW,WACP3G,EAAKuT,6BACN,WAKfpY,KAAK6X,aAAehP,MAAM7I,KAAK2X,GAAGhP,MAAM0P,KAAK,GAE7CrY,KAAK2E,aAAc,EAoN3B,OAjNa0C,OAAAC,eAAIsQ,EAAA/W,UAAA,eAAY,KAAhB,WACL,OAAOb,KAAKsY,mBAEhB,SAAiB/Q,GACbvH,KAAKsY,cAAgB/Q,EACrBvH,KAAKuY,mDAGTX,EAAA/W,UAAA2X,mBAAA,YACQxY,KAAK2E,aAAe3E,KAAK0B,GAAGiK,cAAc8B,eAC1CzN,KAAKiY,iBACLjY,KAAK2E,aAAc,IAI3BiT,EAAA/W,UAAA4X,gBAAA,WAKI,GAJAzY,KAAK0Y,aACL1Y,KAAKuY,kBACLvY,KAAKiY,iBAEDjY,KAAK2Y,OAgBL3Y,KAAK4Y,oBAAoBjN,cAAcc,MAAMoM,cAAgB/M,EAAAA,WAAWgN,0BAA4B,SAhBvF,EACT9Y,KAAK2X,GAAGoB,eAAiB/Y,KAAK2X,GAAG9R,qBACjCiG,EAAAA,WAAWS,SAASvM,KAAK0B,GAAGiK,cAAe,8BAG5C3L,KAAK2X,GAAGqB,cACPhZ,KAAK0B,GAAGiK,cAAcc,MAAMR,KAAOjM,KAAK2X,GAAGqB,YAC3ChZ,KAAK0B,GAAGiK,cAAcc,MAAM4B,MAAQ,eAAiBrO,KAAK2X,GAAGqB,YAAc,KAG/E,IAAIC,EAAajZ,KAAK0B,GAAGiK,cAAcuN,uBACnCD,IACAjZ,KAAKmZ,kBAAoBrN,EAAAA,WAAWkC,WAAWiL,EAAY,kCAOhEjZ,KAAK2X,GAAGhR,gBACP3G,KAAKoY,2BAEDpY,KAAKkY,6BAA+BlY,KAAKkY,4BAA4BvM,gBACrE3L,KAAKkY,4BAA4BvM,cAAcc,MAAMI,QAAU,WAK3E+K,EAAA/W,UAAA6X,WAAA,WAAA,IAAA7T,EAAA7E,KACIA,KAAK2B,KAAKqW,mBAAkB,WACHlM,EAAAA,WAAWgN,0BAE5BjU,EAAKuU,uBAAyBvU,EAAKuU,sBAAsBzN,gBACzD9G,EAAKwU,qBAAuBxU,EAAKyU,eAAeC,KAAK1U,GACrDA,EAAK2U,yBAAyB7N,cAAciL,iBAAiB,SAAU/R,EAAKwU,uBAG5ExU,EAAK4U,uBAAyB5U,EAAK4U,sBAAsB9N,gBACzD9G,EAAK6U,qBAAuB7U,EAAK8U,eAAeJ,KAAK1U,GACrDA,EAAK4U,sBAAsB9N,cAAciL,iBAAiB,SAAU/R,EAAK6U,uBAGzE7U,EAAK8T,SACL9T,EAAK+U,mBAAqB/U,EAAKgV,aAAaN,KAAK1U,GACjDA,EAAK+T,oBAAoBjN,cAAciL,iBAAiB,SAAU/R,EAAK+U,yBAKnFhC,EAAA/W,UAAAiZ,aAAA,WACQ9Z,KAAKoZ,uBAAyBpZ,KAAKoZ,sBAAsBzN,eACzD3L,KAAKwZ,yBAAyB7N,cAAckL,oBAAoB,SAAU7W,KAAKqZ,sBAG/ErZ,KAAKyZ,uBAAyBzZ,KAAKyZ,sBAAsB9N,eACzD3L,KAAKyZ,sBAAsB9N,cAAckL,oBAAoB,SAAU7W,KAAK0Z,sBAGhF1Z,KAAK4Y,oBAAoBjN,cAAciL,iBAAiB,SAAU5W,KAAK4Z,qBAG3EhC,EAAA/W,UAAAyY,eAAA,SAAejQ,GACXrJ,KAAKoZ,sBAAsBzN,cAAcS,WAAa,GAG1DwL,EAAA/W,UAAA8Y,eAAA,SAAetQ,GACXrJ,KAAKyZ,sBAAsB9N,cAAcS,WAAa,GAG1DwL,EAAA/W,UAAAgZ,aAAA,SAAaxQ,GAAb,IAAAxE,EAAA7E,KAaI,GAZIA,KAAKoZ,uBAAyBpZ,KAAKoZ,sBAAsBzN,gBACzD3L,KAAKwZ,yBAAyB7N,cAAcc,MAAMsN,YAAc,EAAI/Z,KAAK4Y,oBAAoBjN,cAAcS,WAAa,MAGxHpM,KAAKyZ,uBAAyBzZ,KAAKyZ,sBAAsB9N,gBACzD3L,KAAKga,yBAAyBrO,cAAcc,MAAMsN,YAAc,EAAI/Z,KAAK4Y,oBAAoBjN,cAAcS,WAAa,MAGxHpM,KAAKmZ,oBACLnZ,KAAKmZ,kBAAkBc,UAAYja,KAAK4Y,oBAAoBjN,cAAcsO,WAG1Eja,KAAK2X,GAAGhR,cAAe,CACvB,IAAIuT,EAAWpO,EAAAA,WAAWqO,eAAena,KAAK4Y,oBAAoBjN,eAC9DyO,EAActO,EAAAA,WAAWqO,eAAena,KAAKqa,qBAAqB1O,eAClE2O,EAAata,KAAK2X,GAAG9U,iBAAmB7C,KAAK2X,GAAGhP,KAEhD4R,EADqBzO,EAAAA,WAAWqO,eAAena,KAAKwa,yBAAyB7O,eAC3C2O,GAAa,EAC/CG,EAAgBza,KAAKqa,qBAAqB1O,cAAcc,MAAMG,KAAK,IAEvE,GAAK5M,KAAK4Y,oBAAoBjN,cAAcsO,UAAYC,EAAWQ,WAAWD,GAAiBL,GAAiBpa,KAAK4Y,oBAAoBjN,cAAcsO,UAAYS,WAAWD,GAAiB,CACvLza,KAAKkY,6BAA+BlY,KAAKkY,4BAA4BvM,gBACrE3L,KAAKkY,4BAA4BvM,cAAcc,MAAMI,QAAU,QAC/D7M,KAAKkY,4BAA4BvM,cAAcc,MAAMG,IAAM5M,KAAK4Y,oBAAoBjN,cAAcsO,UAAY,MAGlH,IAAIU,EAAOvK,KAAKwK,MAAO5a,KAAK4Y,oBAAoBjN,cAAcsO,UAAYM,EAAcva,KAAK4Y,oBAAoBjN,cAA0B,cAAK,EAChJ3L,KAAK2X,GAAGzM,oBAAoB,CACxBC,KAAMwP,EACNvP,SAAU,WACFvG,EAAKqT,6BAA+BrT,EAAKqT,4BAA4BvM,gBACrE9G,EAAKqT,4BAA4BvM,cAAcc,MAAMI,QAAU,QAGnEhI,EAAKwV,qBAAqB1O,cAAcc,MAAMG,KAAQ+N,EAAO,GAAKL,EAAc,KAE5EzV,EAAKsU,oBACUtU,EAAKsU,kBAAkB3Q,SAAS,GAAIiE,MAAMG,IAAM/H,EAAKwV,qBAAqB1O,cAAcc,MAAMG,WAQrIgL,EAAA/W,UAAA0X,gBAAA,WACI,GAAGvY,KAAK6a,cAAgB7a,KAAK4Y,qBAAuB5Y,KAAK4Y,oBAAoBjN,cACzE,IAAuC,IAApC3L,KAAK6a,aAAaC,QAAQ,KAAa,CACtC,IAAIC,OAAc,EAClB/a,KAAK4Y,oBAAoBjN,cAAcc,MAAMuO,WAAa,SAC1Dhb,KAAK4Y,oBAAoBjN,cAAcc,MAAMC,OAAS,QACtD,IAAIuO,EAAkBnP,EAAAA,WAAWqO,eAAena,KAAK2X,GAAGjW,GAAGiK,cAAcnD,SAAS,IAElF,GAAIxI,KAAK6a,aAAaK,SAAS,QAAS,CACpC,IAAIC,EAAgB7N,SAAStN,KAAK6a,aAAa9H,MAAM/S,KAAK6a,aAAaC,QAAQ,KAAO,EAAG9a,KAAK6a,aAAaC,QAAQ,OAC/GM,EAAY9N,SAAStN,KAAK6a,aAAa9H,MAAM/S,KAAK6a,aAAaC,QAAQ,KAAO,EAAG9a,KAAK6a,aAAaC,QAAQ,OAC/GC,EAAkBjP,EAAAA,WAAWqO,eAAena,KAAK2X,GAAGjW,GAAGiK,cAAcgD,eAAiBwM,EAAgB,IAAOC,OAG7GL,EAAiBjP,EAAAA,WAAWqO,eAAena,KAAK2X,GAAGjW,GAAGiK,cAAcgD,eAAiBrB,SAAStN,KAAK6a,cAAgB,IAGvH,IACIQ,EAAoBN,GADLE,EAAkB,KAGlCjb,KAAK2Y,SACJ0C,GAAoBvP,EAAAA,WAAWgN,2BAGnC9Y,KAAK4Y,oBAAoBjN,cAAcc,MAAMC,OAAS,OACtD1M,KAAK4Y,oBAAoBjN,cAAcc,MAAM6O,UAAYD,EAAmB,KAC5Erb,KAAK4Y,oBAAoBjN,cAAcc,MAAMuO,WAAa,eAGvDhb,KAAK2Y,OACJ3Y,KAAK4Y,oBAAoBjN,cAAcc,MAAM6O,UAAahO,SAAStN,KAAK6a,cAAgB/O,EAAAA,WAAWgN,0BAA6B,KAEhI9Y,KAAK4Y,oBAAoBjN,cAAcc,MAAM6O,UAAYtb,KAAK6a,cAK9EjD,EAAA/W,UAAAuX,yBAAA,WACOpY,KAAKwa,yBAAyB7O,gBAC7B3L,KAAKwa,yBAAyB7O,cAAcc,MAAMC,OAAS1M,KAAK2X,GAAGxR,aAAenG,KAAK2X,GAAG9U,iBAAmB,OAIrH+U,EAAA/W,UAAA0a,oBAAA,WACI,OAAOzP,EAAAA,WAAWqO,eAAena,KAAKqa,qBAAqB1O,eAAiBG,EAAAA,WAAWqO,eAAena,KAAK4Y,oBAAoBjN,gBAGnIiM,EAAA/W,UAAAoX,eAAA,WACI,IAAIjY,KAAK2Y,OAAQ,CACb,IAAI6C,EAAiBxb,KAAKub,sBAAwBzP,EAAAA,WAAWgN,0BAA4B,EACzF9Y,KAAKwZ,yBAAyB7N,cAAcc,MAAMgP,YAAcD,EAAiB,KAE9Exb,KAAKga,0BAA4Bha,KAAKga,yBAAyBrO,gBAC9D3L,KAAKga,yBAAyBrO,cAAcc,MAAMgP,YAAcD,EAAiB,MAGzFxb,KAAK2E,aAAc,GAGvBiT,EAAA/W,UAAAiW,YAAA,WACI9W,KAAK8Z,eAEL9Z,KAAKmZ,kBAAoB,KAEtBnZ,KAAK8X,cACJ9X,KAAK8X,aAAa4D,cAGnB1b,KAAKmY,0BACJnY,KAAKmY,yBAAyBuD,cAGlC1b,KAAK2E,aAAc,4CA5OAlD,SAAsBsV,EAAAA,kBAAyBC,EAAAA,UAtC3CzV,EAAA,CAA1B0V,EAAAA,MAAM,mDAEE1V,EAAA,CAAR0V,EAAAA,sCAE4C1V,EAAA,CAA5C4V,EAAAA,UAAU,eAAgB,CAAEC,QAAQ,iDAEW7V,EAAA,CAA/C4V,EAAAA,UAAU,kBAAmB,CAAEC,QAAQ,oDAEG7V,EAAA,CAA1C4V,EAAAA,UAAU,aAAc,CAAEC,QAAQ,+CAES7V,EAAA,CAA3C4V,EAAAA,UAAU,cAAe,CAAEC,QAAQ,gDAEU7V,EAAA,CAA7C4V,EAAAA,UAAU,eAAgB,CAAEC,QAAQ,uDAEQ7V,EAAA,CAA5C4V,EAAAA,UAAU,eAAgB,CAAEC,QAAQ,iDAEW7V,EAAA,CAA/C4V,EAAAA,UAAU,kBAAmB,CAAEC,QAAQ,oDAES7V,EAAA,CAAhD4V,EAAAA,UAAU,kBAAmB,CAAEC,QAAQ,oDAiD/B7V,EAAA,CAAR0V,EAAAA,0CArEQW,EAAgBrW,EAAA,CAvC5BgW,EAAAA,UAAU,CACPC,SAAU,qBACVtS,SAAU,kuFAqCD0S,mBA0ST,SAAA+D,EAAmBhE,GAAnB,IAAA9S,EAAA7E,KAAmBA,KAAA2X,GAAAA,EACX3X,KAAK4b,cACL5b,KAAK8X,aAAe9X,KAAK2X,GAAG/V,aAAarB,YAAYwX,WAAU,SAAAhX,GAC3D8D,EAAKgX,sBA0CrB,OArCIF,EAAA9a,UAAA2D,SAAA,WACQxE,KAAK4b,aACL5b,KAAK6b,mBAIbF,EAAA9a,UAAAgb,gBAAA,WACI7b,KAAKgL,OAAShL,KAAK2X,GAAG5M,SAAS/K,KAAKwJ,QAIxCmS,EAAA9a,UAAAib,QAAA,SAAQzS,GACArJ,KAAK4b,cACL5b,KAAK6b,kBACL7b,KAAK2X,GAAGrO,KAAK,CACTC,cAAeF,EACfG,MAAOxJ,KAAKwJ,QAGhBsC,EAAAA,WAAWiQ,mBAKnBJ,EAAA9a,UAAAmb,WAAA,SAAW3S,GACPrJ,KAAK8b,QAAQzS,IAGjBsS,EAAA9a,UAAA+a,UAAA,WACI,OAAyC,IAAlC5b,KAAKic,0BAGhBN,EAAA9a,UAAAiW,YAAA,WACQ9W,KAAK8X,cACL9X,KAAK8X,aAAa4D,wDA1CHja,KARIF,EAAA,CAA1B0V,EAAAA,MAAM,iDAEE1V,EAAA,CAAR0V,EAAAA,wDAyBD1V,EAAA,CADC2a,EAAAA,aAAa,QAAS,CAAC,wCAcxB3a,EAAA,CADC2a,EAAAA,aAAa,gBAAiB,CAAC,2CAzCvBP,EAAgBpa,EAAA,CAR5B4a,EAAAA,UAAU,CACP3E,SAAU,qBACV4E,KAAM,CACFC,6BAA8B,cAC9BC,6BAA8B,SAC9BC,kBAAmB,+BAGdZ,mBA2ET,SAAAa,EAAmB7E,GAAnB,IAAA9S,EAAA7E,KAAmBA,KAAA2X,GAAAA,EACf3X,KAAK8X,aAAe9X,KAAK2X,GAAG/V,aAAarB,YAAYwX,WAAU,SAAAhX,GAC3D8D,EAAKgX,qBA2BjB,OAvBIW,EAAA3b,UAAA2D,SAAA,WACIxE,KAAK6b,mBAGTW,EAAA3b,UAAAib,QAAA,SAAQzS,GACJA,EAAMgD,kBAGVmQ,EAAA3b,UAAAgb,gBAAA,WACI,GAAyB,WAArB7b,KAAK2X,GAAGxV,SACRnC,KAAK+G,UAAY/G,KAAK2X,GAAG5M,SAAS/K,KAAKwJ,OAASxJ,KAAK2X,GAAG5Q,UAAY,OAEnE,GAAyB,aAArB/G,KAAK2X,GAAGxV,SAAyB,CACtC,IAAIpB,EAAWf,KAAK2X,GAAGhO,YAAY3J,KAAKwJ,OACxCxJ,KAAK+G,UAAYhG,EAAWA,EAAS6I,MAAO,IAIpD4S,EAAA3b,UAAAiW,YAAA,WACQ9W,KAAK8X,cACL9X,KAAK8X,aAAa4D,wDA1BHja,KAVdF,EAAA,CAAR0V,EAAAA,qCAEQ1V,EAAA,CAAR0V,EAAAA,6CAEQ1V,EAAA,CAAR0V,EAAAA,4CANQuF,EAAUjb,EAAA,CANtBgW,EAAAA,UAAU,CACPC,SAAU,sBACVtS,SAAU,oLAIDsX,mBA0DT,SAAAC,EAAmB9E,EAAsBjW,EAAuBC,GAA7C3B,KAAA2X,GAAAA,EAAsB3X,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EA+DpE,OA7DI8a,EAAA5b,UAAA4X,gBAAA,WAAA,IAAA5T,EAAA7E,KACQA,KAAK4b,cACL9P,EAAAA,WAAWS,SAASvM,KAAK0B,GAAGiK,cAAe,uBAC3C3L,KAAK0c,QAAU/F,SAASgG,cAAc,QACtC3c,KAAK0c,QAAQE,UAAY,iCACzB5c,KAAK0B,GAAGiK,cAAckR,YAAY7c,KAAK0c,SAEvC1c,KAAK2B,KAAKqW,mBAAkB,WACxBnT,EAAKiY,yBAA2BjY,EAAKkY,YAAYxD,KAAK1U,GACtDA,EAAK6X,QAAQ9F,iBAAiB,YAAa/R,EAAKiY,+BAK5DL,EAAA5b,UAAAmc,mBAAA,WAAA,IAAAnY,EAAA7E,KACIA,KAAK2B,KAAKqW,mBAAkB,WACxBnT,EAAKoY,0BAA4BpY,EAAKqY,oBAAoB3D,KAAK1U,GAC/D8R,SAASC,iBAAiB,YAAa/R,EAAKoY,2BAE5CpY,EAAKsY,wBAA0BtY,EAAKuY,kBAAkB7D,KAAK1U,GAC3D8R,SAASC,iBAAiB,UAAW/R,EAAKsY,6BAIlDV,EAAA5b,UAAAwc,qBAAA,WACQrd,KAAKid,4BACLtG,SAASE,oBAAoB,YAAa7W,KAAKid,2BAC/Cjd,KAAKid,0BAA4B,MAGjCjd,KAAKmd,0BACLxG,SAASE,oBAAoB,UAAW7W,KAAKmd,yBAC7Cnd,KAAKmd,wBAA0B,OAIvCV,EAAA5b,UAAAkc,YAAA,SAAY1T,GACRrJ,KAAK2X,GAAG/L,oBAAoBvC,GAC5BrJ,KAAKgd,sBAGTP,EAAA5b,UAAAqc,oBAAA,SAAoB7T,GAChBrJ,KAAK2X,GAAGrL,eAAejD,IAG3BoT,EAAA5b,UAAAuc,kBAAA,SAAkB/T,GACdrJ,KAAK2X,GAAG7K,kBAAkBzD,EAAOrJ,KAAK0B,GAAGiK,eACzC3L,KAAKqd,wBAGTZ,EAAA5b,UAAA+a,UAAA,WACI,OAA0C,IAAnC5b,KAAKsd,2BAGhBb,EAAA5b,UAAAiW,YAAA,WACQ9W,KAAK8c,0BACL9c,KAAK0c,QAAQ7F,oBAAoB,YAAa7W,KAAK8c,0BAGvD9c,KAAKqd,iEA7Dc5b,SAAsBsV,EAAAA,kBAAyBC,EAAAA,UAV7DzV,EAAA,CAAR0V,EAAAA,yDAFQwF,EAAiBlb,EAAA,CAH7B4a,EAAAA,UAAU,CACP3E,SAAU,yBAEDiF,mBA8FT,SAAAc,EAAmB5F,EAAsBjW,EAAuBC,GAA7C3B,KAAA2X,GAAAA,EAAsB3X,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EA4FpE,OA1FI4b,EAAA1c,UAAA4X,gBAAA,WACQzY,KAAK4b,aACL5b,KAAK0Y,cAIb6E,EAAA1c,UAAA6X,WAAA,WAAA,IAAA7T,EAAA7E,KACIA,KAAK2B,KAAKqW,mBAAkB,WACxBnT,EAAK2Y,kBAAoB3Y,EAAKkY,YAAYxD,KAAK1U,GAC/CA,EAAKnD,GAAGiK,cAAciL,iBAAiB,YAAa/R,EAAK2Y,mBAEzD3Y,EAAK4Y,kBAAoB5Y,EAAK6Y,YAAYnE,KAAK1U,GAC/CA,EAAKnD,GAAGiK,cAAciL,iBAAiB,YAAa/R,EAAK4Y,mBAEzD5Y,EAAK8Y,iBAAmB9Y,EAAK+Y,YAAYrE,KAAK1U,GAC9CA,EAAKnD,GAAGiK,cAAciL,iBAAiB,WAAY/R,EAAK8Y,kBAExD9Y,EAAKgZ,kBAAoBhZ,EAAK+Y,YAAYrE,KAAK1U,GAC/CA,EAAKnD,GAAGiK,cAAciL,iBAAiB,YAAa/R,EAAKgZ,mBAEzDhZ,EAAKiZ,kBAAoBjZ,EAAKkZ,YAAYxE,KAAK1U,GAC/CA,EAAKnD,GAAGiK,cAAciL,iBAAiB,YAAa/R,EAAKiZ,uBAIjEP,EAAA1c,UAAAiZ,aAAA,WACQ9Z,KAAKwd,oBACL7G,SAASE,oBAAoB,YAAa7W,KAAKwd,mBAC/Cxd,KAAKwd,kBAAoB,MAGzBxd,KAAK2d,mBACLhH,SAASE,oBAAoB,WAAY7W,KAAK2d,kBAC9C3d,KAAK2d,iBAAmB,MAGxB3d,KAAK6d,oBACLlH,SAASE,oBAAoB,YAAa7W,KAAK6d,mBAC/C7d,KAAK6d,kBAAoB,MAGzB7d,KAAK6d,oBACLlH,SAASE,oBAAoB,YAAa7W,KAAK6d,mBAC/C7d,KAAK6d,kBAAoB,MAGzB7d,KAAK8d,oBACLnH,SAASE,oBAAoB,YAAa7W,KAAK8d,mBAC/C9d,KAAK8d,kBAAoB,OAIjCP,EAAA1c,UAAAkc,YAAA,SAAY1T,GACsB,UAA1BA,EAAM+H,OAAOrC,UAAwBjD,EAAAA,WAAW8C,SAASvF,EAAM+H,OAAQ,qBACvEpR,KAAK0B,GAAGiK,cAAcsF,WAAY,EAElCjR,KAAK0B,GAAGiK,cAAcsF,WAAY,GAG1CsM,EAAA1c,UAAA6c,YAAA,SAAYrU,GACRrJ,KAAK2X,GAAGzI,kBAAkB7F,EAAOrJ,KAAK0B,GAAGiK,gBAG7C4R,EAAA1c,UAAAmd,WAAA,SAAW3U,GACPA,EAAMgD,kBAGVkR,EAAA1c,UAAA+c,YAAA,SAAYvU,GACRrJ,KAAK2X,GAAG9H,kBAAkBxG,EAAOrJ,KAAK0B,GAAGiK,gBAG7C4R,EAAA1c,UAAAkd,YAAA,SAAY1U,GACRrJ,KAAK2X,GAAGnH,kBAAkBnH,IAI9BkU,EAAA1c,UAAAod,OAAA,SAAO5U,GACCrJ,KAAK4b,aACL5b,KAAK2X,GAAGlH,aAAapH,EAAOrJ,KAAK0B,GAAGiK,gBAI5C4R,EAAA1c,UAAA+a,UAAA,WACI,OAA4C,IAArC5b,KAAKke,6BAGhBX,EAAA1c,UAAAiW,YAAA,WACI9W,KAAK8Z,yDAzFcrY,SAAsBsV,EAAAA,kBAAyBC,EAAAA,UAZ7DzV,EAAA,CAAR0V,EAAAA,2DA0FD1V,EAAA,CADC2a,EAAAA,aAAa,OAAQ,CAAC,uCA3FdqB,EAAmBhc,EAAA,CAH/B4a,EAAAA,UAAU,CACP3E,SAAU,2BAED+F,mBA4HT,SAAAY,EAAmBxG,EAAsB/V,GAAzC,IAAAiD,EAAA7E,KAAmBA,KAAA2X,GAAAA,EAAsB3X,KAAA4B,aAAAA,EACjC5B,KAAK4b,cACL5b,KAAK8X,aAAe9X,KAAK2X,GAAG/V,aAAanB,iBAAiBsX,WAAU,WAChElT,EAAKyM,SAAWzM,EAAK8S,GAAGpG,WAAW1M,EAAKwD,QAAQlH,UA2ChE,OAtCIgd,EAAAtd,UAAA2D,SAAA,WACQxE,KAAK4b,cACL5b,KAAKsR,SAAWtR,KAAK2X,GAAGpG,WAAWvR,KAAKqI,QAAQlH,QAKxDgd,EAAAtd,UAAAib,QAAA,SAAQzS,GACArJ,KAAK4b,aACL5b,KAAK2X,GAAGzG,eAAe,CACnB3H,cAAeF,EACfhB,QAASrI,KAAKqI,WAM1B8V,EAAAtd,UAAAmb,WAAA,SAAW3S,GACPrJ,KAAK8b,QAAQzS,IAIjB8U,EAAAtd,UAAAud,WAAA,SAAW/U,GACHrJ,KAAK4b,aACL5b,KAAK2X,GAAGtF,kBAAkBhJ,IAIlC8U,EAAAtd,UAAA+a,UAAA,WACI,OAAwC,IAAjC5b,KAAKqe,yBAGhBF,EAAAtd,UAAAiW,YAAA,WACQ9W,KAAK8X,cACL9X,KAAK8X,aAAa4D,wDA1CHja,SAAgC1B,KAR7BwB,EAAA,CAAzB0V,EAAAA,MAAM,kDAEE1V,EAAA,CAAR0V,EAAAA,uDAqBD1V,EAAA,CADC2a,EAAAA,aAAa,QAAS,CAAC,wCAWxB3a,EAAA,CADC2a,EAAAA,aAAa,gBAAiB,CAAC,2CAMhC3a,EAAA,CADC2a,EAAAA,aAAa,WAAY,CAAC,2CAvClBiC,EAAe5c,EAAA,CAN3B4a,EAAAA,UAAU,CACP3E,SAAU,oBACV4E,KAAM,CACFE,6BAA8B,eAGzB6B,mBA0ET,SAAAG,EAAmB3G,EAAsB/V,GAAzC,IAAAiD,EAAA7E,KAAmBA,KAAA2X,GAAAA,EAAsB3X,KAAA4B,aAAAA,EACjC5B,KAAK4b,cACL5b,KAAK8X,aAAe9X,KAAK2X,GAAG/V,aAAanB,iBAAiBsX,WAAU,WAChElT,EAAKyM,SAAWzM,EAAK8S,GAAGpG,WAAW1M,EAAKwD,QAAQlH,UA+BhE,OA1BImd,EAAAzd,UAAA2D,SAAA,WACQxE,KAAK4b,cACL5b,KAAKsR,SAAWtR,KAAK2X,GAAGpG,WAAWvR,KAAKqI,QAAQlH,QAKxDmd,EAAAzd,UAAAib,QAAA,SAAQzS,GACArJ,KAAK4b,aACL5b,KAAK2X,GAAGzG,eAAe,CACnB3H,cAAeF,EACfhB,QAASrI,KAAKqI,WAK1BiW,EAAAzd,UAAA+a,UAAA,WACI,OAAwC,IAAjC5b,KAAKqe,yBAGhBC,EAAAzd,UAAAiW,YAAA,WACQ9W,KAAK8X,cACL9X,KAAK8X,aAAa4D,wDA9BHja,SAAgC1B,KARrBwB,EAAA,CAAjC0V,EAAAA,MAAM,0DAEE1V,EAAA,CAAR0V,EAAAA,uDAqBD1V,EAAA,CADC2a,EAAAA,aAAa,WAAY,CAAC,wCAxBlBoC,EAAuB/c,EAAA,CANnC4a,EAAAA,UAAU,CACP3E,SAAU,4BACV4E,KAAM,CACFE,6BAA8B,eAGzBgC,mBA8DT,SAAAC,EAAmB5G,EAAsB/V,GAAzC,IAAAiD,EAAA7E,KAAmBA,KAAA2X,GAAAA,EAAsB3X,KAAA4B,aAAAA,EACjC5B,KAAK4b,cACL5b,KAAK8X,aAAe9X,KAAK2X,GAAG/V,aAAalB,mBAAmBqX,WAAU,SAAC5W,GACnE0D,EAAKyM,SAAWzM,EAAK8S,GAAGlE,OAAO5O,EAAKwD,QAAQlH,KAAMA,OA2BlE,OArBIod,EAAA1d,UAAAK,cAAA,SAAcmI,GACNrJ,KAAK4b,cACL5b,KAAK2X,GAAGrF,oBAAoB,CACxB/I,cAAeF,EACfhB,QAASrI,KAAKqI,UAGlBgB,EAAMgD,mBAIdkS,EAAA1d,UAAA+a,UAAA,WACI,OAAyC,IAAlC5b,KAAKwe,0BAGhBD,EAAA1d,UAAAiW,YAAA,WACQ9W,KAAK8X,cACL9X,KAAK8X,aAAa4D,wDA1BHja,SAAgC1B,KAR5BwB,EAAA,CAA1B0V,EAAAA,MAAM,mDAEE1V,EAAA,CAAR0V,EAAAA,wDAeD1V,EAAA,CADC2a,EAAAA,aAAa,cAAe,CAAC,8CAlBrBqC,EAAgBhd,EAAA,CAN5B4a,EAAAA,UAAU,CACP3E,SAAU,qBACV4E,KAAM,CACFqC,kCAAmC,eAG9BF,mBAoET,SAAAG,EAAmB/G,EAAsB/V,GAAzC,IAAAiD,EAAA7E,KAAmBA,KAAA2X,GAAAA,EAAsB3X,KAAA4B,aAAAA,EACrC5B,KAAK8X,aAAe9X,KAAK2X,GAAG/V,aAAanB,iBAAiBsX,WAAU,WAChElT,EAAKqO,QAAUrO,EAAK8S,GAAGpG,WAAW1M,EAAKwD,QAAQlH,SAgC3D,OA5BIud,EAAA7d,UAAA2D,SAAA,WACIxE,KAAKkT,QAAUlT,KAAK2X,GAAGpG,WAAWvR,KAAKqI,QAAQlH,OAGnDud,EAAA7d,UAAAib,QAAA,SAAQzS,GACArJ,KAAK2e,UACL3e,KAAK2X,GAAGjF,uBAAuB,CAC3BnJ,cAAeF,EACfhB,QAASrI,KAAKqI,UAGtByD,EAAAA,WAAWiQ,kBAGf2C,EAAA7d,UAAA+d,QAAA,WACI9S,EAAAA,WAAWS,SAASvM,KAAK6e,aAAalT,cAAe,mBAGzD+S,EAAA7d,UAAAie,OAAA,WACIhT,EAAAA,WAAW2C,YAAYzO,KAAK6e,aAAalT,cAAe,mBAG5D+S,EAAA7d,UAAAiW,YAAA,WACQ9W,KAAK8X,cACL9X,KAAK8X,aAAa4D,wDA9BHja,SAAgC1B,KAV9CwB,EAAA,CAAR0V,EAAAA,wCAEe1V,EAAA,CAAf0V,EAAAA,MAAM,wCAE6B1V,EAAA,CAAnC4V,EAAAA,UAAU,MAAO,CAAEC,QAAQ,wCANnBsH,EAAUnd,EAAA,CAdtBgW,EAAAA,UAAU,CACPC,SAAU,sBACVtS,SAAU,iqBAYDwZ,mBA0ET,SAAAK,EAAmBpH,EAAsB/V,GAAzC,IAAAiD,EAAA7E,KAAmBA,KAAA2X,GAAAA,EAAsB3X,KAAA4B,aAAAA,EACrC5B,KAAKgf,wBAA0Bhf,KAAK2X,GAAG/V,aAAajB,gBAAgBoX,WAAU,WAC1ElT,EAAKqO,QAAUrO,EAAKoa,wBAGxBjf,KAAKkf,4BAA8Blf,KAAK2X,GAAG/V,aAAanB,iBAAiBsX,WAAU,WAC/ElT,EAAKqO,QAAUrO,EAAKoa,wBAwDhC,OApDIF,EAAAle,UAAA2D,SAAA,WACIxE,KAAKkT,QAAUlT,KAAKif,sBAGxBF,EAAAle,UAAAib,QAAA,SAAQzS,EAAc6J,GACflT,KAAK2X,GAAGtW,OAASrB,KAAK2X,GAAGtW,MAAM+E,OAAS,GACvCpG,KAAK2X,GAAG9E,wBAAwBxJ,GAAQ6J,GAG5CpH,EAAAA,WAAWiQ,kBAGfgD,EAAAle,UAAA+d,QAAA,WACI9S,EAAAA,WAAWS,SAASvM,KAAK6e,aAAalT,cAAe,mBAGzDoT,EAAAle,UAAAie,OAAA,WACIhT,EAAAA,WAAW2C,YAAYzO,KAAK6e,aAAalT,cAAe,mBAG5DoT,EAAAle,UAAAiW,YAAA,WACQ9W,KAAKkf,6BACLlf,KAAKkf,4BAA4BxD,cAGjC1b,KAAKgf,yBACLhf,KAAKgf,wBAAwBtD,eAIrCqD,EAAAle,UAAAoe,mBAAA,mBACQ/L,EACEzK,EAAOzI,KAAK2X,GAAG/P,eAAe5H,KAAK2X,GAAGtW,MAE5C,GAAIoH,MACA,IAAiB,IAAA0W,EAAAjX,EAAAO,GAAI2W,EAAAD,EAAAne,QAAAoe,EAAAhX,KAAAgX,EAAAD,EAAAne,OAAE,CAAlB,IAAIG,EAAIie,EAAA/d,MACT,IAAIrB,KAAK2X,GAAGpG,WAAWpQ,GAGjB,CACF+R,GAAU,EACV,MAJAA,GAAU,yGASlBA,GAAU,EAGd,OAAOA,4CA3DYzR,SAAgC1B,KAVnBwB,EAAA,CAAnC4V,EAAAA,UAAU,MAAO,CAAEC,QAAQ,wCAFnB2H,EAAgBxd,EAAA,CAd5BgW,EAAAA,UAAU,CACPC,SAAU,4BACVtS,SAAU,utBAYD6Z,mBAuFT,SAAAM,EAAmB1H,EAAsBjW,EAAuBC,GAA7C3B,KAAA2X,GAAAA,EAAsB3X,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EAwKpE,OAtKI0d,EAAAxe,UAAA4X,gBAAA,WACQzY,KAAK4b,aACL9P,EAAAA,WAAWS,SAASvM,KAAK0B,GAAGiK,cAAe,uBAKnD0T,EAAAxe,UAAAib,QAAA,SAAQzS,GACJ,GAAIrJ,KAAK4b,YAGL,GAFA5b,KAAK2X,GAAGlB,kBAAmB,EAEvBzW,KAAK2X,GAAGvB,aACR,GAAIpW,KAAK2X,GAAGvB,cAAgBpW,KAAK0B,GAAGiK,cAAe,CAC/C,IAAK3L,KAAK2X,GAAGrB,qBACT,OAGJxK,EAAAA,WAAW2C,YAAYzO,KAAK2X,GAAGvB,YAAa,mBAC5CpW,KAAKsf,iBAITtf,KAAKsf,YAKjBD,EAAAxe,UAAAye,SAAA,WAAA,IAAAza,EAAA7E,KACIA,KAAK2X,GAAGzB,kBAAkBlW,KAAK0B,GAAGiK,eAClCG,EAAAA,WAAWS,SAASvM,KAAK0B,GAAGiK,cAAe,mBAC3C3L,KAAK2X,GAAG1T,WAAWQ,KAAK,CAAE+E,MAAOxJ,KAAKwJ,MAAOf,KAAMzI,KAAKyI,OACxDzI,KAAK2B,KAAKqW,mBAAkB,WACxBxM,YAAW,WACP,IAAI+T,EAAYzT,EAAAA,WAAWkC,WAAWnJ,EAAKnD,GAAGiK,cAAe,mBACzD4T,GACAA,EAAUC,UAEf,QAIXH,EAAAxe,UAAA4e,iBAAA,WACI3T,EAAAA,WAAW2C,YAAYzO,KAAK2X,GAAGvB,YAAa,mBAC5CpW,KAAK2X,GAAGvB,YAAc,KACtBpW,KAAK2X,GAAGjB,8BAIZ2I,EAAAxe,UAAA6e,UAAA,SAAUrW,GACFrJ,KAAK4b,cAEgB,IAAjBvS,EAAMsW,SACF3f,KAAK2X,GAAGrB,uBACRxK,EAAAA,WAAW2C,YAAYzO,KAAK2X,GAAGvB,YAAa,mBAC5CpW,KAAKyf,mBACLzf,KAAK2X,GAAGzT,eAAeO,KAAK,CAAE+E,MAAOxJ,KAAKwJ,MAAOf,KAAMzI,KAAKyI,QAGhEY,EAAMgD,kBAIgB,IAAjBhD,EAAMsW,SACP3f,KAAK2X,GAAGrB,uBACRxK,EAAAA,WAAW2C,YAAYzO,KAAK2X,GAAGvB,YAAa,mBAC5CpW,KAAKyf,mBACLzf,KAAK2X,GAAGxT,aAAaM,KAAK,CAAE+E,MAAOxJ,KAAKwJ,MAAOf,KAAMzI,KAAKyI,QAG9DY,EAAMgD,kBAIgB,GAAjBhD,EAAMsW,UACX3f,KAAK2X,GAAGzT,eAAeO,KAAK,CAAE+E,MAAOxJ,KAAKwJ,MAAOf,KAAMzI,KAAKyI,OAExDY,EAAMuW,SACN5f,KAAK6f,mBAAmBxW,GAExBrJ,KAAK8f,eAAezW,MAKpCgW,EAAAxe,UAAAkf,SAAA,SAASvR,GACL,GAAIA,EAAS,CAET,IADA,IAAI2H,EAAO3H,EACJ2H,IAASrK,EAAAA,WAAW8C,SAASuH,EAAM,oBACtCA,EAAOA,EAAKxH,cAGhB,OAAOwH,EAGP,OAAO,MAIfkJ,EAAAxe,UAAAgf,mBAAA,SAAmBxW,GACf,IAAI2W,EAAchgB,KAAK+f,SAAS1W,EAAM+H,QAElC6O,GADMD,EAAYrR,cACL3O,KAAKkgB,2BAA2BF,IAE7CC,IACAnU,EAAAA,WAAWqU,oBAAoBF,EAAY,SAC3C5W,EAAMgD,mBAIdgT,EAAAxe,UAAAif,eAAA,SAAezW,GACX,IAAI2W,EAAchgB,KAAK+f,SAAS1W,EAAM+H,QAElC6O,GADMD,EAAYrR,cACL3O,KAAKogB,uBAAuBJ,IAEzCC,IACAnU,EAAAA,WAAWqU,oBAAoBF,EAAY,SAC3C5W,EAAMgD,mBAIdgT,EAAAxe,UAAAqf,2BAAA,SAA2B/J,GACvB,IAAIkK,EAAWlK,EAAK+C,uBAEpB,IAAKmH,EAAU,CACX,IAAIC,EAAcnK,EAAKxH,cAAgBwH,EAAKxH,cAAcuK,uBAAyB,KAC/EoH,IACAD,EAAWC,EAAYC,kBAI/B,OAAIF,EACIvU,EAAAA,WAAW8C,SAASyR,EAAU,sBACvBA,EAEArgB,KAAKkgB,2BAA2BG,GAGpC,MAIfhB,EAAAxe,UAAAuf,uBAAA,SAAuBjK,GACnB,IAAIqK,EAAWrK,EAAK3I,mBAEpB,IAAKgT,EAAU,CACX,IAAIC,EAAUtK,EAAKxH,cAAgBwH,EAAKxH,cAAcnB,mBAAqB,KACvEiT,IACAD,EAAWC,EAAQC,mBAI3B,OAAIF,EACI1U,EAAAA,WAAW8C,SAAS4R,EAAU,sBACvBA,EAEAxgB,KAAKogB,uBAAuBI,GAGhC,MAIfnB,EAAAxe,UAAA+a,UAAA,WACI,OAAyC,IAAlC5b,KAAK2gB,mEArKOlf,SAAsBsV,EAAAA,kBAAyBC,EAAAA,UAN3CzV,EAAA,CAA1B0V,EAAAA,MAAM,gDAEyB1V,EAAA,CAA/B0V,EAAAA,MAAM,sDAEE1V,EAAA,CAAR0V,EAAAA,wDAWD1V,EAAA,CADC2a,EAAAA,aAAa,QAAS,CAAC,wCA0CxB3a,EAAA,CADC2a,EAAAA,aAAa,UAAW,CAAC,0CAzDjBmD,EAAgB9d,EAAA,CAH5B4a,EAAAA,UAAU,CACP3E,SAAU,wBAED6H,mBAqMT,SAAAuB,EAAmBjJ,EAAsBkJ,GAAtB7gB,KAAA2X,GAAAA,EAAsB3X,KAAA6gB,eAAAA,EAe7C,OAbID,EAAA/f,UAAA+D,mBAAA,WAAA,IAAAC,EAAA7E,KACIA,KAAK8E,UAAUC,SAAQ,SAAC9B,GACpB,OAAQA,EAAK+B,WACT,IAAK,QACDH,EAAKic,cAAgB7d,EAAKiC,SAC1B,MAEJ,IAAK,SACDL,EAAKkc,eAAiB9d,EAAKiC,uDAVpBzD,SAAkC4d,KANzB9d,EAAA,CAA/B8V,EAAAA,gBAAgBC,EAAAA,gDAFRsJ,EAAmBrf,EAAA,CAX/BgW,EAAAA,UAAU,CACPC,SAAU,wBACVtS,SAAU,kZASD0b,mBAmCT,SAAAI,EAAmBrJ,EAAsBjW,EAAuBC,GAA7C3B,KAAA2X,GAAAA,EAAsB3X,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EAuEpE,OApEIqf,EAAAngB,UAAA6e,UAAA,SAAUrW,GACN,OAAQA,EAAM4X,OAEV,KAAK,GACD,IAAIR,EAAUzgB,KAAK0B,GAAGiK,cAAc6B,mBAChCiT,GACAA,EAAQjB,QAGZnW,EAAMgD,iBACV,MAGA,KAAK,GACD,IAAI6U,EAAUlhB,KAAK0B,GAAGiK,cAAcuN,uBAChCgI,GACAA,EAAQ1B,QAGZnW,EAAMgD,iBACV,MAGA,KAAK,GACGrM,KAAKqI,QAAQlH,KAAKmH,WAClBtI,KAAK2X,GAAGwJ,eAAiBrV,EAAAA,WAAW9I,MAAMhD,KAAK0B,GAAGiK,eAClD3L,KAAKqI,QAAQlH,KAAKmH,UAAW,EAE7BtI,KAAK2X,GAAGpU,eAAekB,KAAK,CACxB8E,cAAeF,EACflI,KAAMnB,KAAKqI,QAAQlH,OAGvBnB,KAAK2X,GAAG9Q,wBACR7G,KAAK2X,GAAG/V,aAAaR,WAAWpB,KAAK2X,GAAGtW,OACxCrB,KAAKohB,gBAEb,MAGA,KAAK,GACIphB,KAAKqI,QAAQlH,KAAKmH,WACnBtI,KAAK2X,GAAGwJ,eAAiBrV,EAAAA,WAAW9I,MAAMhD,KAAK0B,GAAGiK,eAClD3L,KAAKqI,QAAQlH,KAAKmH,UAAW,EAE7BtI,KAAK2X,GAAGrU,aAAamB,KAAK,CACtB8E,cAAeF,EACflI,KAAMnB,KAAKqI,QAAQlH,OAGvBnB,KAAK2X,GAAG9Q,wBACR7G,KAAK2X,GAAG/V,aAAaR,WAAWpB,KAAK2X,GAAGtW,OACxCrB,KAAKohB,kBAMrBJ,EAAAngB,UAAAugB,aAAA,WAAA,IAAAvc,EAAA7E,KACIA,KAAK2B,KAAKqW,mBAAkB,WACxBxM,YAAW,WACP,IAAI6V,EAAMvV,EAAAA,WAAWkC,WAAWnJ,EAAK8S,GAAG3L,mBAAmBL,cAAe,uBAAuBnD,SAAS3D,EAAK8S,GAAGwJ,gBAC9GE,GACAA,EAAI7B,UAET,iDApEY/d,SAAsBsV,EAAAA,kBAAyBC,EAAAA,UAFtDzV,EAAA,CAAf0V,EAAAA,MAAM,wCAKP1V,EAAA,CADC2a,EAAAA,aAAa,UAAW,CAAC,0CANjB8E,EAAKzf,EAAA,CANjB4a,EAAAA,UAAU,CACP3E,SAAU,UACV4E,KAAM,CACFG,kBAAmB,UAGdyE,mBA0FT,SAAAM,EAAmB3J,GAAA3X,KAAA2X,GAAAA,EAuBvB,OArBI2J,EAAAzgB,UAAAib,QAAA,SAAQzS,GACJrJ,KAAKqI,QAAQlH,KAAKmH,UAAYtI,KAAKqI,QAAQlH,KAAKmH,SAE7CtI,KAAKqI,QAAQlH,KAAKmH,SACjBtI,KAAK2X,GAAGrU,aAAamB,KAAK,CACtB8E,cAAeF,EACflI,KAAMnB,KAAKqI,QAAQlH,OAIvBnB,KAAK2X,GAAGpU,eAAekB,KAAK,CACxB8E,cAAeF,EACflI,KAAMnB,KAAKqI,QAAQlH,OAI3BnB,KAAK2X,GAAG9Q,wBACR7G,KAAK2X,GAAG/V,aAAaR,WAAWpB,KAAK2X,GAAGtW,OAExCgI,EAAMgD,2DArBa5K,KAFdF,EAAA,CAAR0V,EAAAA,uCAFQqK,EAAgB/f,EAAA,CAT5BgW,EAAAA,UAAU,CACPC,SAAU,qBACVtS,SAAU,kiBAODoc,mBAkCb,SAAAC,KAA+B,OAAlBA,EAAehgB,EAAA,CAL3BigB,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,aAAaC,EAAAA,iBACvBC,QAAS,CAACngB,EAAUogB,EAAAA,aAAaP,EAAiB3F,EAAiBa,EAAWC,EAAkBuE,EAAMzD,EAAoBY,EAAgBG,EAAwBC,EAAiBG,EAAWK,EAAiBM,EAAiBuB,GAChOkB,aAAc,CAACrgB,EAAU6f,EAAiB1J,EAAiBF,EAAOiE,EAAiBa,EAAWC,EAAkBuE,EAAMzD,EAAoBY,EAAgBG,EAAwBC,EAAiBG,EAAWK,EAAiBM,EAAiBuB,MAEvOW","sourcesContent":["import { NgModule, AfterContentInit, OnInit, OnDestroy, HostListener, Injectable, Directive, Component, Input, Output, EventEmitter, ContentChildren, TemplateRef, QueryList, ElementRef, NgZone, ViewChild, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeNode } from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { DomHandler } from 'primeng/dom';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { SortMeta } from 'primeng/api';\nimport { BlockableUI } from 'primeng/api';\nimport { FilterMetadata } from 'primeng/api';\nimport { ObjectUtils } from 'primeng/utils';\nimport { FilterUtils } from 'primeng/utils';\n\n@Injectable()\nexport class TreeTableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private uiUpdateSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(node: any) {\n        this.contextMenuSource.next(node);\n    }\n\n    onUIUpdate(value: any) {\n        this.uiUpdateSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n}\n\n@Component({\n    selector: 'p-treeTable',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\n                [ngClass]=\"{'ui-treetable ui-widget': true, 'ui-treetable-auto-layout': autoLayout, 'ui-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'ui-treetable-resizable': resizableColumns, 'ui-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit')}\">\n            <div class=\"ui-treetable-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\n            <div class=\"ui-treetable-loading-content\" *ngIf=\"loading && showLoader\">\n                <i [class]=\"'ui-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"ui-treetable-caption ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"></p-paginator>\n            \n            <div class=\"ui-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table class=\"ui-treetable-table\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tfoot class=\"ui-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                    <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                </table>\n            </div>\n\n            <div class=\"ui-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"ui-treetable-scrollable-view ui-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"ui-treetable-scrollable-view\" [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"ui-treetable-summary ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TreeTableService]\n})\nexport class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {\n\n    @Input() columns: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() autoLayout: boolean;\n\n    @Input() lazy: boolean = false;\n\n    @Input() paginator: boolean;\n\n    @Input() rows: number;\n\n    @Input() first: number = 0;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n    \n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() customSort: boolean;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() rowHover: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 150;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() frozenWidth: string;\n\n    @Input() frozenColumns: any[];\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterMode: string = 'lenient';\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container', { static: true }) containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper', { static: false }) resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp', { static: false }) reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown', { static: false }) reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table', { static: false }) tableViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: TreeNode[] = [];\n\n    serializedValue: any[];\n\n    _totalRecords: number = 0;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    virtualScrollTimer: any;\n    \n    virtualScrollCallback: Function;\n\n    filteredNodes: any[];\n\n    filterTimeout: any;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    dropPosition: number;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    selectionKeys: any = {};\n\n    rowTouched: boolean;\n\n    editingCell: Element;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    initialized: boolean;\n\n    toggleRowIndex: number;\n\n    ngOnInit() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TreeTableService) {}\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if(this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            if (this.virtualScroll && this.virtualScrollCallback) {\n                this.virtualScrollCallback();\n            }\n\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if(!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    updateSerializedValue() {\n        this.serializedValue = [];\n\n        if(this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes||this.value, 0, true);\n    }\n\n    serializeNodes(parent, nodes, level, visible) {\n        if(nodes && nodes.length) {\n            for(let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n                \n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if(data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n\n            for(let i = first; i < (first + this.rows); i++) {\n                let node = data[i];\n                if(node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n        \n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if(this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if(Array.isArray(this._selection)) {\n                for(let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        \n        this.tableService.onUIUpdate(this.value);\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if(this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            \n            this.sortMultiple();\n        }\n    }\n\n    sortSingle() {\n        if(this.sortField && this.sortOrder) {\n            if(this.resetPageOnSort) {\n                this.first = 0;\n            }\n\n            if(this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n\n                if(this.hasFilter()) {\n                    this._filter();\n                }\n            }\n    \n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n    \n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortNodes(nodes) {\n        if(!nodes || nodes.length === 0) {\n            return;\n        } \n\n        if(this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, {numeric: true});\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                return (this.sortOrder * result);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n\n    sortMultiple() {\n        if(this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n               this.sortMultipleNodes(this.value);\n\n                if(this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            \n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortMultipleNodes(nodes) {\n        if(!nodes || nodes.length === 0) {\n            return;\n        } \n        \n        if(this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            this.value.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n\n    multisortField(node1, node2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, {numeric: true}));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n       \n        return null;\n    }\n\n    isSorted(field: string) {\n        if(this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if(this.sortMode === 'multiple') {\n            let sorted = false;\n            if(this.multiSortMeta)Â {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if(this.multiSortMeta[i].field == field)Â {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.virtualScroll ? this.rows * 2 : this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    handleVirtualScroll(event) {\n        this.first = (event.page - 1) * this.rows;\n        this.virtualScrollCallback = event.callback;\n        \n        this.zone.run(() => {\n            if(this.virtualScrollTimer) {\n                clearTimeout(this.virtualScrollTimer);\n            }\n            \n            this.virtualScrollTimer = setTimeout(() => {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }, this.virtualScrollDelay);\n        });\n    }\n\n    isEmpty() {\n        let data = this.filteredNodes||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n    \n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-body-table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-body-table');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if(scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'ui-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if(table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if(colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n    \n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    handleRowClick(event) {\n        let targetNode = (<HTMLElement> event.originalEvent.target).nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\n            return;\n        }\n\n        if(this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n\n            if(metaSelection) {\n                let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                if(selected && metaKey) {\n                    if(this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val,i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if(dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n\n                    this.onNodeUnselect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row'});\n                }\n                else {\n                    if(this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if(dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if(this.isMultipleSelectionMode()) {\n                        if(metaKey) {\n                            this._selection = this.selection||[];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if(dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n\n                    this.onNodeSelect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex});\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n                    \n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n    \n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n            }\n        }\n    }\n\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection||[];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n\n        if(selected) {\n            this.propagateSelectionDown(node, false);\n            if(event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({originalEvent: event, node: node});\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({originalEvent: event, node: node});\n        }\n\n        this.tableService.onSelectionChange();\n    }\n\n    toggleNodesWithCheckbox(event: Event, check: boolean) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n    }\n    \n    propagateSelectionUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedChildCount: number = 0;\n            let childPartialSelected: boolean = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n            \n            if (select && selectedChildCount == node.children.length) {\n                this._selection =  [...this.selection||[], node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {                \n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection =  this.selection.filter((val,i) => i!=index);\n\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n                \n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n                \n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n    \n    propagateSelectionDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        \n        if (select && index == -1) {\n            this._selection =  [...this.selection||[],node]\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection =  this.selection.filter((val,i) => i!=index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        \n        node.partialSelected = false;\n        \n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(node: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if(this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        \n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n        \n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if(!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n                \n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n\n                for (let node of this.value) {\n                    let copyNode = {...node};\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n    \n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = FilterUtils[filterMatchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                    localMatch = false;\n                            }\n    \n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n    \n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = {...copyNode};\n                            let filterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = FilterUtils[this.filters['global'].matchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                    globalMatch = true;\n                                    copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n    \n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0)\n                }\n    \n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n    \n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.first = 0;\n\n        const filteredValue = this.filteredNodes || this.value;\n        \n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n    }\n\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = {...childNode};\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            \n            if (matched) {\n                return true;\n            }\n        }\n    }\n\n    isFilterMatched(node, {filterField, filterValue, filterConstraint, isStrictMode}) {\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue)) {\n            matched = true;\n        }\n\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, isStrictMode}) || matched;\n        }\n\n        return matched;\n    }\n\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        this.filteredNodes = null;\n        this.filters = {};\n                \n        this.first = 0;\n        \n        if(this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    updateEditingCell(cell) {\n        this.editingCell = cell;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'ui-editing-cell');\n                    this.editingCell = null;\n                    this.unbindDocumentEditListener();\n                }\n\n                this.editingCellClick = false;\n            };\n            \n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n     \n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n\n}\n\n@Component({\n    selector: '[pTreeTableBody]',\n    template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns}\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TTBody {\n\n    @Input(\"pTreeTableBody\") columns: any[];\n\n    @Input(\"pTreeTableBodyTemplate\") template: TemplateRef<any>;\n\n    constructor(public tt: TreeTable) {}\n}\n\n@Component({\n    selector: '[ttScrollableView]',\n    template: `\n        <div #scrollHeader class=\"ui-treetable-scrollable-header ui-widget-header\">\n            <div #scrollHeaderBox class=\"ui-treetable-scrollable-header-box\">\n                <table class=\"ui-treetable-scrollable-header-table\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <div #scrollBody class=\"ui-treetable-scrollable-body\">\n            <table #scrollTable [ngClass]=\"{'ui-treetable-scrollable-body-table': true, 'ui-treetable-virtual-table': tt.virtualScroll}\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\"></tbody>\n            </table>\n            <table #loadingTable *ngIf=\"tt.virtualScroll && tt.loadingBodyTemplate != null\" [ngClass]=\"{'ui-treetable-scrollable-body-table ui-treetable-loading-virtual-table': true, 'ui-treetable-virtual-table': tt.virtualScroll}\">\n                <tbody class=\"ui-treetable-tbody\">\n                    <ng-template ngFor [ngForOf]=\"loadingArray\">\n                        <ng-container *ngTemplateOutlet=\"tt.loadingBodyTemplate; context: {columns: columns}\"></ng-container>\n                    </ng-template>\n                </tbody>\n            </table>\n            <div #virtualScroller class=\"ui-treetable-virtual-scroller\" *ngIf=\"tt.virtualScroll\"></div>\n        </div>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"ui-treetable-scrollable-footer ui-widget-header\">\n            <div #scrollFooterBox class=\"ui-treetable-scrollable-footer-box\">\n                <table class=\"ui-treetable-scrollable-footer-table\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"ui-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `\n})\nexport class TTScrollableView implements AfterViewInit, OnDestroy, AfterViewChecked {\n\n    @Input(\"ttScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader', { static: true }) scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox', { static: true }) scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody', { static: true }) scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable', { static: true }) scrollTableViewChild: ElementRef;\n\n    @ViewChild('loadingTable', { static: false }) scrollLoadingTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter', { static: true }) scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox', { static: true }) scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('virtualScroller', { static: false }) virtualScrollerViewChild: ElementRef;\n\n    headerScrollListener: Function;\n\n    bodyScrollListener: Function;\n\n    footerScrollListener: Function;\n\n    frozenSiblingBody: Element;\n\n    _scrollHeight: string;\n\n    subscription: Subscription;\n\n    totalRecordsSubscription: Subscription;\n    \n    initialized: boolean;\n\n    loadingArray: number[] = [];\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignScrollBar();\n                    this.initialized = true;\n\n                    if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                        this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\n                    }\n                }, 50);\n            });\n        });\n\n        if (this.tt.virtualScroll) {\n            this.totalRecordsSubscription = this.tt.tableService.totalRecordsSource$.subscribe(() => {\n                this.zone.runOutsideAngular(() => {\n                    setTimeout(() => {\n                        this.setVirtualScrollerHeight();\n                    }, 50);\n                });\n            });\n        }\n\n        this.loadingArray = Array(this.tt.rows).fill(1);\n\n        this.initialized = false;\n     }\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        this.setScrollHeight();\n    }\n    \n    ngAfterViewChecked() {\n        if(!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.initialized = true;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.bindEvents();\n        this.setScrollHeight();\n        this.alignScrollBar();\n\n        if(!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'ui-treetable-unfrozen-view');\n            }\n\n            if(this.tt.frozenWidth) {\n                this.el.nativeElement.style.left = this.tt.frozenWidth;\n                this.el.nativeElement.style.width = 'calc(100% - ' + this.tt.frozenWidth + ')';\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-treetable-scrollable-body');\n            }\n        }\n        else {\n            this.scrollBodyViewChild.nativeElement.style.paddingBottom = DomHandler.calculateScrollbarWidth() + 'px';\n        }\n\n        if(this.tt.virtualScroll) {\n            this.setVirtualScrollerHeight();\n\n            if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\n            }\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if(!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n                this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n    }\n\n    onHeaderScroll(event) {\n        this.scrollHeaderViewChild.nativeElement.scrollLeft = 0;\n    }\n\n    onFooterScroll(event) {\n        this.scrollFooterViewChild.nativeElement.scrollLeft = 0;\n    }\n\n    onBodyScroll(event) {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = this.scrollBodyViewChild.nativeElement.scrollTop;\n        }\n\n        if (this.tt.virtualScroll) {\n            let viewport = DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n            let tableHeight = DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement);\n            let pageHeight = this.tt.virtualRowHeight * this.tt.rows;\n            let virtualTableHeight = DomHandler.getOuterHeight(this.virtualScrollerViewChild.nativeElement);\n            let pageCount = (virtualTableHeight / pageHeight)||1;\n            let scrollBodyTop = this.scrollTableViewChild.nativeElement.style.top||'0';\n\n            if ((this.scrollBodyViewChild.nativeElement.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight) ||Â (this.scrollBodyViewChild.nativeElement.scrollTop < parseFloat(scrollBodyTop))) {\n                if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                    this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\n                    this.scrollLoadingTableViewChild.nativeElement.style.top = this.scrollBodyViewChild.nativeElement.scrollTop + 'px';\n                }\n                \n                let page = Math.floor((this.scrollBodyViewChild.nativeElement.scrollTop * pageCount) / (this.scrollBodyViewChild.nativeElement.scrollHeight)) + 1;\n                this.tt.handleVirtualScroll({\n                    page: page,\n                    callback: () => {\n                        if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                            this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\n                        }\n                        \n                        this.scrollTableViewChild.nativeElement.style.top = ((page - 1) * pageHeight) + 'px';\n\n                        if (this.frozenSiblingBody) {\n                            (<HTMLElement> this.frozenSiblingBody.children[0]).style.top = this.scrollTableViewChild.nativeElement.style.top;\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    setScrollHeight() {\n        if(this.scrollHeight && this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            if(this.scrollHeight.indexOf('%') !== -1) {\n                let relativeHeight;\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'hidden';\n                this.scrollBodyViewChild.nativeElement.style.height = '100px';     //temporary height to calculate static height\n                let containerHeight = DomHandler.getOuterHeight(this.tt.el.nativeElement.children[0]);\n                \n                if (this.scrollHeight.includes(\"calc\")) {\n                    let percentHeight = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"(\") + 1, this.scrollHeight.indexOf(\"%\")));\n                    let diffValue = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"-\") + 1, this.scrollHeight.indexOf(\")\")));\n                    relativeHeight = (DomHandler.getOuterHeight(this.tt.el.nativeElement.parentElement) * percentHeight / 100) - diffValue;\n                }\n                else {\n                    relativeHeight = DomHandler.getOuterHeight(this.tt.el.nativeElement.parentElement) * parseInt(this.scrollHeight) / 100;\n                }\n                \n                let staticHeight = containerHeight - 100;   //total height of headers, footers, paginators\n                let scrollBodyHeight = (relativeHeight - staticHeight);\n\n                if(this.frozen) {\n                    scrollBodyHeight -= DomHandler.calculateScrollbarWidth();\n                }\n                \n                this.scrollBodyViewChild.nativeElement.style.height = 'auto';\n                this.scrollBodyViewChild.nativeElement.style.maxHeight = scrollBodyHeight + 'px';\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'visible';\n            }\n            else {\n                if(this.frozen)\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = (parseInt(this.scrollHeight) - DomHandler.calculateScrollbarWidth()) + 'px';\n                else\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = this.scrollHeight;\n            }\n        }\n    }\n\n    setVirtualScrollerHeight() {\n        if(this.virtualScrollerViewChild.nativeElement) {\n            this.virtualScrollerViewChild.nativeElement.style.height = this.tt.totalRecords * this.tt.virtualRowHeight + 'px';\n        }\n    }\n\n    hasVerticalOverflow() {\n        return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    }\n\n    alignScrollBar() {\n        if(!this.frozen) {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            \n            if(this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n\n        if(this.subscription) {\n            this.subscription.unsubscribe();\n        }\n\n        if(this.totalRecordsSubscription) {\n            this.totalRecordsSubscription.unsubscribe();\n        }\n\n        this.initialized = false;\n    }\n}\n\n@Directive({\n    selector: '[ttSortableColumn]',\n    host: {\n        '[class.ui-sortable-column]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null'\n    }\n})\nexport class TTSortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"ttSortableColumn\") field: string;\n\n    @Input() ttSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n    \n    subscription: Subscription;\n\n    constructor(public tt: TreeTable) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: 'p-treeTableSortIcon',\n    template: `\n        <i class=\"ui-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-up': sortOrder === 1, 'pi-sort-down': sortOrder === -1, 'pi-sort': sortOrder === 0}\"></i>\n    `\n})\nexport class TTSortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n    \n    @Input() ariaLabelDesc: string;\n    \n    @Input() ariaLabelAsc: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public tt: TreeTable) {\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n    \n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[ttResizableColumn]'\n})\nexport class TTResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'ui-column-resizer ui-clickable';\n            this.el.nativeElement.appendChild(this.resizer);\n    \n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: Event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n\n    onDocumentMouseMove(event: Event) {\n        this.tt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: Event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n        \n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[ttReorderableColumn]'\n})\nexport class TTReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || DomHandler.hasClass(event.target, 'ui-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRow]',\n    host: {\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRow\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: Event) {\n        this.onClick(event);\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRowDblClick]',\n    host: {\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRowDblClick\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttContextMenuRow]',\n    host: {\n        '[class.ui-contextmenu-selected]': 'selected'\n    }\n})\nexport class TTContextMenuRow {\n\n    @Input(\"ttContextMenuRow\") rowNode: any;\n\n    @Input() ttContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-treetable-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TTCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input(\"value\") rowNode: any;\n\n    @ViewChild('box', { static: true }) boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n\n    onClick(event: Event) {\n        if(!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n   \n}\n\n@Component({\n    selector: 'p-treeTableHeaderCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-treetable-header-chkbox ui-widget\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TTHeaderCheckbox  {\n\n    @ViewChild('box', { static: true }) boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    disabled: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event, checked) {\n        if(this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n        \n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        let checked: boolean;\n        const data = this.tt.filteredNodes||this.tt.value;\n\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }   \n                else  {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n\n        return checked;\n    }\n   \n}\n\n@Directive({\n    selector: '[ttEditableColumn]'\n})\nexport class TTEditableColumn implements AfterViewInit {\n\n    @Input(\"ttEditableColumn\") data: any;\n\n    @Input(\"ttEditableColumnField\") field: any;\n\n    @Input() ttEditableColumnDisabled: boolean;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n        \n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement);\n        DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data});\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n    \n                event.preventDefault();\n            }\n    \n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n    \n                event.preventDefault();\n            }\n    \n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                \n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'ui-editing-cell')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'ui-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'ui-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCellEditor',\n    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TreeTableCellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public tt: TreeTable, public editableColumn: TTEditableColumn) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\n\n@Directive({\n    selector: '[ttRow]',\n    host: {\n        '[attr.tabindex]': '\"0\"'\n    }\n})\nexport class TTRow {\n\n    @Input('ttRow') rowNode: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n        }\n    }\n\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.ui-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n}\n\n@Component({\n    selector: 'p-treeTableToggler',\n    template: `\n        <a class=\"ui-treetable-toggler ui-unselectable-text\" *ngIf=\"rowNode.node.leaf === false || rowNode.level !== 0 || rowNode.node.children && rowNode.node.children.length\" (click)=\"onClick($event)\"\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </a>\n    `\n})\nexport class TreeTableToggler {\n\n    @Input() rowNode: any;\n\n    constructor(public tt: TreeTable) {}\n\n    onClick(event: Event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n\n        if(this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n        \n        event.preventDefault();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule],\n    exports: [TreeTable,SharedModule,TreeTableToggler,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor],\n    declarations: [TreeTable,TreeTableToggler,TTScrollableView,TTBody,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor]\n})\nexport class TreeTableModule { }"]}