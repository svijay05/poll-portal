{"version":3,"sources":["ng://primeng/dynamicdialog/dynamicdialogcontent.ts","ng://primeng/dynamicdialog/dynamicdialog-config.ts","ng://primeng/dynamicdialog/dynamicdialog-ref.ts","ng://primeng/dynamicdialog/dynamicdialog.ts","ng://primeng/dynamicdialog/dynamicdialog-injector.ts","ng://primeng/dynamicdialog/dialogservice.ts"],"names":["DynamicDialogContent","viewContainerRef","this","ViewContainerRef","__decorate","Directive","selector","DynamicDialogRef","_onClose","Subject","onClose","asObservable","prototype","close","result","next","DynamicDialogComponent","componentFactoryResolver","cd","renderer","config","dialogRef","zone","visible","ngAfterViewInit","loadChildComponent","childComponentType","detectChanges","onOverlayClicked","evt","onDialogClicked","stopPropagation","componentType","componentFactory","resolveComponentFactory","insertionPoint","clear","componentRef","createComponent","moveOnTop","autoZIndex","zIndex","baseZIndex","DomHandler","zindex","container","style","String","maskViewChild","nativeElement","onAnimationStart","event","toState","element","bindGlobalListeners","addClass","document","body","onContainerDestroy","onAnimationEnd","removeClass","unbindGlobalListeners","onMaskClick","dismissableMask","closeOnEscape","closable","bindDocumentEscapeListener","unbindDocumentEscapeListener","_this","documentEscapeListener","listen","which","parseInt","ngOnDestroy","destroy","ComponentFactoryResolver","ChangeDetectorRef","Renderer2","DynamicDialogConfig","NgZone","ViewChild","static","__decorate$1","Component","template","animations","trigger","state","transform","opacity","transition","animate","DynamicDialogModule","NgModule","imports","CommonModule","declarations","entryComponents","DynamicDialogInjector","_parentInjector","_additionalTokens","get","token","notFoundValue","flags","value","DialogService","appRef","injector","open","appendDialogComponentToBody","dialogComponentRef","instance","map","WeakMap","set","sub","subscribe","removeDialogComponentFromBody","unsubscribe","create","attachView","hostView","domElem","rootNodes","appendChild","detachView","ApplicationRef","Injector","__decorate$2","Injectable"],"mappings":"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","sourcesContent":["import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[pDynamicDialogContent]'\n})\nexport class DynamicDialogContent {\n  \n\tconstructor(public viewContainerRef: ViewContainerRef) {}\n\n}\n","export class DynamicDialogConfig {\r\n\tdata?: any;\r\n\theader?: string;\r\n\tfooter?: string;\r\n\twidth?: string;\r\n\theight?: string;\r\n\tcloseOnEscape?: boolean;\r\n\tbaseZIndex?: number;\r\n\tautoZIndex?: boolean;\r\n\tdismissableMask?: boolean;\r\n\trtl?: boolean;\r\n\tstyle?: any;\r\n\tcontentStyle?: any;\r\n\tstyleClass?: string;\r\n\ttransitionOptions?: string;\r\n\tclosable?: boolean;\r\n\tshowHeader?: boolean;\r\n}\r\n","import { Observable, Subject } from 'rxjs';\r\n\r\nexport class DynamicDialogRef {\r\n\tconstructor() { }\r\n\r\n\tclose(result?: any) {\r\n\t\tthis._onClose.next(result);\r\n\t}\r\n\r\n\tprivate readonly _onClose = new Subject<any>();\r\n\tonClose: Observable<any> = this._onClose.asObservable();\r\n}\r\n","import { Component, NgModule, Type, ComponentFactoryResolver, ViewChild, OnDestroy, ComponentRef, AfterViewInit, ChangeDetectorRef, Renderer2, NgZone, ElementRef } from '@angular/core';\nimport { trigger,state,style,transition,animate,AnimationEvent } from '@angular/animations';\nimport { DynamicDialogContent } from './dynamicdialogcontent';\nimport { DynamicDialogConfig } from './dynamicdialog-config';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { DynamicDialogRef } from './dynamicdialog-ref';\n\n@Component({\n\tselector: 'p-dynamicDialog',\n\ttemplate: `\n\t\t<div #mask class=\"ui-widget-overlay ui-dialog-mask ui-dialog-mask-scrollblocker\" *ngIf=\"visible\" (click)=\"onMaskClick()\"></div>\n\t\t<div [ngClass]=\"{'ui-dialog ui-dynamicdialog ui-widget ui-widget-content ui-corner-all ui-shadow':true, 'ui-dialog-rtl': config.rtl}\" [ngStyle]=\"config.style\" [class]=\"config.styleClass\"\n\t\t\t[@animation]=\"{value: 'visible', params: {transitionParams: config.transitionOptions || '150ms cubic-bezier(0, 0, 0.2, 1)'}}\" \n\t\t\t(@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\" role=\"dialog\" *ngIf=\"visible\"\n\t\t\t[style.width]=\"config.width\" [style.height]=\"config.height\">\n            <div class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\" *ngIf=\"config.showHeader === false ? false: true\">\n                <span class=\"ui-dialog-title\">{{config.header}}</span>\n                <a [ngClass]=\"'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all'\" tabindex=\"0\" role=\"button\" (click)=\"close()\" (keydown.enter)=\"close()\" *ngIf=\"config.closable === false ? false : true\">\n                    <span class=\"pi pi-times\"></span>\n                </a>\n            </div>\n            <div class=\"ui-dialog-content ui-widget-content\" [ngStyle]=\"config.contentStyle\">\n\t\t\t\t<ng-template pDynamicDialogContent></ng-template>\n\t\t\t</div>\n\t\t\t<div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"config.footer\">\n\t\t\t\t{{config.footer}}\n            </div>\n\t\t</div>\n\t`,\n\tanimations: [\n        trigger('animation', [\n            state('void', style({\n                transform: 'translateX(-50%) translateY(-50%) scale(0.7)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'translateX(-50%) translateY(-50%) scale(1)',\n                opacity: 1\n            })),\n            transition('* => *', animate('{{transitionParams}}'))\n        ])\n\t]\n})\nexport class DynamicDialogComponent implements AfterViewInit, OnDestroy {\n\n\tvisible: boolean = true;\n\n\tcomponentRef: ComponentRef<any>;\n\n\tmask: HTMLDivElement;\n\n\t@ViewChild(DynamicDialogContent, { static: false }) insertionPoint: DynamicDialogContent;\n\t\n\t@ViewChild('mask', { static: false }) maskViewChild: ElementRef;\n\n\tchildComponentType: Type<any>;\n\n\tcontainer: HTMLDivElement;\n\n\tdocumentEscapeListener: Function;\n\n\tconstructor(private componentFactoryResolver: ComponentFactoryResolver, private cd: ChangeDetectorRef, public renderer: Renderer2,\n\t\t\tpublic config: DynamicDialogConfig, private dialogRef: DynamicDialogRef, public zone: NgZone) { }\n\n\tngAfterViewInit() {\n\t\tthis.loadChildComponent(this.childComponentType);\n\t\tthis.cd.detectChanges();\n\t}\n\n\tonOverlayClicked(evt: MouseEvent) {\n\t\tthis.dialogRef.close();\n\t}\n\n\tonDialogClicked(evt: MouseEvent) {\n\t\tevt.stopPropagation();\n\t}\n\n\tloadChildComponent(componentType: Type<any>) {\n\t\tlet componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n\n\t\tlet viewContainerRef = this.insertionPoint.viewContainerRef;\n\t\tviewContainerRef.clear();\n\n\t\tthis.componentRef = viewContainerRef.createComponent(componentFactory);\n\t}\n\t\n\tmoveOnTop() {\n        if (this.config.autoZIndex !== false) {\n\t\t\tconst zIndex = this.config.baseZIndex||0 + (++DomHandler.zindex);\n\t\t\tthis.container.style.zIndex = String(zIndex);\n\t\t\tthis.maskViewChild.nativeElement.style.zIndex = String(zIndex - 1);\n\t\t}\n    }\n\n\tonAnimationStart(event: AnimationEvent) {\n\t\tswitch(event.toState) {\n\t\t\tcase 'visible':\n\t\t\t\tthis.container = event.element;\n\t\t\t\tthis.moveOnTop();\n\t\t\t\tthis.bindGlobalListeners();\n\t\t\t\tDomHandler.addClass(document.body, 'ui-overflow-hidden');\n\t\t\tbreak;\n\n\t\t\tcase 'void':\n\t\t\t\tthis.onContainerDestroy();\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tonAnimationEnd(event: AnimationEvent) {\n\t\tif (event.toState === 'void') {\n\t\t\tthis.dialogRef.close();\n\t\t}\n\t}\n\n\tonContainerDestroy() {\n\t\tDomHandler.removeClass(document.body, 'ui-overflow-hidden');\n\t\tthis.unbindGlobalListeners();\n\t\tthis.container = null;\n\t}\n\t    \n\tclose() {\n\t\tthis.visible = false;\n\t}\n\n\tonMaskClick() {\n\t\tif (this.config.dismissableMask) {\n\t\t\tthis.close();\n\t\t}\n\t}\n\n\tbindGlobalListeners() {\n        if (this.config.closeOnEscape !== false && this.config.closable !== false) {\n            this.bindDocumentEscapeListener();\n        }\n    }\n    \n    unbindGlobalListeners() {\n        this.unbindDocumentEscapeListener();\n\t}\n\t\n\tbindDocumentEscapeListener() {\n        this.documentEscapeListener = this.renderer.listen('document', 'keydown', (event) => {\n            if (event.which == 27) {\n                if (parseInt(this.container.style.zIndex) == DomHandler.zindex) {\n\t\t\t\t\tthis.close();\n\t\t\t\t}\n            }\n        });\n    }\n    \n    unbindDocumentEscapeListener() {\n        if(this.documentEscapeListener) {\n            this.documentEscapeListener();\n            this.documentEscapeListener = null;\n        }\n    }\n\n\tngOnDestroy() {\n\t\tthis.onContainerDestroy();\n\n\t\tif (this.componentRef) {\n\t\t\tthis.componentRef.destroy();\n\t\t}\n\t}\n}\n\n@NgModule({\n\timports: [CommonModule],\n\tdeclarations: [DynamicDialogComponent, DynamicDialogContent],\n\tentryComponents: [DynamicDialogComponent]\n})\nexport class DynamicDialogModule { }","import { Injector, Type, InjectionToken, InjectFlags } from '@angular/core';\r\n\r\nexport class DynamicDialogInjector implements Injector {\r\n\t\r\n\tconstructor(private _parentInjector: Injector, private _additionalTokens: WeakMap<any, any>) { }\r\n\r\n\tget<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\r\n\tget(token: any, notFoundValue?: any);\r\n\tget(token: any, notFoundValue?: any, flags?: any) {\r\n\t\tconst value = this._additionalTokens.get(token);\r\n\r\n\t\tif (value) return value;\r\n\r\n\t\treturn this._parentInjector.get<any>(token, notFoundValue);\r\n\t}\r\n}\r\n","import { Injectable, ComponentFactoryResolver, ApplicationRef, Injector, Type, EmbeddedViewRef, ComponentRef } from '@angular/core';\nimport { DynamicDialogComponent } from './dynamicdialog';\nimport { DynamicDialogInjector } from './dynamicdialog-injector';\nimport { DynamicDialogConfig } from './dynamicdialog-config';\nimport { DynamicDialogRef } from './dynamicdialog-ref';\n\n@Injectable()\nexport class DialogService {\n    \n    dialogComponentRef: ComponentRef<DynamicDialogComponent>;\n\n    constructor(private componentFactoryResolver: ComponentFactoryResolver, private appRef: ApplicationRef, private injector: Injector) { }\n\n    public open(componentType: Type<any>, config: DynamicDialogConfig) {\n        const dialogRef = this.appendDialogComponentToBody(config);\n\n        this.dialogComponentRef.instance.childComponentType = componentType;\n\n        return dialogRef;\n    }\n\n    private appendDialogComponentToBody(config: DynamicDialogConfig) {\n        const map = new WeakMap();\n        map.set(DynamicDialogConfig, config);\n\n        const dialogRef = new DynamicDialogRef();\n        map.set(DynamicDialogRef, dialogRef);\n\n        const sub = dialogRef.onClose.subscribe(() => {\n            this.removeDialogComponentFromBody();\n            sub.unsubscribe();\n        });\n\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(DynamicDialogComponent);\n        const componentRef = componentFactory.create(new DynamicDialogInjector(this.injector, map));\n\n        this.appRef.attachView(componentRef.hostView);\n\n        const domElem = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        document.body.appendChild(domElem);\n\n        this.dialogComponentRef = componentRef;\n\n        return dialogRef;\n    }\n\n    private removeDialogComponentFromBody() {\n        this.appRef.detachView(this.dialogComponentRef.hostView);\n        this.dialogComponentRef.destroy();\n    }\n}\n"]}